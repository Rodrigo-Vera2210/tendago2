    
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Amonsys Software Factory.
//     Template: Speed Developer FrameWork Version 1.0 (For Windows Applications)
//     Web Site: http://www.amonsys.com/SDF
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using ER.BE; 


namespace ER.DA
{
    public partial class ProductoDataAccessCollection
    {


		#region << Custom Stored Procedures >>


		#endregion

		/*public static ProductoEntityCollection LoadAll(SqlConnection conexion, SqlTransaction  transaction)
        {
            SqlCommand mCommand = new SqlCommand();
            SqlDataReader reader = null;
            try
            {
                mCommand.Connection = conexion;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                
                mCommand.CommandText = "Producto_LoadAll";


                if (conexion.State != ConnectionState.Open) conexion.Open();
                reader = mCommand.ExecuteReader();

                ProductoEntityCollection productoEntityCollection = new ProductoEntityCollection();
                ProductoEntity productoEntity;
                
                while (reader.Read())
                {
                    productoEntity = new ProductoEntity();
                    
					productoEntity.Id = Convert.ToInt32(reader["Id"]);
					productoEntity.IdEmpresa = Convert.ToInt32(reader["IdEmpresa"]);
					productoEntity.CodigoProveedor = Convert.ToString(reader["CodigoProveedor"]);
					productoEntity.CodigoInterno = Convert.ToString(reader["CodigoInterno"]);
					productoEntity.TipoProducto = Convert.ToString(reader["TipoProducto"]);
					productoEntity.Producto = Convert.ToString(reader["Producto"]);
					if (reader["Descripcion"] != DBNull.Value)
					{
						productoEntity.Descripcion = Convert.ToString(reader["Descripcion"]).ToUpper();
					}
					productoEntity.DescipcionBusqueda = Convert.ToString(reader["DescipcionBusqueda"]);
					if (reader["Foto"] != DBNull.Value)
					{
						productoEntity.Foto = (byte[]) reader["Foto"];
					}
					productoEntity.Stock = Convert.ToInt32(reader["Stock"]);
					if (reader["StockMinimo"] != DBNull.Value)
					{
						productoEntity.StockMinimo = Convert.ToInt32(reader["StockMinimo"]);
					}
					productoEntity.Costo = (decimal) reader["Costo"];
					if (reader["UnidadMedida"] != DBNull.Value)
					{
						productoEntity.UnidadMedida = Convert.ToInt32(reader["UnidadMedida"]);
					}
					if (reader["Descuento"] != DBNull.Value)
					{
						productoEntity.Descuento = (decimal) reader["Descuento"];
					}
					if (reader["CobraIva"] != DBNull.Value)
					{
						productoEntity.CobraIva = Convert.ToBoolean(reader["CobraIva"]);
					}
					if (reader["IdDivision"] != DBNull.Value)
					{
						productoEntity.IdDivision = Convert.ToInt32(reader["IdDivision"]);
					}
					if (reader["IdLinea"] != DBNull.Value)
					{
						productoEntity.IdLinea = Convert.ToInt32(reader["IdLinea"]);
					}
					if (reader["IdCategoria"] != DBNull.Value)
					{
						productoEntity.IdCategoria = Convert.ToInt32(reader["IdCategoria"]);
					}
					if (reader["IdMarca"] != DBNull.Value)
					{
						productoEntity.IdMarca = Convert.ToInt32(reader["IdMarca"]);
					}
					if (reader["Peso"] != DBNull.Value)
					{
						productoEntity.Peso = (decimal) reader["Peso"];
					}
					if (reader["Volumen"] != DBNull.Value)
					{
						productoEntity.Volumen = (decimal) reader["Volumen"];
					}
					if (reader["RegistroSanitario"] != DBNull.Value)
					{
						productoEntity.RegistroSanitario = Convert.ToString(reader["RegistroSanitario"]).ToUpper();
					}
					productoEntity.IpIngreso = Convert.ToString(reader["IpIngreso"]);
					productoEntity.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
					productoEntity.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);
					if (reader["IpModificacion"] != DBNull.Value)
					{
						productoEntity.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
					}
					if (reader["UsuarioModificacion"] != DBNull.Value)
					{
						productoEntity.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
					}
					if (reader["FechaModificacion"] != DBNull.Value)
					{
						productoEntity.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
					}
					productoEntity.IdEstado = Convert.ToInt16(reader["IdEstado"]);

                    
                    productoEntity.SetLoadedState();
                    productoEntityCollection.Add(productoEntity);
                    
                }

                return productoEntityCollection;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (reader != null) reader.Close();
                mCommand.Dispose();
            }

        }
        */
		//

		public static ProductoEntityCollection SearchProducts(int idEmpresa, string searchTerm, bool parentsOnly = false, SqlConnection conexion = null, SqlTransaction transaction = null, int? page = null)
        {
            SqlCommand mCommand = new SqlCommand();
            SqlDataReader reader = null;
            try
            {
                mCommand.Connection = conexion;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;

				if (page >= 1)
				{
					mCommand.CommandText = "Producto_SearchProductsPaged";
				}
				else
					mCommand.CommandText = "Producto_SearchProducts";


                mCommand.Parameters.AddWithValue("@IdEmpresa", idEmpresa);
                
                if (!String.IsNullOrEmpty(searchTerm))
                {
                    mCommand.Parameters.AddWithValue("@searchTerm", searchTerm);
                }
                else
                {
                    mCommand.Parameters.AddWithValue("@searchTerm", DBNull.Value);
                }
				  
				mCommand.Parameters.AddWithValue("@ParentsOnly", parentsOnly);

				if (page >= 1)
				{
					mCommand.Parameters.AddWithValue("@PageNumber", page);
					mCommand.Parameters.AddWithValue("@PageSize", 10);
				}

				if (conexion.State != ConnectionState.Open) conexion.Open();
                reader = mCommand.ExecuteReader();

                ProductoEntityCollection productoEntityCollection = new ProductoEntityCollection();
                ProductoEntity productoEntity;


                while (reader.Read())
                {
                    productoEntity = new ProductoEntity();
                    
                    productoEntity.Id = Convert.ToInt32(reader["Id"]);
                    productoEntity.IdEmpresa = Convert.ToInt32(reader["IdEmpresa"]);
                    productoEntity.CodigoProveedor = Convert.ToString(reader["CodigoProveedor"]);
                    productoEntity.CodigoInterno = Convert.ToString(reader["CodigoInterno"]);
                    productoEntity.CodigoBarra = Convert.ToString(reader["CodigoBarra"]);
                    productoEntity.TipoProducto = Convert.ToString(reader["TipoProducto"]);
                    productoEntity.Producto = Convert.ToString(reader["Producto"]);
                    if (reader["Descripcion"] != DBNull.Value)
                    {
                        productoEntity.Descripcion = Convert.ToString(reader["Descripcion"]).ToUpper();
                    }
                    if (reader["PathArchivo"] != DBNull.Value)
                    {
                        productoEntity.PathArchivo = Convert.ToString(reader["PathArchivo"]);
                    }
                    productoEntity.DescipcionBusqueda = Convert.ToString(reader["DescipcionBusqueda"]);
                    productoEntity.Stock = Convert.ToDecimal(reader["Stock"]);
                    if (reader["StockMinimo"] != DBNull.Value)
                    {
                        productoEntity.StockMinimo = Convert.ToDecimal(reader["StockMinimo"]);
                    }
                    productoEntity.Costo = (decimal)reader["Costo"];
                    if (reader["UnidadMedida"] != DBNull.Value)
                    {
                        productoEntity.UnidadMedida = Convert.ToInt32(reader["UnidadMedida"]);
                    }
                    if (reader["Descuento"] != DBNull.Value)
                    {
                        productoEntity.Descuento = (decimal)reader["Descuento"];
                    }
                    if (reader["CobraIva"] != DBNull.Value)
                    {
                        productoEntity.CobraIva = Convert.ToBoolean(reader["CobraIva"]);
                    }
                    if (reader["IdDivision"] != DBNull.Value)
                    {
                        productoEntity.IdDivision = Convert.ToInt32(reader["IdDivision"]);
                    }
                    if (reader["IdLinea"] != DBNull.Value)
                    {
                        productoEntity.IdLinea = Convert.ToInt32(reader["IdLinea"]);
                    }
                    if (reader["IdCategoria"] != DBNull.Value)
                    {
                        productoEntity.IdCategoria = Convert.ToInt32(reader["IdCategoria"]);
                    }
                    if (reader["IdMarca"] != DBNull.Value)
                    {
                        productoEntity.IdMarca = Convert.ToInt32(reader["IdMarca"]);
                    }
                    if (reader["Peso"] != DBNull.Value)
                    {
                        productoEntity.Peso = (decimal)reader["Peso"];
                    }
                    if (reader["Volumen"] != DBNull.Value)
                    {
                        productoEntity.Volumen = (decimal)reader["Volumen"];
                    }
                    if (reader["RegistroSanitario"] != DBNull.Value)
                    {
                        productoEntity.RegistroSanitario = Convert.ToString(reader["RegistroSanitario"]).ToUpper();
                    }
                    
					productoEntity.IpIngreso = Convert.ToString(reader["IpIngreso"]);
                    productoEntity.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
                    productoEntity.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);
                    
					if (reader["IpModificacion"] != DBNull.Value)
                    {
                        productoEntity.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
                    }
                    if (reader["UsuarioModificacion"] != DBNull.Value)
                    {
                        productoEntity.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
                    }
                    if (reader["FechaModificacion"] != DBNull.Value)
                    {
                        productoEntity.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
                    }
                    
					productoEntity.IdEstado = Convert.ToInt16(reader["IdEstado"]);
                    
					if (reader["ProductoPadre"] != DBNull.Value)
                    {
                        productoEntity.ProductoPadre = Convert.ToInt32(reader["ProductoPadre"]);
                    }

					try
					{
						if (reader["CodigoInterno_ProductoFromProductoPadre"] != DBNull.Value)
						{
							productoEntity.CodigoProductoPadre = Convert.ToString(reader["CodigoInterno_ProductoFromProductoPadre"]);
						} 
					}
					catch { }

					try
					{ 
						if (reader["Marca_MarcaFromIdMarca"] != DBNull.Value)
						{
							productoEntity.Marca = Convert.ToString(reader["Marca_MarcaFromIdMarca"]);
						}
					}
					catch { }
					 
					productoEntity.SetLoadedState();
                    productoEntityCollection.Add(productoEntity);

                }

                return productoEntityCollection;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (reader != null) reader.Close();
                mCommand.Dispose();
            }

        }

		public static DataSet SalesByProduct(int empresaId, int idLocal, DateTime desde, DateTime hasta, SqlConnection conexion, SqlTransaction transaction)
		{
			SqlCommand mCommand = new SqlCommand();
			try
			{
				SqlDataAdapter adapter = new SqlDataAdapter();

				mCommand.Connection = conexion;
				mCommand.CommandType = CommandType.StoredProcedure;
				mCommand.Transaction = transaction;
				mCommand.CommandText = "Custom_VentasByProducto";

				mCommand.Parameters.AddWithValue("@IdEmpresa", empresaId);
				mCommand.Parameters.AddWithValue("@IdLocal", idLocal);
				mCommand.Parameters.AddWithValue("@Desde", desde);
				mCommand.Parameters.AddWithValue("@Hasta", hasta);

				adapter.SelectCommand = mCommand;

				DataSet result = new DataSet();
				adapter.Fill(result);
				return result;
			}
			catch (Exception exc)
			{
				throw exc;
			}
			finally
			{
				mCommand.Dispose();
			}
		}



		public static ProductoEntityCollection SearchProductsByLocal(int idEmpresa, int idLocal, string searchTerm, SqlConnection conexion, SqlTransaction transaction, int? page = null, string productType=null)
		{
			SqlCommand mCommand = new SqlCommand();
			SqlDataReader reader = null;
			try
			{
				mCommand.Connection = conexion;
				mCommand.CommandType = CommandType.StoredProcedure;
				mCommand.Transaction = transaction;

				if (page >= 1)
				{
					mCommand.CommandText = "Custom_Productos_SearchProductsByLocalPaged";
				}
				else
					mCommand.CommandText = "Custom_Productos_SearchProductsByLocal";
				
				mCommand.Parameters.AddWithValue("@IdEmpresa", idEmpresa);
				mCommand.Parameters.AddWithValue("@IdLocal", idLocal);

				if (!String.IsNullOrEmpty(searchTerm))
				{
					mCommand.Parameters.AddWithValue("@searchTerm", searchTerm);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@searchTerm", DBNull.Value);
				}

				if (page >= 1)
				{
					mCommand.Parameters.AddWithValue("@PageNumber", page);
					mCommand.Parameters.AddWithValue("@PageSize", 10);
				}

				if (!String.IsNullOrEmpty(productType))
				{
					mCommand.Parameters.AddWithValue("@TipoProducto", productType.ToUpper());
				}
				else
				{
					mCommand.Parameters.AddWithValue("@TipoProducto", DBNull.Value);
				}

				if (conexion.State != ConnectionState.Open) conexion.Open();
				reader = mCommand.ExecuteReader();

				ProductoEntityCollection productoEntityCollection = new ProductoEntityCollection();
				ProductoEntity productoEntity;


				while (reader.Read())
				{
					productoEntity = new ProductoEntity();

					productoEntity.Id = Convert.ToInt32(reader["Id"]);
					productoEntity.IdEmpresa = Convert.ToInt32(reader["IdEmpresa"]);
					productoEntity.IdTarifaImpuesto = Convert.ToInt32(reader["IdTarifaImpuesto"]);
					productoEntity.PorcentajeTarifaImpuesto = Convert.ToInt32(reader["PorcentajeTarifaImpuesto"]);
					productoEntity.CodigoProveedor = Convert.ToString(reader["CodigoProveedor"]);
					productoEntity.CodigoInterno = Convert.ToString(reader["CodigoInterno"]);
					productoEntity.CodigoBarra = Convert.ToString(reader["CodigoBarra"]);
					productoEntity.TipoProducto = Convert.ToString(reader["TipoProducto"]);
					productoEntity.Producto = Convert.ToString(reader["Producto"]);
					if (reader["Descripcion"] != DBNull.Value)
					{
						productoEntity.Descripcion = Convert.ToString(reader["Descripcion"]).ToUpper();
					}
					if (reader["PathArchivo"] != DBNull.Value)
					{
						productoEntity.PathArchivo = Convert.ToString(reader["PathArchivo"]);
					}
					productoEntity.DescipcionBusqueda = Convert.ToString(reader["DescipcionBusqueda"]);
					productoEntity.Stock = Convert.ToDecimal(reader["Stock"]);
					if (reader["StockMinimo"] != DBNull.Value)
					{
						productoEntity.StockMinimo = Convert.ToDecimal(reader["StockMinimo"]);
					}
					productoEntity.Costo = (decimal)reader["Costo"];
					if (reader["UnidadMedida"] != DBNull.Value)
					{
						productoEntity.UnidadMedida = Convert.ToInt32(reader["UnidadMedida"]);
                        productoEntity.UnidadMedidaAsUnidadMedida = UnidadMedidaDataAccess.ConvertToUnidadMedidaEntity(reader, "UnidadMedida");
                    }
					if (reader["Descuento"] != DBNull.Value)
					{
						productoEntity.Descuento = (decimal)reader["Descuento"];
					}
					if (reader["CobraIva"] != DBNull.Value)
					{
						productoEntity.CobraIva = Convert.ToBoolean(reader["CobraIva"]);
					}
					if (reader["IdDivision"] != DBNull.Value)
					{
						productoEntity.IdDivision = Convert.ToInt32(reader["IdDivision"]);
					}
					if (reader["IdLinea"] != DBNull.Value)
					{
						productoEntity.IdLinea = Convert.ToInt32(reader["IdLinea"]);
					}
					if (reader["IdCategoria"] != DBNull.Value)
					{
						productoEntity.IdCategoria = Convert.ToInt32(reader["IdCategoria"]);
					}
					if (reader["IdMarca"] != DBNull.Value)
					{
						productoEntity.IdMarca = Convert.ToInt32(reader["IdMarca"]);
					}
					if (reader["Peso"] != DBNull.Value)
					{
						productoEntity.Peso = (decimal)reader["Peso"];
					}
					if (reader["Volumen"] != DBNull.Value)
					{
						productoEntity.Volumen = (decimal)reader["Volumen"];
					}
					if (reader["RegistroSanitario"] != DBNull.Value)
					{
						productoEntity.RegistroSanitario = Convert.ToString(reader["RegistroSanitario"]).ToUpper();
					}
					productoEntity.IpIngreso = Convert.ToString(reader["IpIngreso"]);
					productoEntity.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
					productoEntity.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);
					if (reader["IpModificacion"] != DBNull.Value)
					{
						productoEntity.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
					}
					if (reader["UsuarioModificacion"] != DBNull.Value)
					{
						productoEntity.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
					}
					if (reader["FechaModificacion"] != DBNull.Value)
					{
						productoEntity.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
					}
					productoEntity.IdEstado = Convert.ToInt16(reader["IdEstado"]);
					if (reader["ProductoPadre"] != DBNull.Value)
					{
						productoEntity.ProductoPadre = Convert.ToInt32(reader["ProductoPadre"]);
					}
					try
					{
						if (reader["CodigoInterno_ProductoFromProductoPadre"] != DBNull.Value)
						{
							productoEntity.CodigoProductoPadre = Convert.ToString(reader["CodigoInterno_ProductoFromProductoPadre"]);
						}
					}
					catch { }

					try
					{
						if (reader["Marca_MarcaFromIdMarca"] != DBNull.Value)
						{
							productoEntity.Marca = Convert.ToString(reader["Marca_MarcaFromIdMarca"]);
						}
					}
					catch { }

					productoEntity.SetLoadedState();
					productoEntityCollection.Add(productoEntity);

				}

				return productoEntityCollection;
			}
			catch (Exception exc)
			{
				throw exc;
			}
			finally
			{
				if (reader != null) reader.Close();
				mCommand.Dispose();
			}

		}

		public static ProductoEntityCollection FindByAll(ProductoFindParameterEntity findParameter , SqlConnection conexion, SqlTransaction  transaction)
        {
        	return FindByAll(findParameter,conexion,transaction,1);
        }
        
        public static ProductoEntityCollection FindByAll(ProductoFindParameterEntity findParameter , SqlConnection conexion, SqlTransaction  transaction, int deepLoadLevel)
        {
            SqlCommand mCommand = new SqlCommand();
            SqlDataReader reader = null;
            try
            {
                mCommand.Connection = conexion;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                if (deepLoadLevel >= 1)
		     	{
                	mCommand.CommandText = "Producto_DeepFindByAll";
                }
                else mCommand.CommandText = "Producto_FindByAll";

                
				if(findParameter.Id != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Id", findParameter.Id);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Id",DBNull.Value);
				}

				if(findParameter.IdEmpresa != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdEmpresa", findParameter.IdEmpresa);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEmpresa",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.CodigoProveedor))
				{
					mCommand.Parameters.AddWithValue("@CodigoProveedor", findParameter.CodigoProveedor );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@CodigoProveedor",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.CodigoInterno))
				{
					mCommand.Parameters.AddWithValue("@CodigoInterno", findParameter.CodigoInterno );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@CodigoInterno",DBNull.Value);
				}

                if (!String.IsNullOrEmpty(findParameter.CodigoBarra))
                {
                    mCommand.Parameters.AddWithValue("@CodigoBarra", findParameter.CodigoBarra);
                }
                else
                {
                    mCommand.Parameters.AddWithValue("@CodigoBarra", DBNull.Value);
                }

                if (!String.IsNullOrEmpty(findParameter.TipoProducto))
				{
					mCommand.Parameters.AddWithValue("@TipoProducto", findParameter.TipoProducto );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@TipoProducto",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.Producto))
				{
					mCommand.Parameters.AddWithValue("@Producto", findParameter.Producto );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Producto",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.Descripcion))
				{
					mCommand.Parameters.AddWithValue("@Descripcion", findParameter.Descripcion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Descripcion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.DescipcionBusqueda))
				{
					mCommand.Parameters.AddWithValue("@DescipcionBusqueda", findParameter.DescipcionBusqueda );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@DescipcionBusqueda",DBNull.Value);
				}

				if(findParameter.Stock != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Stock", findParameter.Stock);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Stock",DBNull.Value);
				}

				if(findParameter.StockMinimo != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@StockMinimo", findParameter.StockMinimo);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@StockMinimo",DBNull.Value);
				}

				if(findParameter.Costo != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Costo", findParameter.Costo);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Costo",DBNull.Value);
				}

				if(findParameter.UnidadMedida != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@UnidadMedida", findParameter.UnidadMedida);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UnidadMedida",DBNull.Value);
				}

				if(findParameter.Descuento != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Descuento", findParameter.Descuento);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Descuento",DBNull.Value);
				}

				if(findParameter.CobraIva != -1)
				{
					if (findParameter.CobraIva == 1)
					{
						mCommand.Parameters.AddWithValue("@CobraIva", true);
					}
					else
					{
						mCommand.Parameters.AddWithValue("@CobraIva", false);
					}
				}
				else
				{
					mCommand.Parameters.AddWithValue("@CobraIva",DBNull.Value);
				}

				if(findParameter.IdDivision != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdDivision", findParameter.IdDivision);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdDivision",DBNull.Value);
				}

				if(findParameter.IdLinea != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdLinea", findParameter.IdLinea);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdLinea",DBNull.Value);
				}

				if(findParameter.IdCategoria != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdCategoria", findParameter.IdCategoria);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdCategoria",DBNull.Value);
				}

				if(findParameter.IdMarca != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdMarca", findParameter.IdMarca);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdMarca",DBNull.Value);
				}

				if(findParameter.Peso != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Peso", findParameter.Peso);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Peso",DBNull.Value);
				}

				if(findParameter.Volumen != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Volumen", findParameter.Volumen);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Volumen",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.RegistroSanitario))
				{
					mCommand.Parameters.AddWithValue("@RegistroSanitario", findParameter.RegistroSanitario );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@RegistroSanitario",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IpIngreso))
				{
					mCommand.Parameters.AddWithValue("@IpIngreso", findParameter.IpIngreso );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpIngreso",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UsuarioIngreso))
				{
					mCommand.Parameters.AddWithValue("@UsuarioIngreso", findParameter.UsuarioIngreso );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioIngreso",DBNull.Value);
				}

				if(findParameter.FechaIngreso != null && findParameter.FechaIngreso != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaIngreso", findParameter.FechaIngreso);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaIngreso",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IpModificacion))
				{
					mCommand.Parameters.AddWithValue("@IpModificacion", findParameter.IpModificacion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpModificacion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UsuarioModificacion))
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion", findParameter.UsuarioModificacion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion",DBNull.Value);
				}

				if(findParameter.FechaModificacion != null && findParameter.FechaModificacion != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion", findParameter.FechaModificacion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion",DBNull.Value);
				}

				if(findParameter.IdEstado != short.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdEstado", findParameter.IdEstado);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEstado",DBNull.Value);
				}

				//// ver parametros ver sql query sql
				string sql = mCommand.CommandText;

				foreach (SqlParameter parameter in mCommand.Parameters)
				{
					string valueString = (parameter.Value != null && parameter.Value != DBNull.Value) ? $"'{parameter.Value}'" : "NULL";
					sql += $" {valueString},";
				}

				// Eliminamos la coma final
				sql = sql.TrimEnd(',');



				if (conexion.State != ConnectionState.Open) conexion.Open();
                reader = mCommand.ExecuteReader();

                ProductoEntityCollection productoEntityCollection = new ProductoEntityCollection();
                ProductoEntity productoEntity;
                

                while (reader.Read())
                {
                    productoEntity = new ProductoEntity();
					#region << Deep Load >>
                    if (deepLoadLevel == 1)
		     		{
						productoEntity.UnidadMedidaAsUnidadMedida = UnidadMedidaDataAccess.ConvertToUnidadMedidaEntity(reader, "UnidadMedida");
						productoEntity.IdDivisionAsDivision = DivisionDataAccess.ConvertToDivisionEntity(reader, "IdDivision");
						productoEntity.IdLineaAsLinea = LineaDataAccess.ConvertToLineaEntity(reader, "IdLinea");
						productoEntity.IdCategoriaAsCategoria = CategoriaDataAccess.ConvertToCategoriaEntity(reader, "IdCategoria");
						productoEntity.IdMarcaAsMarca = MarcaDataAccess.ConvertToMarcaEntity(reader, "IdMarca");
                        productoEntity.ProductoPadreAsProducto = ProductoDataAccess.ConvertToProductoEntity(reader, "ProductoPadre");

                    }
	                #endregion                    
					productoEntity.Id = Convert.ToInt32(reader["Id"]);
					productoEntity.IdEmpresa = Convert.ToInt32(reader["IdEmpresa"]);
					productoEntity.CodigoProveedor = Convert.ToString(reader["CodigoProveedor"]);
					productoEntity.CodigoInterno = Convert.ToString(reader["CodigoInterno"]);
                    productoEntity.CodigoBarra = Convert.ToString(reader["CodigoBarra"]);
                    productoEntity.TipoProducto = Convert.ToString(reader["TipoProducto"]);
					productoEntity.Producto = Convert.ToString(reader["Producto"]);
					if (reader["Descripcion"] != DBNull.Value)
					{
						productoEntity.Descripcion = Convert.ToString(reader["Descripcion"]).ToUpper();
					}
                    if (reader["PathArchivo"] != DBNull.Value)
                    {
                        productoEntity.PathArchivo = Convert.ToString(reader["PathArchivo"]);
                    }
                    productoEntity.DescipcionBusqueda = Convert.ToString(reader["DescipcionBusqueda"]);
					productoEntity.Stock = Convert.ToDecimal(reader["Stock"]);
					if (reader["StockMinimo"] != DBNull.Value)
					{
						productoEntity.StockMinimo = Convert.ToDecimal(reader["StockMinimo"]);
					}
					productoEntity.Costo = (decimal) reader["Costo"];
					if (reader["UnidadMedida"] != DBNull.Value)
					{
						productoEntity.UnidadMedida = Convert.ToInt32(reader["UnidadMedida"]);
                        productoEntity.UnidadMedidaAsUnidadMedida = UnidadMedidaDataAccess.ConvertToUnidadMedidaEntity(reader, "UnidadMedida");
                    }
					if (reader["Descuento"] != DBNull.Value)
					{
						productoEntity.Descuento = (decimal) reader["Descuento"];
					}
					if (reader["CobraIva"] != DBNull.Value)
					{
						productoEntity.CobraIva = Convert.ToBoolean(reader["CobraIva"]);
					}
					if (reader["IdDivision"] != DBNull.Value)
					{
						productoEntity.IdDivision = Convert.ToInt32(reader["IdDivision"]);
					}
					if (reader["IdLinea"] != DBNull.Value)
					{
						productoEntity.IdLinea = Convert.ToInt32(reader["IdLinea"]);
					}
					if (reader["IdCategoria"] != DBNull.Value)
					{
						productoEntity.IdCategoria = Convert.ToInt32(reader["IdCategoria"]);
					}
					if (reader["IdMarca"] != DBNull.Value)
					{
						productoEntity.IdMarca = Convert.ToInt32(reader["IdMarca"]);
					}
					if (reader["Peso"] != DBNull.Value)
					{
						productoEntity.Peso = (decimal) reader["Peso"];
					}
					if (reader["Volumen"] != DBNull.Value)
					{
						productoEntity.Volumen = (decimal) reader["Volumen"];
					}
					if (reader["RegistroSanitario"] != DBNull.Value)
					{
						productoEntity.RegistroSanitario = Convert.ToString(reader["RegistroSanitario"]).ToUpper();
					}
					productoEntity.IpIngreso = Convert.ToString(reader["IpIngreso"]);
					productoEntity.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
					productoEntity.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);
					if (reader["IpModificacion"] != DBNull.Value)
					{
						productoEntity.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
					}
					if (reader["UsuarioModificacion"] != DBNull.Value)
					{
						productoEntity.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
					}
					if (reader["FechaModificacion"] != DBNull.Value)
					{
						productoEntity.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
					}
					productoEntity.IdEstado = Convert.ToInt16(reader["IdEstado"]);
                    if (reader["ProductoPadre"] != DBNull.Value)
                    {
                        productoEntity.ProductoPadre = Convert.ToInt32(reader["ProductoPadre"]);
                    }
                    
                    
                    productoEntity.SetLoadedState();
                    productoEntityCollection.Add(productoEntity);
                    
                }

                return productoEntityCollection;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (reader != null) reader.Close();
                mCommand.Dispose();
            }

        }
        
        public static ProductoEntityCollection FindByAllPaged(ProductoFindParameterEntity findParameter , int pageNumber, int pageSize ,string orderBy, SqlConnection conexion, SqlTransaction  transaction )
        {
        	return FindByAllPaged(findParameter,pageNumber, pageSize,orderBy, conexion,transaction,1);
        }
        
        public static ProductoEntityCollection FindByAllPaged(ProductoFindParameterEntity findParameter , int pageNumber, int pageSize ,string orderBy, SqlConnection conexion ,SqlTransaction  transaction, int deepLoadLevel)
        {
            SqlCommand mCommand = new SqlCommand();
            SqlDataReader reader = null;
            try
            {
                mCommand.Connection = conexion;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                if (deepLoadLevel >= 1)
		     	{
                	mCommand.CommandText = "Producto_DeepFindByAllPaged";
                	
                }
                else mCommand.CommandText = "Producto_FindByAllPaged";

                
				if(findParameter.Id != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Id", findParameter.Id);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Id",DBNull.Value);
				}

				if(findParameter.IdEmpresa != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdEmpresa", findParameter.IdEmpresa);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEmpresa",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.CodigoProveedor))
				{
					mCommand.Parameters.AddWithValue("@CodigoProveedor", findParameter.CodigoProveedor );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@CodigoProveedor",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.CodigoInterno))
				{
					mCommand.Parameters.AddWithValue("@CodigoInterno", findParameter.CodigoInterno );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@CodigoInterno",DBNull.Value);
				}
                if (!String.IsNullOrEmpty(findParameter.CodigoBarra))
                {
                    mCommand.Parameters.AddWithValue("@CodigoBarra", findParameter.CodigoBarra);
                }
                else
                {
                    mCommand.Parameters.AddWithValue("@CodigoBarra", DBNull.Value);
                }
                if (!String.IsNullOrEmpty(findParameter.TipoProducto))
				{
					mCommand.Parameters.AddWithValue("@TipoProducto", findParameter.TipoProducto );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@TipoProducto",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.Producto))
				{
					mCommand.Parameters.AddWithValue("@Producto", findParameter.Producto );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Producto",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.Descripcion))
				{
					mCommand.Parameters.AddWithValue("@Descripcion", findParameter.Descripcion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Descripcion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.DescipcionBusqueda))
				{
					mCommand.Parameters.AddWithValue("@DescipcionBusqueda", findParameter.DescipcionBusqueda );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@DescipcionBusqueda",DBNull.Value);
				}
				if(findParameter.Stock != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Stock", findParameter.Stock);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Stock",DBNull.Value);
				}

				if(findParameter.StockMinimo != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@StockMinimo", findParameter.StockMinimo);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@StockMinimo",DBNull.Value);
				}

				if(findParameter.Costo != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Costo", findParameter.Costo);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Costo",DBNull.Value);
				}

				if(findParameter.UnidadMedida != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@UnidadMedida", findParameter.UnidadMedida);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UnidadMedida",DBNull.Value);
				}

				if(findParameter.Descuento != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Descuento", findParameter.Descuento);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Descuento",DBNull.Value);
				}

				if(findParameter.CobraIva != -1)
				{
					if (findParameter.CobraIva == 1)
					{
						mCommand.Parameters.AddWithValue("@CobraIva", true);
					}
					else
					{
						mCommand.Parameters.AddWithValue("@CobraIva", false);
					}
				}
				else
				{
					mCommand.Parameters.AddWithValue("@CobraIva",DBNull.Value);
				}

				if(findParameter.IdDivision != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdDivision", findParameter.IdDivision);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdDivision",DBNull.Value);
				}

				if(findParameter.IdLinea != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdLinea", findParameter.IdLinea);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdLinea",DBNull.Value);
				}

				if(findParameter.IdCategoria != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdCategoria", findParameter.IdCategoria);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdCategoria",DBNull.Value);
				}

				if(findParameter.IdMarca != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdMarca", findParameter.IdMarca);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdMarca",DBNull.Value);
				}

				if(findParameter.Peso != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Peso", findParameter.Peso);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Peso",DBNull.Value);
				}

				if(findParameter.Volumen != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Volumen", findParameter.Volumen);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Volumen",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.RegistroSanitario))
				{
					mCommand.Parameters.AddWithValue("@RegistroSanitario", findParameter.RegistroSanitario );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@RegistroSanitario",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IpIngreso))
				{
					mCommand.Parameters.AddWithValue("@IpIngreso", findParameter.IpIngreso );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpIngreso",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UsuarioIngreso))
				{
					mCommand.Parameters.AddWithValue("@UsuarioIngreso", findParameter.UsuarioIngreso );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioIngreso",DBNull.Value);
				}

				if(findParameter.FechaIngreso != null && findParameter.FechaIngreso != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaIngreso", findParameter.FechaIngreso);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaIngreso",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IpModificacion))
				{
					mCommand.Parameters.AddWithValue("@IpModificacion", findParameter.IpModificacion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpModificacion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UsuarioModificacion))
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion", findParameter.UsuarioModificacion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion",DBNull.Value);
				}

				if(findParameter.FechaModificacion != null && findParameter.FechaModificacion != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion", findParameter.FechaModificacion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion",DBNull.Value);
				}

				if(findParameter.IdEstado != short.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdEstado", findParameter.IdEstado);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEstado",DBNull.Value);
				}


				mCommand.Parameters.AddWithValue("@PageNumber",pageNumber);
				mCommand.Parameters.AddWithValue("@PageSize",pageSize);
				
				if (!string.IsNullOrEmpty(orderBy))
		     	{
					mCommand.Parameters.AddWithValue("@OrderBy",orderBy);
			    }
               	
                if (conexion.State != ConnectionState.Open) conexion.Open();
                reader = mCommand.ExecuteReader();

                ProductoEntityCollection productoEntityCollection = new ProductoEntityCollection();
                ProductoEntity productoEntity;
                

                while (reader.Read())
                {
                    productoEntity = new ProductoEntity();
					#region << Deep Load >>
                    if (deepLoadLevel > 1)
		     		{
						productoEntity.UnidadMedidaAsUnidadMedida = UnidadMedidaDataAccess.ConvertToUnidadMedidaEntity(reader, "UnidadMedida");
						productoEntity.IdDivisionAsDivision = DivisionDataAccess.ConvertToDivisionEntity(reader, "IdDivision");
						productoEntity.IdLineaAsLinea = LineaDataAccess.ConvertToLineaEntity(reader, "IdLinea");
						productoEntity.IdCategoriaAsCategoria = CategoriaDataAccess.ConvertToCategoriaEntity(reader, "IdCategoria");
						productoEntity.IdMarcaAsMarca = MarcaDataAccess.ConvertToMarcaEntity(reader, "IdMarca");

                    }
	                #endregion                    
					productoEntity.Id = Convert.ToInt32(reader["Id"]);
					productoEntity.IdEmpresa = Convert.ToInt32(reader["IdEmpresa"]);
					productoEntity.CodigoProveedor = Convert.ToString(reader["CodigoProveedor"]);
					productoEntity.CodigoInterno = Convert.ToString(reader["CodigoInterno"]);
                    productoEntity.CodigoBarra = Convert.ToString(reader["CodigoBarra"]);
                    productoEntity.TipoProducto = Convert.ToString(reader["TipoProducto"]);
					productoEntity.Producto = Convert.ToString(reader["Producto"]);
					if (reader["Descripcion"] != DBNull.Value)
					{
						productoEntity.Descripcion = Convert.ToString(reader["Descripcion"]).ToUpper();
					}
                    if (reader["PathArchivo"] != DBNull.Value)
                    {
                        productoEntity.PathArchivo = Convert.ToString(reader["PathArchivo"]);
                    }
                    productoEntity.DescipcionBusqueda = Convert.ToString(reader["DescipcionBusqueda"]);
					productoEntity.Stock = Convert.ToDecimal(reader["Stock"]);
					if (reader["StockMinimo"] != DBNull.Value)
					{
						productoEntity.StockMinimo = Convert.ToDecimal(reader["StockMinimo"]);
					}
					productoEntity.Costo = (decimal) reader["Costo"];
					if (reader["UnidadMedida"] != DBNull.Value)
					{
						productoEntity.UnidadMedida = Convert.ToInt32(reader["UnidadMedida"]);
					}
					if (reader["Descuento"] != DBNull.Value)
					{
						productoEntity.Descuento = (decimal) reader["Descuento"];
					}
					if (reader["CobraIva"] != DBNull.Value)
					{
						productoEntity.CobraIva = Convert.ToBoolean(reader["CobraIva"]);
					}
					if (reader["IdDivision"] != DBNull.Value)
					{
						productoEntity.IdDivision = Convert.ToInt32(reader["IdDivision"]);
					}
					if (reader["IdLinea"] != DBNull.Value)
					{
						productoEntity.IdLinea = Convert.ToInt32(reader["IdLinea"]);
					}
					if (reader["IdCategoria"] != DBNull.Value)
					{
						productoEntity.IdCategoria = Convert.ToInt32(reader["IdCategoria"]);
					}
					if (reader["IdMarca"] != DBNull.Value)
					{
						productoEntity.IdMarca = Convert.ToInt32(reader["IdMarca"]);
					}
					if (reader["Peso"] != DBNull.Value)
					{
						productoEntity.Peso = (decimal) reader["Peso"];
					}
					if (reader["Volumen"] != DBNull.Value)
					{
						productoEntity.Volumen = (decimal) reader["Volumen"];
					}
					if (reader["RegistroSanitario"] != DBNull.Value)
					{
						productoEntity.RegistroSanitario = Convert.ToString(reader["RegistroSanitario"]).ToUpper();
					}
					productoEntity.IpIngreso = Convert.ToString(reader["IpIngreso"]);
					productoEntity.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
					productoEntity.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);
					if (reader["IpModificacion"] != DBNull.Value)
					{
						productoEntity.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
					}
					if (reader["UsuarioModificacion"] != DBNull.Value)
					{
						productoEntity.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
					}
					if (reader["FechaModificacion"] != DBNull.Value)
					{
						productoEntity.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
					}
					productoEntity.IdEstado = Convert.ToInt16(reader["IdEstado"]);

                    
                    productoEntity.SetLoadedState();
                    productoEntityCollection.Add(productoEntity);
                    
                }

                return productoEntityCollection;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (reader != null) reader.Close();
                mCommand.Dispose();
            }

        }
        
          
    }
}

