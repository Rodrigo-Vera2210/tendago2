    
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Amonsys Software Factory.
//     Template: Speed Developer FrameWork Version 1.0 (For Windows Applications)
//     Web Site: http://www.amonsys.com/SDF
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using ER.BE; 


namespace ER.DA
{
    public partial class CuentaPorCobrarDataAccessCollection
    {


        #region << Custom Stored Procedures >>

        public static CuentaPorCobrarEntityCollection FindByIdCliente(int idEmpresa, int idCliente, SqlConnection conexion, SqlTransaction transaction, int deepLoadLevel)
        {
            SqlCommand mCommand = new SqlCommand();
            SqlDataReader reader = null;
            try
            {
                mCommand.Connection = conexion;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                mCommand.CommandText = "PR_CuentaPorCobrar_ByIdCliente";
                 
                if (idEmpresa != int.MinValue)
                {
                    mCommand.Parameters.AddWithValue("@idEmpresa", idEmpresa);
                }
                else
                {
                    mCommand.Parameters.AddWithValue("@idEmpresa", DBNull.Value);
                }
                if (idCliente != int.MinValue)
                {
                    mCommand.Parameters.AddWithValue("@idCliente", idCliente);
                }
                else
                {
                    mCommand.Parameters.AddWithValue("@idCliente", DBNull.Value);
                } 


                if (conexion.State != ConnectionState.Open) conexion.Open();
                reader = mCommand.ExecuteReader();

                CuentaPorCobrarEntityCollection cuentaPorCobrarEntityCollection = new CuentaPorCobrarEntityCollection();
                CuentaPorCobrarEntity cuentaPorCobrarEntity;


                while (reader.Read())
                {
                    cuentaPorCobrarEntity = new CuentaPorCobrarEntity();
                    #region << Deep Load >>
                    if (deepLoadLevel == 1)
                    {
                        cuentaPorCobrarEntity.IdSalidaAsSalida = SalidaDataAccess.ConvertToSalidaEntity(reader, "IdSalida");

                    }
                    #endregion
                    cuentaPorCobrarEntity.Id = Convert.ToInt32(reader["Id"]);
                    cuentaPorCobrarEntity.IdSalida = Convert.ToString(reader["IdSalida"]);
                    cuentaPorCobrarEntity.Numero = Convert.ToInt32(reader["Numero"]);
                    cuentaPorCobrarEntity.FechaVencimiento = Convert.ToDateTime(reader["FechaVencimiento"]);
                    cuentaPorCobrarEntity.Valor = (decimal)reader["Valor"];
                    if (reader["Saldo"] != DBNull.Value)
                    {
                        cuentaPorCobrarEntity.Saldo = (decimal)reader["Saldo"];
                    }
                    cuentaPorCobrarEntity.IpIngreso = Convert.ToString(reader["IpIngreso"]);
                    cuentaPorCobrarEntity.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
                    cuentaPorCobrarEntity.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);
                    if (reader["IpModificacion"] != DBNull.Value)
                    {
                        cuentaPorCobrarEntity.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
                    }
                    if (reader["UsuarioModificacion"] != DBNull.Value)
                    {
                        cuentaPorCobrarEntity.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
                    }
                    if (reader["FechaModificacion"] != DBNull.Value)
                    {
                        cuentaPorCobrarEntity.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
                    }
                    cuentaPorCobrarEntity.IdEstado = Convert.ToInt16(reader["IdEstado"]);

                    cuentaPorCobrarEntity.NumeroFactura = Convert.ToString(reader["NumeroFactura"]);


                    cuentaPorCobrarEntity.SetLoadedState();
                    cuentaPorCobrarEntityCollection.Add(cuentaPorCobrarEntity);

                }

                return cuentaPorCobrarEntityCollection;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (reader != null) reader.Close();
                mCommand.Dispose();
            }

        }



        public static DataSet ReporteSalida(string IdSalida, SqlConnection conexion, SqlTransaction transaction)
		{
			SqlCommand mCommand = new SqlCommand();
			try
			{
				SqlDataAdapter adapter = new SqlDataAdapter();

				mCommand.Connection = conexion;
				mCommand.CommandType = CommandType.StoredProcedure;
				mCommand.Transaction = transaction;
				mCommand.CommandText = "Custom_CuentaPorCobrar_ReporteSalida";

				mCommand.Parameters.AddWithValue("@IdSalida", IdSalida);
				adapter.SelectCommand = mCommand;

				DataSet result = new DataSet();
				adapter.Fill(result);
				return result;
			}
			catch (Exception exc)
			{
				throw exc;
			}
			finally
			{
				mCommand.Dispose();
			}
		}

        
        #endregion
        
        /*public static CuentaPorCobrarEntityCollection LoadAll(SqlConnection conexion, SqlTransaction  transaction)
        {
            SqlCommand mCommand = new SqlCommand();
            SqlDataReader reader = null;
            try
            {
                mCommand.Connection = conexion;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                
                mCommand.CommandText = "CuentaPorCobrar_LoadAll";


                if (conexion.State != ConnectionState.Open) conexion.Open();
                reader = mCommand.ExecuteReader();

                CuentaPorCobrarEntityCollection cuentaPorCobrarEntityCollection = new CuentaPorCobrarEntityCollection();
                CuentaPorCobrarEntity cuentaPorCobrarEntity;
                
                while (reader.Read())
                {
                    cuentaPorCobrarEntity = new CuentaPorCobrarEntity();
                    
					cuentaPorCobrarEntity.Id = Convert.ToInt32(reader["Id"]);
					cuentaPorCobrarEntity.IdSalida = Convert.ToString(reader["IdSalida"]);
					cuentaPorCobrarEntity.Numero = Convert.ToInt32(reader["Numero"]);
					cuentaPorCobrarEntity.FechaVencimiento = Convert.ToDateTime(reader["FechaVencimiento"]);
					cuentaPorCobrarEntity.Valor = (decimal) reader["Valor"];
					if (reader["Saldo"] != DBNull.Value)
					{
						cuentaPorCobrarEntity.Saldo = (decimal) reader["Saldo"];
					}
					cuentaPorCobrarEntity.IpIngreso = Convert.ToString(reader["IpIngreso"]);
					cuentaPorCobrarEntity.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
					cuentaPorCobrarEntity.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);
					if (reader["IpModificacion"] != DBNull.Value)
					{
						cuentaPorCobrarEntity.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
					}
					if (reader["UsuarioModificacion"] != DBNull.Value)
					{
						cuentaPorCobrarEntity.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
					}
					if (reader["FechaModificacion"] != DBNull.Value)
					{
						cuentaPorCobrarEntity.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
					}
					cuentaPorCobrarEntity.IdEstado = Convert.ToInt16(reader["IdEstado"]);

                    
                    cuentaPorCobrarEntity.SetLoadedState();
                    cuentaPorCobrarEntityCollection.Add(cuentaPorCobrarEntity);
                    
                }

                return cuentaPorCobrarEntityCollection;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (reader != null) reader.Close();
                mCommand.Dispose();
            }

        }
        */
     
        public static CuentaPorCobrarEntityCollection FindByAll(CuentaPorCobrarFindParameterEntity findParameter , SqlConnection conexion, SqlTransaction  transaction)
        {
        	return FindByAll(findParameter,conexion,transaction,1);
        }
        
        public static CuentaPorCobrarEntityCollection FindByAll(CuentaPorCobrarFindParameterEntity findParameter , SqlConnection conexion, SqlTransaction  transaction, int deepLoadLevel)
        {
            SqlCommand mCommand = new SqlCommand();
            SqlDataReader reader = null;
            try
            {
                mCommand.Connection = conexion;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                if (deepLoadLevel >= 1)
		     	{
                	mCommand.CommandText = "CuentaPorCobrar_DeepFindByAll";
                }
                else mCommand.CommandText = "CuentaPorCobrar_FindByAll";

                #region Parametros
                if (findParameter.Id != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Id", findParameter.Id);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Id",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IdSalida))
				{
					mCommand.Parameters.AddWithValue("@IdSalida", findParameter.IdSalida );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdSalida",DBNull.Value);
				}

				if(findParameter.Numero != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Numero", findParameter.Numero);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Numero",DBNull.Value);
				}

				if(findParameter.FechaVencimiento != null && findParameter.FechaVencimiento != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaVencimiento", findParameter.FechaVencimiento);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaVencimiento",DBNull.Value);
				}

				if(findParameter.Valor != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Valor", findParameter.Valor);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Valor",DBNull.Value);
				}

				if(findParameter.Saldo != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Saldo", findParameter.Saldo);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Saldo",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IpIngreso))
				{
					mCommand.Parameters.AddWithValue("@IpIngreso", findParameter.IpIngreso );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpIngreso",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UsuarioIngreso))
				{
					mCommand.Parameters.AddWithValue("@UsuarioIngreso", findParameter.UsuarioIngreso );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioIngreso",DBNull.Value);
				}

				if(findParameter.FechaIngreso != null && findParameter.FechaIngreso != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaIngreso", findParameter.FechaIngreso);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaIngreso",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IpModificacion))
				{
					mCommand.Parameters.AddWithValue("@IpModificacion", findParameter.IpModificacion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpModificacion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UsuarioModificacion))
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion", findParameter.UsuarioModificacion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion",DBNull.Value);
				}

				if(findParameter.FechaModificacion != null && findParameter.FechaModificacion != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion", findParameter.FechaModificacion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion",DBNull.Value);
				}

				if(findParameter.IdEstado != short.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdEstado", findParameter.IdEstado);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEstado",DBNull.Value);
				}

                #endregion

                if (conexion.State != ConnectionState.Open) conexion.Open();
                reader = mCommand.ExecuteReader();

                CuentaPorCobrarEntityCollection cuentaPorCobrarEntityCollection = new CuentaPorCobrarEntityCollection();
                CuentaPorCobrarEntity cuentaPorCobrarEntity;
                

                while (reader.Read())
                {
                    cuentaPorCobrarEntity = new CuentaPorCobrarEntity();
					#region << Deep Load >>
                    if (deepLoadLevel == 1)
		     		{
						cuentaPorCobrarEntity.IdSalidaAsSalida = SalidaDataAccess.ConvertToSalidaEntity(reader, "IdSalida");

                    }
	                #endregion                    
					cuentaPorCobrarEntity.Id = Convert.ToInt32(reader["Id"]);
					cuentaPorCobrarEntity.IdSalida = Convert.ToString(reader["IdSalida"]);
					cuentaPorCobrarEntity.Numero = Convert.ToInt32(reader["Numero"]);
					cuentaPorCobrarEntity.FechaVencimiento = Convert.ToDateTime(reader["FechaVencimiento"]);
					cuentaPorCobrarEntity.Valor = (decimal) reader["Valor"];
					if (reader["Saldo"] != DBNull.Value)
					{
						cuentaPorCobrarEntity.Saldo = (decimal) reader["Saldo"];
					}
					cuentaPorCobrarEntity.IpIngreso = Convert.ToString(reader["IpIngreso"]);
					cuentaPorCobrarEntity.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
					cuentaPorCobrarEntity.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);
					if (reader["IpModificacion"] != DBNull.Value)
					{
						cuentaPorCobrarEntity.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
					}
					if (reader["UsuarioModificacion"] != DBNull.Value)
					{
						cuentaPorCobrarEntity.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
					}
					if (reader["FechaModificacion"] != DBNull.Value)
					{
						cuentaPorCobrarEntity.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
					}
					cuentaPorCobrarEntity.IdEstado = Convert.ToInt16(reader["IdEstado"]);

                    
                    cuentaPorCobrarEntity.SetLoadedState();
                    cuentaPorCobrarEntityCollection.Add(cuentaPorCobrarEntity);
                    
                }

                return cuentaPorCobrarEntityCollection;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (reader != null) reader.Close();
                mCommand.Dispose();
            }

        }
        
        public static CuentaPorCobrarEntityCollection FindByAllPaged(CuentaPorCobrarFindParameterEntity findParameter , int pageNumber, int pageSize ,string orderBy, SqlConnection conexion, SqlTransaction  transaction )
        {
        	return FindByAllPaged(findParameter,pageNumber, pageSize,orderBy, conexion,transaction,1);
        }
        
        public static CuentaPorCobrarEntityCollection FindByAllPaged(CuentaPorCobrarFindParameterEntity findParameter , int pageNumber, int pageSize ,string orderBy, SqlConnection conexion ,SqlTransaction  transaction, int deepLoadLevel)
        {
            SqlCommand mCommand = new SqlCommand();
            SqlDataReader reader = null;
            try
            {
                mCommand.Connection = conexion;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                if (deepLoadLevel >= 1)
		     	{
                	mCommand.CommandText = "CuentaPorCobrar_DeepFindByAllPaged";
                	
                }
                else mCommand.CommandText = "CuentaPorCobrar_FindByAllPaged";

                
				if(findParameter.Id != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Id", findParameter.Id);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Id",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IdSalida))
				{
					mCommand.Parameters.AddWithValue("@IdSalida", findParameter.IdSalida );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdSalida",DBNull.Value);
				}

				if(findParameter.Numero != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Numero", findParameter.Numero);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Numero",DBNull.Value);
				}

				if(findParameter.FechaVencimiento != null && findParameter.FechaVencimiento != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaVencimiento", findParameter.FechaVencimiento);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaVencimiento",DBNull.Value);
				}

				if(findParameter.Valor != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Valor", findParameter.Valor);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Valor",DBNull.Value);
				}

				if(findParameter.Saldo != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Saldo", findParameter.Saldo);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Saldo",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IpIngreso))
				{
					mCommand.Parameters.AddWithValue("@IpIngreso", findParameter.IpIngreso );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpIngreso",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UsuarioIngreso))
				{
					mCommand.Parameters.AddWithValue("@UsuarioIngreso", findParameter.UsuarioIngreso );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioIngreso",DBNull.Value);
				}

				if(findParameter.FechaIngreso != null && findParameter.FechaIngreso != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaIngreso", findParameter.FechaIngreso);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaIngreso",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IpModificacion))
				{
					mCommand.Parameters.AddWithValue("@IpModificacion", findParameter.IpModificacion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpModificacion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UsuarioModificacion))
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion", findParameter.UsuarioModificacion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion",DBNull.Value);
				}

				if(findParameter.FechaModificacion != null && findParameter.FechaModificacion != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion", findParameter.FechaModificacion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion",DBNull.Value);
				}

				if(findParameter.IdEstado != short.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdEstado", findParameter.IdEstado);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEstado",DBNull.Value);
				}


				mCommand.Parameters.AddWithValue("@PageNumber",pageNumber);
				mCommand.Parameters.AddWithValue("@PageSize",pageSize);
				if (deepLoadLevel > 1)
		     	{
					mCommand.Parameters.AddWithValue("@OrderBy",orderBy);
			    }
               	
                if (conexion.State != ConnectionState.Open) conexion.Open();
                reader = mCommand.ExecuteReader();

                CuentaPorCobrarEntityCollection cuentaPorCobrarEntityCollection = new CuentaPorCobrarEntityCollection();
                CuentaPorCobrarEntity cuentaPorCobrarEntity;
                

                while (reader.Read())
                {
                    cuentaPorCobrarEntity = new CuentaPorCobrarEntity();
					#region << Deep Load >>
                    if (deepLoadLevel > 1)
		     		{
						cuentaPorCobrarEntity.IdSalidaAsSalida = SalidaDataAccess.ConvertToSalidaEntity(reader, "IdSalida");

                    }
	                #endregion                    
					cuentaPorCobrarEntity.Id = Convert.ToInt32(reader["Id"]);
					cuentaPorCobrarEntity.IdSalida = Convert.ToString(reader["IdSalida"]);
					cuentaPorCobrarEntity.Numero = Convert.ToInt32(reader["Numero"]);
					cuentaPorCobrarEntity.FechaVencimiento = Convert.ToDateTime(reader["FechaVencimiento"]);
					cuentaPorCobrarEntity.Valor = (decimal) reader["Valor"];
					if (reader["Saldo"] != DBNull.Value)
					{
						cuentaPorCobrarEntity.Saldo = (decimal) reader["Saldo"];
					}
					cuentaPorCobrarEntity.IpIngreso = Convert.ToString(reader["IpIngreso"]);
					cuentaPorCobrarEntity.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
					cuentaPorCobrarEntity.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);
					if (reader["IpModificacion"] != DBNull.Value)
					{
						cuentaPorCobrarEntity.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
					}
					if (reader["UsuarioModificacion"] != DBNull.Value)
					{
						cuentaPorCobrarEntity.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
					}
					if (reader["FechaModificacion"] != DBNull.Value)
					{
						cuentaPorCobrarEntity.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
					}
					cuentaPorCobrarEntity.IdEstado = Convert.ToInt16(reader["IdEstado"]);

                    
                    cuentaPorCobrarEntity.SetLoadedState();
                    cuentaPorCobrarEntityCollection.Add(cuentaPorCobrarEntity);
                    
                }

                return cuentaPorCobrarEntityCollection;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (reader != null) reader.Close();
                mCommand.Dispose();
            }

        }
		
	}
}

