    
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Amonsys Software Factory.
//     Template: Speed Developer FrameWork Version 1.0 (For Windows Applications)
//     Web Site: http://www.amonsys.com/SDF
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using ER.BE; 



namespace ER.DA
{
    public partial class DetalleDocumentoDataAccess
    {
    
   
        #region << Default Methods >>

        /// <summary>
        /// Create a new entity type of DetalleDocumento
        /// </summary>
        public static DetalleDocumentoEntity Insert(DetalleDocumentoEntity detalleDocumento, SqlConnection connection, SqlTransaction transaction)
        {
            SqlCommand mCommand = new SqlCommand();
            try
            {
                mCommand.Connection = connection;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                mCommand.CommandText =  "DetalleDocumento_Insert";

                #region << Add the params >>
                 
				mCommand.Parameters.AddWithValue("@IdDocumento", detalleDocumento.IdDocumento);
				mCommand.Parameters.AddWithValue("@IdProducto", detalleDocumento.IdProducto);
				mCommand.Parameters.AddWithValue("@Precio", detalleDocumento.Precio);
				mCommand.Parameters.AddWithValue("@Cantidad", detalleDocumento.Cantidad);
				mCommand.Parameters.AddWithValue("@Descuento", detalleDocumento.Descuento);
				mCommand.Parameters.AddWithValue("@TipoIva", detalleDocumento.TipoIva);
				mCommand.Parameters.AddWithValue("@TipoIce", detalleDocumento.TipoIce);
				mCommand.Parameters.AddWithValue("@Iva", detalleDocumento.Iva);
				mCommand.Parameters.AddWithValue("@Ice", detalleDocumento.Ice);
				mCommand.Parameters.AddWithValue("@IpIngreso", detalleDocumento.IpIngreso.ToUpper());
				mCommand.Parameters.AddWithValue("@UsuarioIngreso", detalleDocumento.UsuarioIngreso.ToUpper());
				mCommand.Parameters.AddWithValue("@FechaIngreso", detalleDocumento.FechaIngreso);
				if(!String.IsNullOrEmpty(detalleDocumento.IpModificacion))
				{
					mCommand.Parameters.AddWithValue("@IpModificacion", detalleDocumento.IpModificacion.ToUpper());
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpModificacion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(detalleDocumento.UsuarioModificacion))
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion", detalleDocumento.UsuarioModificacion.ToUpper());
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion",DBNull.Value);
				}

				if(detalleDocumento.FechaModificacion != null && detalleDocumento.FechaModificacion != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion", detalleDocumento.FechaModificacion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion",DBNull.Value);
				}

				mCommand.Parameters.AddWithValue("@IdEstado", detalleDocumento.IdEstado);

				// Add the primary keys columns
				mCommand.Parameters.Add("@Id", SqlDbType.BigInt);
				mCommand.Parameters["@Id"].Direction = ParameterDirection.Output;


                #endregion
                
                // Insert DetalleDocumento
                if (connection.State != ConnectionState.Open) connection.Open();
                mCommand.ExecuteNonQuery();

				detalleDocumento.Id = Convert.ToInt64(mCommand.Parameters["@Id"].Value);


                return detalleDocumento;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                mCommand.Dispose();
            }
        }

        /// <summary>
        /// Update a entity
        /// </summary>
        public static void Update(DetalleDocumentoEntity detalleDocumento, SqlConnection connection, SqlTransaction  transaction)
        {
            SqlCommand mCommand = new SqlCommand();
            try
            {
                mCommand.Connection = connection;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;;
                mCommand.CommandText = "DetalleDocumento_Update";

                 #region << Add the params >>

				mCommand.Parameters.AddWithValue("@Id", detalleDocumento.Id);
				mCommand.Parameters.AddWithValue("@IdDocumento", detalleDocumento.IdDocumento);
				mCommand.Parameters.AddWithValue("@IdProducto", detalleDocumento.IdProducto);
				mCommand.Parameters.AddWithValue("@IdTipoUnidad", detalleDocumento.IdTipoUnidad);
				mCommand.Parameters.AddWithValue("@Precio", detalleDocumento.Precio);
				mCommand.Parameters.AddWithValue("@Cantidad", detalleDocumento.Cantidad);
				mCommand.Parameters.AddWithValue("@Descuento", detalleDocumento.Descuento);
				if(detalleDocumento.SubtotalSinImpuesto != 0)
				{
					mCommand.Parameters.AddWithValue("@SubtotalSinImpuesto", detalleDocumento.SubtotalSinImpuesto);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@SubtotalSinImpuesto",DBNull.Value);
				}

				mCommand.Parameters.AddWithValue("@TipoIva", detalleDocumento.TipoIva);
				mCommand.Parameters.AddWithValue("@TipoIce", detalleDocumento.TipoIce);
				mCommand.Parameters.AddWithValue("@Iva", detalleDocumento.Iva);
				mCommand.Parameters.AddWithValue("@Ice", detalleDocumento.Ice);
				mCommand.Parameters.AddWithValue("@IpIngreso", detalleDocumento.IpIngreso);
				mCommand.Parameters.AddWithValue("@UsuarioIngreso", detalleDocumento.UsuarioIngreso);
				mCommand.Parameters.AddWithValue("@FechaIngreso", detalleDocumento.FechaIngreso);
				if(!String.IsNullOrEmpty(detalleDocumento.IpModificacion))
				{
					mCommand.Parameters.AddWithValue("@IpModificacion", detalleDocumento.IpModificacion.ToUpper());
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpModificacion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(detalleDocumento.UsuarioModificacion))
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion", detalleDocumento.UsuarioModificacion.ToUpper());
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion",DBNull.Value);
				}

				if(detalleDocumento.FechaModificacion != null && detalleDocumento.FechaModificacion != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion", detalleDocumento.FechaModificacion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("FechaModificacion",DBNull.Value);
				}

				mCommand.Parameters.AddWithValue("@IdEstado", detalleDocumento.IdEstado);
                
   
                #endregion
                
                // Update detalleDocumento
                if (connection.State != ConnectionState.Open) connection.Open();
                mCommand.ExecuteNonQuery();


            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                mCommand.Dispose();
            }
        }

         /// <summary>
        /// Delete a entity
        /// </summary>
        public static void Delete(DetalleDocumentoEntity detalleDocumento, SqlConnection connection, SqlTransaction  transaction)
        {
            SqlCommand mCommand = new SqlCommand();
            try
            {
                mCommand.Connection = connection;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;;
                mCommand.CommandText = "DetalleDocumento_Delete";
				mCommand.Parameters.AddWithValue("@Id", detalleDocumento.Id);
				mCommand.Parameters.AddWithValue("@Fecha_Modificacion", detalleDocumento.FechaModificacion);
				mCommand.Parameters.AddWithValue("@Usuario_Modificacion", detalleDocumento.UsuarioModificacion.ToUpper());
				mCommand.Parameters.AddWithValue("@Ip_Modificacion", detalleDocumento.IpModificacion.ToUpper());

                
                // Update detalleDocumento
                if (connection.State != ConnectionState.Open) connection.Open();
                mCommand.ExecuteNonQuery();


            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                mCommand.Dispose();
            }
        }
        
        
         
         
         /// <summary>
        /// Load a entity by your Primary Key
        /// </summary>
        public static DetalleDocumentoEntity LoadByPK(long Id, SqlConnection connection, SqlTransaction  transaction)
        {
        	return LoadByPK(Id,connection,transaction,1);
        }
        
        /// <summary>
        /// Load a entity by your Primary Key
        /// </summary>
        public static DetalleDocumentoEntity LoadByPK(long Id, SqlConnection connection, SqlTransaction  transaction, int deepLoadLevel)
        {
            DetalleDocumentoEntity detalleDocumento = new DetalleDocumentoEntity();
            
			detalleDocumento.Id = Id;
            
            
            SqlCommand mCommand = new SqlCommand();
            SqlDataReader reader = null;
            try
            {
                mCommand.Connection = connection;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                mCommand.CommandText = "DetalleDocumento_LoadByPK";

                #region << Add the params >>

				mCommand.Parameters.AddWithValue("@Id", detalleDocumento.Id);
                
 
                #endregion 
                
                if (connection.State != ConnectionState.Open) connection.Open();

                reader = mCommand.ExecuteReader();

                if(!reader.HasRows) return null;
                
	            while (reader.Read())
	            {
					#region << Deep Load >>
                    if (deepLoadLevel == 1)
		     		{
						detalleDocumento.IdDocumentoAsDocumento = DocumentoDataAccess.ConvertToDocumentoEntity(reader, "IdDocumento");
						detalleDocumento.IdProductoAsProducto = ProductoDataAccess.ConvertToProductoEntity(reader, "IdProducto");

                    }
	                #endregion
	                
	                #region << Load the BusinessEntity Object >>
					
					detalleDocumento.Id = Convert.ToInt64(reader["Id"]);
					detalleDocumento.IdDocumento = Convert.ToString(reader["IdDocumento"]);
					detalleDocumento.IdProducto = Convert.ToInt32(reader["IdProducto"]);
					detalleDocumento.IdTipoUnidad = Convert.ToInt32(reader["IdTipoUnidad"]);
					detalleDocumento.Precio = (decimal) reader["Precio"];
					detalleDocumento.Cantidad = (decimal) reader["Cantidad"];
					detalleDocumento.Descuento = (decimal) reader["Descuento"];
					if (reader["SubtotalSinImpuesto"] != DBNull.Value)
					{
						detalleDocumento.SubtotalSinImpuesto = (decimal) reader["SubtotalSinImpuesto"];
					}
					detalleDocumento.TipoIva = Convert.ToString(reader["TipoIva"]);
					detalleDocumento.TipoIce = Convert.ToString(reader["TipoIce"]);
					detalleDocumento.Iva = (decimal) reader["Iva"];
					detalleDocumento.Ice = (decimal) reader["Ice"];
					detalleDocumento.IpIngreso = Convert.ToString(reader["IpIngreso"]);
					detalleDocumento.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
					detalleDocumento.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);
					if (reader["IpModificacion"] != DBNull.Value)
					{
						detalleDocumento.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
					}
					if (reader["UsuarioModificacion"] != DBNull.Value)
					{
						detalleDocumento.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
					}
					if (reader["FechaModificacion"] != DBNull.Value)
					{
						detalleDocumento.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
					}
					detalleDocumento.IdEstado = Convert.ToInt16(reader["IdEstado"]);

	                #endregion
	            }

                detalleDocumento.SetLoadedState();
                return detalleDocumento;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (reader != null) reader.Close();
                mCommand.Dispose();
            }
        }
        
        #endregion
        
        
        
        
        #region << Mappers >>
        
        public static DetalleDocumentoEntity ConvertToDetalleDocumentoEntity (SqlDataReader reader,string fkColumnName)
        {
            DetalleDocumentoEntity detalleDocumento = new DetalleDocumentoEntity();
            
            try
            {
                bool hasData=false;
                string columName;
                
                #region << Load the BusinessEntity Object >>
                
				try
				{
					columName = String.Format("Id_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.Id = Convert.ToInt64(reader[columName]);
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("IdDocumento_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.IdDocumento = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("IdProducto_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.IdProducto = Convert.ToInt32(reader[columName]);
						hasData = true;
					}
				}
				catch{ }
				try
				{
					columName = String.Format("IdTipoUnidad_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.IdTipoUnidad = Convert.ToInt32(reader[columName]);
						hasData = true;
					}
				}
				catch { }
				try
				{
					columName = String.Format("Precio_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.Precio = (decimal) reader[columName];
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("Cantidad_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.Cantidad = (decimal) reader[columName];
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("Descuento_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.Descuento = (decimal) reader[columName];
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("SubtotalSinImpuesto_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.SubtotalSinImpuesto = (decimal) reader[columName];
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("TipoIva_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.TipoIva = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("TipoIce_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.TipoIce = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("Iva_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.Iva = (decimal) reader[columName];
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("Ice_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.Ice = (decimal) reader[columName];
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("IpIngreso_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.IpIngreso = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("UsuarioIngreso_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.UsuarioIngreso = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("FechaIngreso_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.FechaIngreso = Convert.ToDateTime(reader[columName]);
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("IpModificacion_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.IpModificacion = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("UsuarioModificacion_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.UsuarioModificacion = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("FechaModificacion_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.FechaModificacion = Convert.ToDateTime(reader[columName]);
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("IdEstado_DetalleDocumentoFrom{0}", fkColumnName);
					if (reader[columName] != DBNull.Value)
					{
						detalleDocumento.IdEstado = Convert.ToInt16(reader[columName]);
						hasData = true;
					}
				}
				catch{}

                
                #endregion
                
                detalleDocumento.SetLoadedState();
                if(hasData)
                {
                	return detalleDocumento;
                }
                else return null;
            }
            catch (Exception exc)
            {
                return null;
            }
            finally
            {
                
            }
        }
        
        #endregion
        
   
    }
}


