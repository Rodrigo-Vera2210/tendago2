    
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Amonsys Software Factory.
//     Template: Speed Developer FrameWork Version 1.0 (For Windows Applications)
//     Web Site: http://www.amonsys.com/SDF
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using ER.BE; 


namespace ER.DA
{
    public partial class DocumentoDataAccessCollection
    {


		#region << Custom Stored Procedures >>


		#endregion

		/*public static DocumentoEntityCollection LoadAll(SqlConnection conexion, SqlTransaction  transaction)
        {
            SqlCommand mCommand = new SqlCommand();
            SqlDataReader reader = null;
            try
            {
                mCommand.Connection = conexion;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                
                mCommand.CommandText = "Documento_LoadAll";


                if (conexion.State != ConnectionState.Open) conexion.Open();
                reader = mCommand.ExecuteReader();

                DocumentoEntityCollection documentoEntityCollection = new DocumentoEntityCollection();
                DocumentoEntity documentoEntity;
                
                while (reader.Read())
                {
                    documentoEntity = new DocumentoEntity();
                    
					documentoEntity.Id = Convert.ToString(reader["Id"]);
					documentoEntity.IdTipoDocumento = Convert.ToString(reader["IdTipoDocumento"]);
					documentoEntity.IdEmpresa = Convert.ToInt32(reader["IdEmpresa"]);
					documentoEntity.RUC = Convert.ToString(reader["RUC"]).ToUpper();
					documentoEntity.Establecimiento = Convert.ToString(reader["Establecimiento"]).ToUpper();
					documentoEntity.PuntoEmision = Convert.ToString(reader["PuntoEmision"]).ToUpper();

					if (reader["IdSalida"] != DBNull.Value)
					{
						documentoEntity.IdSalida = Convert.ToString(reader["IdSalida"]).ToUpper();
					}
					documentoEntity.IdEntidad = Convert.ToInt32(reader["IdEntidad"]);
					documentoEntity.IdMoneda = Convert.ToInt16(reader["IdMoneda"]);
					if (reader["Notas"] != DBNull.Value)
					{
						documentoEntity.Notas = Convert.ToString(reader["Notas"]).ToUpper();
					}
					if (reader["GuiaRemision"] != DBNull.Value)
					{
						documentoEntity.GuiaRemision = Convert.ToString(reader["GuiaRemision"]).ToUpper();
					}
					if (reader["NumeroDocumento"] != DBNull.Value)
					{
						documentoEntity.NumeroDocumento = Convert.ToString(reader["NumeroDocumento"]).ToUpper();
					}
					documentoEntity.Base0 = (decimal) reader["Base0"];
					documentoEntity.BaseIva = (decimal) reader["BaseIva"];
					documentoEntity.TotalDescuento = (decimal) reader["TotalDescuento"];
					if (reader["TotalSinImpuesto"] != DBNull.Value)
					{
						documentoEntity.TotalSinImpuesto = (decimal) reader["TotalSinImpuesto"];
					}
					documentoEntity.TotalIce = (decimal) reader["TotalIce"];
					documentoEntity.TotalIva = (decimal) reader["TotalIva"];
					if (reader["Total"] != DBNull.Value)
					{
						documentoEntity.Total = (decimal) reader["Total"];
					}
					documentoEntity.FormaPago = Convert.ToString(reader["FormaPago"]);
					documentoEntity.Plazo = Convert.ToInt32(reader["Plazo"]);
					documentoEntity.UnidadTiempo = Convert.ToString(reader["UnidadTiempo"]);
					documentoEntity.IpIngreso = Convert.ToString(reader["IpIngreso"]);
					documentoEntity.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
					documentoEntity.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);
					if (reader["IpModificacion"] != DBNull.Value)
					{
						documentoEntity.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
					}
					if (reader["UsuarioModificacion"] != DBNull.Value)
					{
						documentoEntity.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
					}
					if (reader["FechaModificacion"] != DBNull.Value)
					{
						documentoEntity.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
					}
					documentoEntity.IdEstado = Convert.ToInt16(reader["IdEstado"]);

                    
                    documentoEntity.SetLoadedState();
                    documentoEntityCollection.Add(documentoEntity);
                    
                }

                return documentoEntityCollection;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (reader != null) reader.Close();
                mCommand.Dispose();
            }

        }
        */

		public static DocumentoEntityCollection FindByAll(DocumentoFindParameterEntity findParameter , SqlConnection conexion, SqlTransaction  transaction)
        {
        	return FindByAll(findParameter,conexion,transaction,1);
        }
        
        public static DocumentoEntityCollection FindByAll(DocumentoFindParameterEntity findParameter , SqlConnection conexion, SqlTransaction  transaction, int deepLoadLevel)
        {
            SqlCommand mCommand = new SqlCommand();
            SqlDataReader reader = null;
            try
            {
                mCommand.Connection = conexion;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                if (deepLoadLevel >= 1)
		     	{
                	mCommand.CommandText = "Documento_DeepFindByAll";
                }
                else mCommand.CommandText = "Documento_FindByAll";

                
				if(!String.IsNullOrEmpty(findParameter.Id))
				{
					mCommand.Parameters.AddWithValue("@Id", findParameter.Id );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Id",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IdTipoDocumento))
				{
					mCommand.Parameters.AddWithValue("@IdTipoDocumento", findParameter.IdTipoDocumento );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdTipoDocumento",DBNull.Value);
				}

				if (!String.IsNullOrEmpty(findParameter.RUC))
				{
					mCommand.Parameters.AddWithValue("@RUC", findParameter.RUC);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@RUC", DBNull.Value);
				}

				if (!String.IsNullOrEmpty(findParameter.Establecimiento))
				{
					mCommand.Parameters.AddWithValue("@Establecimiento", findParameter.Establecimiento);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Establecimiento", DBNull.Value);
				}

				if (!String.IsNullOrEmpty(findParameter.PuntoEmision))
				{
					mCommand.Parameters.AddWithValue("@PuntoEmision", findParameter.PuntoEmision);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@PuntoEmision", DBNull.Value);
				}

				if (findParameter.IdEmpresa != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdEmpresa", findParameter.IdEmpresa);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEmpresa",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IdSalida))
				{
					mCommand.Parameters.AddWithValue("@IdSalida", findParameter.IdSalida );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdSalida",DBNull.Value);
				}

				if(findParameter.IdEntidad != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdEntidad", findParameter.IdEntidad);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEntidad",DBNull.Value);
				}

				if(findParameter.IdMoneda != short.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdMoneda", findParameter.IdMoneda);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdMoneda",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.Notas))
				{
					mCommand.Parameters.AddWithValue("@Notas", findParameter.Notas );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Notas",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.GuiaRemision))
				{
					mCommand.Parameters.AddWithValue("@GuiaRemision", findParameter.GuiaRemision );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@GuiaRemision",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.NumeroDocumento))
				{
					mCommand.Parameters.AddWithValue("@NumeroDocumento", findParameter.NumeroDocumento );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@NumeroDocumento",DBNull.Value);
				}

				if(findParameter.Base0 != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Base0", findParameter.Base0);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Base0",DBNull.Value);
				}

				if(findParameter.BaseIva != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@BaseIva", findParameter.BaseIva);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@BaseIva",DBNull.Value);
				}

				if(findParameter.TotalDescuento != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@TotalDescuento", findParameter.TotalDescuento);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@TotalDescuento",DBNull.Value);
				}

				if(findParameter.TotalSinImpuesto != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@TotalSinImpuesto", findParameter.TotalSinImpuesto);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@TotalSinImpuesto",DBNull.Value);
				}

				if(findParameter.TotalIce != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@TotalIce", findParameter.TotalIce);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@TotalIce",DBNull.Value);
				}

				if(findParameter.TotalIva != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@TotalIva", findParameter.TotalIva);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@TotalIva",DBNull.Value);
				}

				if(findParameter.Total != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Total", findParameter.Total);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Total",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.FormaPago))
				{
					mCommand.Parameters.AddWithValue("@FormaPago", findParameter.FormaPago );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FormaPago",DBNull.Value);
				}

				if(findParameter.Plazo != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Plazo", findParameter.Plazo);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Plazo",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UnidadTiempo))
				{
					mCommand.Parameters.AddWithValue("@UnidadTiempo", findParameter.UnidadTiempo );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UnidadTiempo",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IpIngreso))
				{
					mCommand.Parameters.AddWithValue("@IpIngreso", findParameter.IpIngreso );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpIngreso",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UsuarioIngreso))
				{
					mCommand.Parameters.AddWithValue("@UsuarioIngreso", findParameter.UsuarioIngreso );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioIngreso",DBNull.Value);
				}

				if (findParameter.Fecha != null && findParameter.Fecha != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Fecha", findParameter.Fecha);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Fecha", DBNull.Value);
				}


				if (findParameter.FechaIngreso != null && findParameter.FechaIngreso != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaIngreso", findParameter.FechaIngreso);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaIngreso",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IpModificacion))
				{
					mCommand.Parameters.AddWithValue("@IpModificacion", findParameter.IpModificacion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpModificacion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UsuarioModificacion))
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion", findParameter.UsuarioModificacion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion",DBNull.Value);
				}

				if(findParameter.FechaModificacion != null && findParameter.FechaModificacion != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion", findParameter.FechaModificacion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion",DBNull.Value);
				}

				if(findParameter.IdEstado != short.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdEstado", findParameter.IdEstado);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEstado",DBNull.Value);
				}
				 
               	
                if (conexion.State != ConnectionState.Open) conexion.Open();
                reader = mCommand.ExecuteReader();

                DocumentoEntityCollection documentoEntityCollection = new DocumentoEntityCollection();
                DocumentoEntity documentoEntity;
                

                while (reader.Read())
                {
                    documentoEntity = new DocumentoEntity();
					#region << Deep Load >>
                    if (deepLoadLevel == 1)
		     		{
						documentoEntity.IdTipoDocumentoAsTipoDocumento = TipoDocumentoDataAccess.ConvertToTipoDocumentoEntity(reader, "IdTipoDocumento");
						documentoEntity.IdEntidadAsEntidad = EntidadDataAccess.ConvertToEntidadEntity(reader, "IdEntidad");
						documentoEntity.IdMonedaAsMoneda = MonedaDataAccess.ConvertToMonedaEntity(reader, "IdMoneda");

                    }
	                #endregion                    
					documentoEntity.Id = Convert.ToString(reader["Id"]);
					documentoEntity.IdTipoDocumento = Convert.ToString(reader["IdTipoDocumento"]);
					documentoEntity.IdEmpresa = Convert.ToInt32(reader["IdEmpresa"]);
					documentoEntity.RUC = Convert.ToString(reader["RUC"]).ToUpper();
					documentoEntity.Establecimiento = Convert.ToString(reader["Establecimiento"]).ToUpper();
					documentoEntity.PuntoEmision = Convert.ToString(reader["PuntoEmision"]).ToUpper();
					documentoEntity.Fecha = Convert.ToDateTime(reader["Fecha"]);

					if (reader["IdSalida"] != DBNull.Value)
					{
						documentoEntity.IdSalida = Convert.ToString(reader["IdSalida"]).ToUpper();
					}
					documentoEntity.IdEntidad = Convert.ToInt32(reader["IdEntidad"]);
					documentoEntity.IdMoneda = Convert.ToInt16(reader["IdMoneda"]);
					if (reader["Notas"] != DBNull.Value)
					{
						documentoEntity.Notas = Convert.ToString(reader["Notas"]).ToUpper();
					}
					if (reader["GuiaRemision"] != DBNull.Value)
					{
						documentoEntity.GuiaRemision = Convert.ToString(reader["GuiaRemision"]).ToUpper();
					}
					if (reader["NumeroDocumento"] != DBNull.Value)
					{
						documentoEntity.NumeroDocumento = Convert.ToString(reader["NumeroDocumento"]).ToUpper();
					}
					documentoEntity.Base0 = (decimal) reader["Base0"];
					documentoEntity.BaseIva = (decimal) reader["BaseIva"];
					documentoEntity.TotalDescuento = (decimal) reader["TotalDescuento"];
					if (reader["TotalSinImpuesto"] != DBNull.Value)
					{
						documentoEntity.TotalSinImpuesto = (decimal) reader["TotalSinImpuesto"];
					}
					documentoEntity.TotalIce = (decimal) reader["TotalIce"];
					documentoEntity.TotalIva = (decimal) reader["TotalIva"];
					if (reader["Total"] != DBNull.Value)
					{
						documentoEntity.Total = (decimal) reader["Total"];
					}
					documentoEntity.FormaPago = Convert.ToString(reader["FormaPago"]);
					documentoEntity.Plazo = Convert.ToInt32(reader["Plazo"]);
					documentoEntity.UnidadTiempo = Convert.ToString(reader["UnidadTiempo"]);
					documentoEntity.IpIngreso = Convert.ToString(reader["IpIngreso"]);
					documentoEntity.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
					documentoEntity.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);
					
					if (reader["IpModificacion"] != DBNull.Value)
					{
						documentoEntity.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
					}
					if (reader["UsuarioModificacion"] != DBNull.Value)
					{
						documentoEntity.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
					}
					if (reader["FechaModificacion"] != DBNull.Value)
					{
						documentoEntity.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
					}
					documentoEntity.IdEstado = Convert.ToInt16(reader["IdEstado"]);


					if (reader["RUC"] != DBNull.Value)
					{
						documentoEntity.RUC = Convert.ToString(reader["RUC"]);
					}
					if (reader["Establecimiento"] != DBNull.Value)
					{
						documentoEntity.Establecimiento = Convert.ToString(reader["Establecimiento"]);
					}
					if (reader["PuntoEmision"] != DBNull.Value)
					{
						documentoEntity.PuntoEmision = Convert.ToString(reader["PuntoEmision"]);
					}
					documentoEntity.SetLoadedState();
                    documentoEntityCollection.Add(documentoEntity);
                    
                }

                return documentoEntityCollection;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (reader != null) reader.Close();
                mCommand.Dispose();
            }

        }
        
        public static DocumentoEntityCollection FindByAllPaged(DocumentoFindParameterEntity findParameter , int pageNumber, int pageSize ,string orderBy, SqlConnection conexion, SqlTransaction  transaction )
        {
        	return FindByAllPaged(findParameter,pageNumber, pageSize,orderBy, conexion,transaction,1);
        }
        
        public static DocumentoEntityCollection FindByAllPaged(DocumentoFindParameterEntity findParameter , int pageNumber, int pageSize ,string orderBy, SqlConnection conexion ,SqlTransaction  transaction, int deepLoadLevel)
        {
            SqlCommand mCommand = new SqlCommand();
            SqlDataReader reader = null;
            try
            {
                mCommand.Connection = conexion;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                if (deepLoadLevel >= 1)
		     	{
                	mCommand.CommandText = "Documento_DeepFindByAllPaged";
                	
                }
                else mCommand.CommandText = "Documento_FindByAllPaged";

                
				if(!String.IsNullOrEmpty(findParameter.Id))
				{
					mCommand.Parameters.AddWithValue("@Id", findParameter.Id );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Id",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IdTipoDocumento))
				{
					mCommand.Parameters.AddWithValue("@IdTipoDocumento", findParameter.IdTipoDocumento );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdTipoDocumento",DBNull.Value);
				}

				if (!String.IsNullOrEmpty(findParameter.RUC))
				{
					mCommand.Parameters.AddWithValue("@RUC", findParameter.RUC);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@RUC", DBNull.Value);
				}

				if (!String.IsNullOrEmpty(findParameter.Establecimiento))
				{
					mCommand.Parameters.AddWithValue("@Establecimiento", findParameter.Establecimiento);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Establecimiento", DBNull.Value);
				}

				if (!String.IsNullOrEmpty(findParameter.PuntoEmision))
				{
					mCommand.Parameters.AddWithValue("@PuntoEmision", findParameter.PuntoEmision);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@PuntoEmision", DBNull.Value);
				}

				if (findParameter.IdEmpresa != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdEmpresa", findParameter.IdEmpresa);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEmpresa",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IdSalida))
				{
					mCommand.Parameters.AddWithValue("@IdSalida", findParameter.IdSalida );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdSalida",DBNull.Value);
				}

				if(findParameter.IdEntidad != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdEntidad", findParameter.IdEntidad);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEntidad",DBNull.Value);
				}

				if(findParameter.IdMoneda != short.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdMoneda", findParameter.IdMoneda);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdMoneda",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.Notas))
				{
					mCommand.Parameters.AddWithValue("@Notas", findParameter.Notas );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Notas",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.GuiaRemision))
				{
					mCommand.Parameters.AddWithValue("@GuiaRemision", findParameter.GuiaRemision );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@GuiaRemision",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.NumeroDocumento))
				{
					mCommand.Parameters.AddWithValue("@NumeroDocumento", findParameter.NumeroDocumento );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@NumeroDocumento",DBNull.Value);
				}

				if(findParameter.Base0 != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Base0", findParameter.Base0);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Base0",DBNull.Value);
				}

				if(findParameter.BaseIva != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@BaseIva", findParameter.BaseIva);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@BaseIva",DBNull.Value);
				}

				if(findParameter.TotalDescuento != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@TotalDescuento", findParameter.TotalDescuento);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@TotalDescuento",DBNull.Value);
				}

				if(findParameter.TotalSinImpuesto != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@TotalSinImpuesto", findParameter.TotalSinImpuesto);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@TotalSinImpuesto",DBNull.Value);
				}

				if(findParameter.TotalIce != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@TotalIce", findParameter.TotalIce);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@TotalIce",DBNull.Value);
				}

				if(findParameter.TotalIva != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@TotalIva", findParameter.TotalIva);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@TotalIva",DBNull.Value);
				}

				if(findParameter.Total != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Total", findParameter.Total);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Total",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.FormaPago))
				{
					mCommand.Parameters.AddWithValue("@FormaPago", findParameter.FormaPago );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FormaPago",DBNull.Value);
				}

				if(findParameter.Plazo != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Plazo", findParameter.Plazo);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Plazo",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UnidadTiempo))
				{
					mCommand.Parameters.AddWithValue("@UnidadTiempo", findParameter.UnidadTiempo );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UnidadTiempo",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IpIngreso))
				{
					mCommand.Parameters.AddWithValue("@IpIngreso", findParameter.IpIngreso );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpIngreso",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UsuarioIngreso))
				{
					mCommand.Parameters.AddWithValue("@UsuarioIngreso", findParameter.UsuarioIngreso );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioIngreso",DBNull.Value);
				}

				if (findParameter.Fecha != null && findParameter.Fecha != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Fecha", findParameter.Fecha);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Fecha", DBNull.Value);
				}

				if (findParameter.FechaIngreso != null && findParameter.FechaIngreso != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaIngreso", findParameter.FechaIngreso);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaIngreso",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IpModificacion))
				{
					mCommand.Parameters.AddWithValue("@IpModificacion", findParameter.IpModificacion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpModificacion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UsuarioModificacion))
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion", findParameter.UsuarioModificacion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion",DBNull.Value);
				}

				if(findParameter.FechaModificacion != null && findParameter.FechaModificacion != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion", findParameter.FechaModificacion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion",DBNull.Value);
				}

				if(findParameter.IdEstado != short.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdEstado", findParameter.IdEstado);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEstado",DBNull.Value);
				}


				mCommand.Parameters.AddWithValue("@PageNumber",pageNumber);
				mCommand.Parameters.AddWithValue("@PageSize",pageSize);
				if (deepLoadLevel > 1)
		     	{
					mCommand.Parameters.AddWithValue("@OrderBy",orderBy);
			    }
               	
                if (conexion.State != ConnectionState.Open) conexion.Open();
                reader = mCommand.ExecuteReader();

                DocumentoEntityCollection documentoEntityCollection = new DocumentoEntityCollection();
                DocumentoEntity documentoEntity;
                

                while (reader.Read())
                {
                    documentoEntity = new DocumentoEntity();
					#region << Deep Load >>
                    if (deepLoadLevel > 1)
		     		{
						documentoEntity.IdTipoDocumentoAsTipoDocumento = TipoDocumentoDataAccess.ConvertToTipoDocumentoEntity(reader, "IdTipoDocumento");
						documentoEntity.IdEntidadAsEntidad = EntidadDataAccess.ConvertToEntidadEntity(reader, "IdEntidad");
						documentoEntity.IdMonedaAsMoneda = MonedaDataAccess.ConvertToMonedaEntity(reader, "IdMoneda");

                    }
	                #endregion                    
					documentoEntity.Id = Convert.ToString(reader["Id"]);
					documentoEntity.IdTipoDocumento = Convert.ToString(reader["IdTipoDocumento"]);
					documentoEntity.IdEmpresa = Convert.ToInt32(reader["IdEmpresa"]);
					documentoEntity.RUC = Convert.ToString(reader["RUC"]).ToUpper();
					documentoEntity.Establecimiento = Convert.ToString(reader["Establecimiento"]).ToUpper();
					documentoEntity.PuntoEmision = Convert.ToString(reader["PuntoEmision"]).ToUpper();
					documentoEntity.Fecha = Convert.ToDateTime(reader["Fecha"]);

					if (reader["IdSalida"] != DBNull.Value)
					{
						documentoEntity.IdSalida = Convert.ToString(reader["IdSalida"]).ToUpper();
					}
					documentoEntity.IdEntidad = Convert.ToInt32(reader["IdEntidad"]);
					documentoEntity.IdMoneda = Convert.ToInt16(reader["IdMoneda"]);
					if (reader["Notas"] != DBNull.Value)
					{
						documentoEntity.Notas = Convert.ToString(reader["Notas"]).ToUpper();
					}
					if (reader["GuiaRemision"] != DBNull.Value)
					{
						documentoEntity.GuiaRemision = Convert.ToString(reader["GuiaRemision"]).ToUpper();
					}
					if (reader["NumeroDocumento"] != DBNull.Value)
					{
						documentoEntity.NumeroDocumento = Convert.ToString(reader["NumeroDocumento"]).ToUpper();
					}
					documentoEntity.Base0 = (decimal) reader["Base0"];
					documentoEntity.BaseIva = (decimal) reader["BaseIva"];
					documentoEntity.TotalDescuento = (decimal) reader["TotalDescuento"];
					if (reader["TotalSinImpuesto"] != DBNull.Value)
					{
						documentoEntity.TotalSinImpuesto = (decimal) reader["TotalSinImpuesto"];
					}
					documentoEntity.TotalIce = (decimal) reader["TotalIce"];
					documentoEntity.TotalIva = (decimal) reader["TotalIva"];
					if (reader["Total"] != DBNull.Value)
					{
						documentoEntity.Total = (decimal) reader["Total"];
					}
					documentoEntity.FormaPago = Convert.ToString(reader["FormaPago"]);
					documentoEntity.Plazo = Convert.ToInt32(reader["Plazo"]);
					documentoEntity.UnidadTiempo = Convert.ToString(reader["UnidadTiempo"]);
					documentoEntity.IpIngreso = Convert.ToString(reader["IpIngreso"]);
					documentoEntity.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
					documentoEntity.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);

					if (reader["IpModificacion"] != DBNull.Value)
					{
						documentoEntity.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
					}
					if (reader["UsuarioModificacion"] != DBNull.Value)
					{
						documentoEntity.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
					}
					if (reader["FechaModificacion"] != DBNull.Value)
					{
						documentoEntity.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
					}
					documentoEntity.IdEstado = Convert.ToInt16(reader["IdEstado"]);


					if (reader["RUC"] != DBNull.Value)
					{
						documentoEntity.RUC = Convert.ToString(reader["RUC"]);
					}
					if (reader["Establecimiento"] != DBNull.Value)
					{
						documentoEntity.Establecimiento = Convert.ToString(reader["Establecimiento"]);
					}
					if (reader["PuntoEmision"] != DBNull.Value)
					{
						documentoEntity.PuntoEmision = Convert.ToString(reader["PuntoEmision"]);
					}

					documentoEntity.SetLoadedState();
                    documentoEntityCollection.Add(documentoEntity);
                    
                }

                return documentoEntityCollection;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (reader != null) reader.Close();
                mCommand.Dispose();
            }

        }
        
          
    }
}

