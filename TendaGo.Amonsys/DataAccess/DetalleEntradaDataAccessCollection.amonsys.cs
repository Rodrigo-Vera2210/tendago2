    
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Amonsys Software Factory.
//     Template: Speed Developer FrameWork Version 1.0 (For Windows Applications)
//     Web Site: http://www.amonsys.com/SDF
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using ER.BE; 


namespace ER.DA
{
    public partial class DetalleEntradaDataAccessCollection
    {
 

        #region << Custom Stored Procedures >>
        
        
        #endregion
        
        /*public static DetalleEntradaEntityCollection LoadAll(SqlConnection conexion, SqlTransaction  transaction)
        {
            SqlCommand mCommand = new SqlCommand();
            SqlDataReader reader = null;
            try
            {
                mCommand.Connection = conexion;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                
                mCommand.CommandText = "DetalleEntrada_LoadAll";


                if (conexion.State != ConnectionState.Open) conexion.Open();
                reader = mCommand.ExecuteReader();

                DetalleEntradaEntityCollection detalleEntradaEntityCollection = new DetalleEntradaEntityCollection();
                DetalleEntradaEntity detalleEntradaEntity;
                
                while (reader.Read())
                {
                    detalleEntradaEntity = new DetalleEntradaEntity();
                    
					detalleEntradaEntity.Id = Convert.ToString(reader["Id"]);
					detalleEntradaEntity.IdEmpresa = Convert.ToInt32(reader["IdEmpresa"]);
					detalleEntradaEntity.Periodo = Convert.ToString(reader["Periodo"]);
					detalleEntradaEntity.Fecha = Convert.ToDateTime(reader["Fecha"]);
					detalleEntradaEntity.TipoTransaccion = Convert.ToString(reader["TipoTransaccion"]);
					detalleEntradaEntity.IdEntrada = Convert.ToString(reader["IdEntrada"]);
					detalleEntradaEntity.IdProducto = Convert.ToInt32(reader["IdProducto"]);
					detalleEntradaEntity.IdProveedor = Convert.ToInt32(reader["IdProveedor"]);
					detalleEntradaEntity.IdLocal = Convert.ToInt32(reader["IdLocal"]);
					if (reader["ValorFOB"] != DBNull.Value)
					{
						detalleEntradaEntity.ValorFOB = (decimal) reader["ValorFOB"];
					}
					if (reader["FactorDistribucion"] != DBNull.Value)
					{
						detalleEntradaEntity.FactorDistribucion = (decimal) reader["FactorDistribucion"];
					}
					if (reader["CostoUnitarioImportacion"] != DBNull.Value)
					{
						detalleEntradaEntity.CostoUnitarioImportacion = (decimal) reader["CostoUnitarioImportacion"];
					}
					detalleEntradaEntity.Cantidad = (decimal) reader["Cantidad"];
					detalleEntradaEntity.IdTipoUnidad = Convert.ToInt32(reader["IdTipoUnidad"]);
					detalleEntradaEntity.CostoVenta = (decimal) reader["CostoVenta"];
					if (reader["Descuento"] != DBNull.Value)
					{
						detalleEntradaEntity.Descuento = (decimal) reader["Descuento"];
					}
					if (reader["Subtotal"] != DBNull.Value)
					{
						detalleEntradaEntity.Subtotal = (decimal) reader["Subtotal"];
					}
					if (reader["FechaFabricacion"] != DBNull.Value)
					{
						detalleEntradaEntity.FechaFabricacion = Convert.ToDateTime(reader["FechaFabricacion"]);
					}
					if (reader["FechaExpiracion"] != DBNull.Value)
					{
						detalleEntradaEntity.FechaExpiracion = Convert.ToDateTime(reader["FechaExpiracion"]);
					}
					if (reader["Lote"] != DBNull.Value)
					{
						detalleEntradaEntity.Lote = Convert.ToString(reader["Lote"]).ToUpper();
					}
					detalleEntradaEntity.IpIngreso = Convert.ToString(reader["IpIngreso"]);
					detalleEntradaEntity.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
					detalleEntradaEntity.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);
					if (reader["IpModificacion"] != DBNull.Value)
					{
						detalleEntradaEntity.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
					}
					if (reader["UsuarioModificacion"] != DBNull.Value)
					{
						detalleEntradaEntity.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
					}
					if (reader["FechaModificacion"] != DBNull.Value)
					{
						detalleEntradaEntity.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
					}
					detalleEntradaEntity.IdEstado = Convert.ToInt16(reader["IdEstado"]);

                    
                    detalleEntradaEntity.SetLoadedState();
                    detalleEntradaEntityCollection.Add(detalleEntradaEntity);
                    
                }

                return detalleEntradaEntityCollection;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (reader != null) reader.Close();
                mCommand.Dispose();
            }

        }
        */
     
        public static DetalleEntradaEntityCollection FindByAll(DetalleEntradaFindParameterEntity findParameter , SqlConnection conexion, SqlTransaction  transaction)
        {
        	return FindByAll(findParameter,conexion,transaction,1);
        }
        
        public static DetalleEntradaEntityCollection FindByAll(DetalleEntradaFindParameterEntity findParameter , SqlConnection conexion, SqlTransaction  transaction, int deepLoadLevel)
        {
            SqlCommand mCommand = new SqlCommand();
            SqlDataReader reader = null;
            try
            {
                mCommand.Connection = conexion;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                if (deepLoadLevel >= 1)
		     	{
                	mCommand.CommandText = "DetalleEntrada_DeepFindByAll";
                }
                else mCommand.CommandText = "DetalleEntrada_FindByAll";

                
				if(!String.IsNullOrEmpty(findParameter.Id))
				{
					mCommand.Parameters.AddWithValue("@Id", findParameter.Id );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Id",DBNull.Value);
				}

				if(findParameter.IdEmpresa != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdEmpresa", findParameter.IdEmpresa);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEmpresa",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.Periodo))
				{
					mCommand.Parameters.AddWithValue("@Periodo", findParameter.Periodo );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Periodo",DBNull.Value);
				}

				if(findParameter.Fecha != null && findParameter.Fecha != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Fecha", findParameter.Fecha);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Fecha",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.TipoTransaccion))
				{
					mCommand.Parameters.AddWithValue("@TipoTransaccion", findParameter.TipoTransaccion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@TipoTransaccion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IdEntrada))
				{
					mCommand.Parameters.AddWithValue("@IdEntrada", findParameter.IdEntrada );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEntrada",DBNull.Value);
				}

				if(findParameter.IdProducto != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdProducto", findParameter.IdProducto);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdProducto",DBNull.Value);
				}

				if(findParameter.IdProveedor != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdProveedor", findParameter.IdProveedor);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdProveedor",DBNull.Value);
				}

				if(findParameter.IdLocal != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdLocal", findParameter.IdLocal);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdLocal",DBNull.Value);
				}

				if(findParameter.ValorFOB != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@ValorFOB", findParameter.ValorFOB);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@ValorFOB",DBNull.Value);
				}

				if(findParameter.FactorDistribucion != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FactorDistribucion", findParameter.FactorDistribucion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FactorDistribucion",DBNull.Value);
				}

				if(findParameter.CostoUnitarioImportacion != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@CostoUnitarioImportacion", findParameter.CostoUnitarioImportacion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@CostoUnitarioImportacion",DBNull.Value);
				}

				if(findParameter.Cantidad != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Cantidad", findParameter.Cantidad);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Cantidad",DBNull.Value);
				}

				if(findParameter.IdTipoUnidad != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdTipoUnidad", findParameter.IdTipoUnidad);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdTipoUnidad",DBNull.Value);
				}

				if(findParameter.CostoVenta != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@CostoVenta", findParameter.CostoVenta);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@CostoVenta",DBNull.Value);
				}

				if(findParameter.Descuento != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Descuento", findParameter.Descuento);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Descuento",DBNull.Value);
				}

				if (findParameter.ValorAdicional != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@ValorAdicional", findParameter.ValorAdicional);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@ValorAdicional", DBNull.Value);
				}


				if (findParameter.Subtotal != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Subtotal", findParameter.Subtotal);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Subtotal",DBNull.Value);
				}

				if(findParameter.FechaFabricacion != null && findParameter.FechaFabricacion != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaFabricacion", findParameter.FechaFabricacion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaFabricacion",DBNull.Value);
				}

				if(findParameter.FechaExpiracion != null && findParameter.FechaExpiracion != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaExpiracion", findParameter.FechaExpiracion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaExpiracion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.Lote))
				{
					mCommand.Parameters.AddWithValue("@Lote", findParameter.Lote );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Lote",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IpIngreso))
				{
					mCommand.Parameters.AddWithValue("@IpIngreso", findParameter.IpIngreso );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpIngreso",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UsuarioIngreso))
				{
					mCommand.Parameters.AddWithValue("@UsuarioIngreso", findParameter.UsuarioIngreso );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioIngreso",DBNull.Value);
				}

				if(findParameter.FechaIngreso != null && findParameter.FechaIngreso != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaIngreso", findParameter.FechaIngreso);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaIngreso",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IpModificacion))
				{
					mCommand.Parameters.AddWithValue("@IpModificacion", findParameter.IpModificacion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpModificacion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UsuarioModificacion))
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion", findParameter.UsuarioModificacion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion",DBNull.Value);
				}

				if(findParameter.FechaModificacion != null && findParameter.FechaModificacion != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion", findParameter.FechaModificacion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion",DBNull.Value);
				}

				if(findParameter.IdEstado != short.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdEstado", findParameter.IdEstado);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEstado",DBNull.Value);
				}

    
               	
                if (conexion.State != ConnectionState.Open) conexion.Open();
                reader = mCommand.ExecuteReader();

                DetalleEntradaEntityCollection detalleEntradaEntityCollection = new DetalleEntradaEntityCollection();
                DetalleEntradaEntity detalleEntradaEntity;
                

                while (reader.Read())
                {
                    detalleEntradaEntity = new DetalleEntradaEntity();
					#region << Deep Load >>
                    if (deepLoadLevel == 1)
		     		{
						detalleEntradaEntity.IdEntradaAsEntrada = EntradaDataAccess.ConvertToEntradaEntity(reader, "IdEntrada");
						detalleEntradaEntity.IdProductoAsProducto = ProductoDataAccess.ConvertToProductoEntity(reader, "IdProducto");
						detalleEntradaEntity.IdProveedorAsEntidad = EntidadDataAccess.ConvertToEntidadEntity(reader, "IdProveedor");
						detalleEntradaEntity.IdLocalAsLocalBodega = LocalBodegaDataAccess.ConvertToLocalBodegaEntity(reader, "IdLocal");

                    }
	                #endregion                    
					detalleEntradaEntity.Id = Convert.ToString(reader["Id"]);
					detalleEntradaEntity.IdEmpresa = Convert.ToInt32(reader["IdEmpresa"]);
					detalleEntradaEntity.Periodo = Convert.ToString(reader["Periodo"]);
					detalleEntradaEntity.Fecha = Convert.ToDateTime(reader["Fecha"]);
					detalleEntradaEntity.TipoTransaccion = Convert.ToString(reader["TipoTransaccion"]);
					detalleEntradaEntity.IdEntrada = Convert.ToString(reader["IdEntrada"]);
					detalleEntradaEntity.IdProducto = Convert.ToInt32(reader["IdProducto"]);
					detalleEntradaEntity.IdProveedor = Convert.ToInt32(reader["IdProveedor"]);
					detalleEntradaEntity.IdLocal = Convert.ToInt32(reader["IdLocal"]);
					if (reader["ValorFOB"] != DBNull.Value)
					{
						detalleEntradaEntity.ValorFOB = (decimal) reader["ValorFOB"];
					}
					if (reader["FactorDistribucion"] != DBNull.Value)
					{
						detalleEntradaEntity.FactorDistribucion = (decimal) reader["FactorDistribucion"];
					}
					if (reader["CostoUnitarioImportacion"] != DBNull.Value)
					{
						detalleEntradaEntity.CostoUnitarioImportacion = (decimal) reader["CostoUnitarioImportacion"];
					}
					detalleEntradaEntity.Cantidad = (decimal) reader["Cantidad"];
					detalleEntradaEntity.IdTipoUnidad = Convert.ToInt32(reader["IdTipoUnidad"]);
					detalleEntradaEntity.CostoVenta = (decimal) reader["CostoVenta"];
					if (reader["Descuento"] != DBNull.Value)
					{
						detalleEntradaEntity.Descuento = (decimal) reader["Descuento"];
					}
					if (reader["ValorAdicional"] != DBNull.Value)
					{
						detalleEntradaEntity.ValorAdicional = (decimal)reader["ValorAdicional"];
					}
					if (reader["Subtotal"] != DBNull.Value)
					{
						detalleEntradaEntity.Subtotal = (decimal) reader["Subtotal"];
					}
					if (reader["FechaFabricacion"] != DBNull.Value)
					{
						detalleEntradaEntity.FechaFabricacion = Convert.ToDateTime(reader["FechaFabricacion"]);
					}
					if (reader["FechaExpiracion"] != DBNull.Value)
					{
						detalleEntradaEntity.FechaExpiracion = Convert.ToDateTime(reader["FechaExpiracion"]);
					}
					if (reader["Lote"] != DBNull.Value)
					{
						detalleEntradaEntity.Lote = Convert.ToString(reader["Lote"]).ToUpper();
					}
					detalleEntradaEntity.IpIngreso = Convert.ToString(reader["IpIngreso"]);
					detalleEntradaEntity.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
					detalleEntradaEntity.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);
					if (reader["IpModificacion"] != DBNull.Value)
					{
						detalleEntradaEntity.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
					}
					if (reader["UsuarioModificacion"] != DBNull.Value)
					{
						detalleEntradaEntity.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
					}
					if (reader["FechaModificacion"] != DBNull.Value)
					{
						detalleEntradaEntity.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
					}
					detalleEntradaEntity.IdEstado = Convert.ToInt16(reader["IdEstado"]);

                    
                    detalleEntradaEntity.SetLoadedState();
                    detalleEntradaEntityCollection.Add(detalleEntradaEntity);
                    
                }

                return detalleEntradaEntityCollection;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (reader != null) reader.Close();
                mCommand.Dispose();
            }

        }
        
        public static DetalleEntradaEntityCollection FindByAllPaged(DetalleEntradaFindParameterEntity findParameter , int pageNumber, int pageSize ,string orderBy, SqlConnection conexion, SqlTransaction  transaction )
        {
        	return FindByAllPaged(findParameter,pageNumber, pageSize,orderBy, conexion,transaction,1);
        }
        
        public static DetalleEntradaEntityCollection FindByAllPaged(DetalleEntradaFindParameterEntity findParameter , int pageNumber, int pageSize ,string orderBy, SqlConnection conexion ,SqlTransaction  transaction, int deepLoadLevel)
        {
            SqlCommand mCommand = new SqlCommand();
            SqlDataReader reader = null;
            try
            {
                mCommand.Connection = conexion;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                if (deepLoadLevel >= 1)
		     	{
                	mCommand.CommandText = "DetalleEntrada_DeepFindByAllPaged";
                	
                }
                else mCommand.CommandText = "DetalleEntrada_FindByAllPaged";

                
				if(!String.IsNullOrEmpty(findParameter.Id))
				{
					mCommand.Parameters.AddWithValue("@Id", findParameter.Id );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Id",DBNull.Value);
				}

				if(findParameter.IdEmpresa != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdEmpresa", findParameter.IdEmpresa);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEmpresa",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.Periodo))
				{
					mCommand.Parameters.AddWithValue("@Periodo", findParameter.Periodo );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Periodo",DBNull.Value);
				}

				if(findParameter.Fecha != null && findParameter.Fecha != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Fecha", findParameter.Fecha);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Fecha",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.TipoTransaccion))
				{
					mCommand.Parameters.AddWithValue("@TipoTransaccion", findParameter.TipoTransaccion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@TipoTransaccion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IdEntrada))
				{
					mCommand.Parameters.AddWithValue("@IdEntrada", findParameter.IdEntrada );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEntrada",DBNull.Value);
				}

				if(findParameter.IdProducto != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdProducto", findParameter.IdProducto);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdProducto",DBNull.Value);
				}

				if(findParameter.IdProveedor != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdProveedor", findParameter.IdProveedor);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdProveedor",DBNull.Value);
				}

				if(findParameter.IdLocal != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdLocal", findParameter.IdLocal);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdLocal",DBNull.Value);
				}

				if(findParameter.ValorFOB != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@ValorFOB", findParameter.ValorFOB);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@ValorFOB",DBNull.Value);
				}

				if(findParameter.FactorDistribucion != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FactorDistribucion", findParameter.FactorDistribucion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FactorDistribucion",DBNull.Value);
				}

				if(findParameter.CostoUnitarioImportacion != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@CostoUnitarioImportacion", findParameter.CostoUnitarioImportacion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@CostoUnitarioImportacion",DBNull.Value);
				}

				if(findParameter.Cantidad != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Cantidad", findParameter.Cantidad);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Cantidad",DBNull.Value);
				}

				if(findParameter.IdTipoUnidad != int.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdTipoUnidad", findParameter.IdTipoUnidad);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdTipoUnidad",DBNull.Value);
				}

				if(findParameter.CostoVenta != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@CostoVenta", findParameter.CostoVenta);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@CostoVenta",DBNull.Value);
				}

				if(findParameter.Descuento != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Descuento", findParameter.Descuento);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Descuento",DBNull.Value);
				}

				if (findParameter.ValorAdicional != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@ValorAdicional", findParameter.ValorAdicional);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@ValorAdicional", DBNull.Value);
				}


				if (findParameter.Subtotal != decimal.MinValue)
				{
					mCommand.Parameters.AddWithValue("@Subtotal", findParameter.Subtotal);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Subtotal",DBNull.Value);
				}

				if(findParameter.FechaFabricacion != null && findParameter.FechaFabricacion != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaFabricacion", findParameter.FechaFabricacion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaFabricacion",DBNull.Value);
				}

				if(findParameter.FechaExpiracion != null && findParameter.FechaExpiracion != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaExpiracion", findParameter.FechaExpiracion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaExpiracion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.Lote))
				{
					mCommand.Parameters.AddWithValue("@Lote", findParameter.Lote );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Lote",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IpIngreso))
				{
					mCommand.Parameters.AddWithValue("@IpIngreso", findParameter.IpIngreso );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpIngreso",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UsuarioIngreso))
				{
					mCommand.Parameters.AddWithValue("@UsuarioIngreso", findParameter.UsuarioIngreso );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioIngreso",DBNull.Value);
				}

				if(findParameter.FechaIngreso != null && findParameter.FechaIngreso != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaIngreso", findParameter.FechaIngreso);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaIngreso",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.IpModificacion))
				{
					mCommand.Parameters.AddWithValue("@IpModificacion", findParameter.IpModificacion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpModificacion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(findParameter.UsuarioModificacion))
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion", findParameter.UsuarioModificacion );
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion",DBNull.Value);
				}

				if(findParameter.FechaModificacion != null && findParameter.FechaModificacion != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion", findParameter.FechaModificacion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion",DBNull.Value);
				}

				if(findParameter.IdEstado != short.MinValue)
				{
					mCommand.Parameters.AddWithValue("@IdEstado", findParameter.IdEstado);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdEstado",DBNull.Value);
				}


				mCommand.Parameters.AddWithValue("@PageNumber",pageNumber);
				mCommand.Parameters.AddWithValue("@PageSize",pageSize);
				if (deepLoadLevel > 1)
		     	{
					mCommand.Parameters.AddWithValue("@OrderBy",orderBy);
			    }
               	
                if (conexion.State != ConnectionState.Open) conexion.Open();
                reader = mCommand.ExecuteReader();

                DetalleEntradaEntityCollection detalleEntradaEntityCollection = new DetalleEntradaEntityCollection();
                DetalleEntradaEntity detalleEntradaEntity;
                

                while (reader.Read())
                {
                    detalleEntradaEntity = new DetalleEntradaEntity();
					#region << Deep Load >>
                    if (deepLoadLevel > 1)
		     		{
						detalleEntradaEntity.IdEntradaAsEntrada = EntradaDataAccess.ConvertToEntradaEntity(reader, "IdEntrada");
						detalleEntradaEntity.IdProductoAsProducto = ProductoDataAccess.ConvertToProductoEntity(reader, "IdProducto");
						detalleEntradaEntity.IdProveedorAsEntidad = EntidadDataAccess.ConvertToEntidadEntity(reader, "IdProveedor");
						detalleEntradaEntity.IdLocalAsLocalBodega = LocalBodegaDataAccess.ConvertToLocalBodegaEntity(reader, "IdLocal");

                    }
	                #endregion                    
					detalleEntradaEntity.Id = Convert.ToString(reader["Id"]);
					detalleEntradaEntity.IdEmpresa = Convert.ToInt32(reader["IdEmpresa"]);
					detalleEntradaEntity.Periodo = Convert.ToString(reader["Periodo"]);
					detalleEntradaEntity.Fecha = Convert.ToDateTime(reader["Fecha"]);
					detalleEntradaEntity.TipoTransaccion = Convert.ToString(reader["TipoTransaccion"]);
					detalleEntradaEntity.IdEntrada = Convert.ToString(reader["IdEntrada"]);
					detalleEntradaEntity.IdProducto = Convert.ToInt32(reader["IdProducto"]);
					detalleEntradaEntity.IdProveedor = Convert.ToInt32(reader["IdProveedor"]);
					detalleEntradaEntity.IdLocal = Convert.ToInt32(reader["IdLocal"]);
					if (reader["ValorFOB"] != DBNull.Value)
					{
						detalleEntradaEntity.ValorFOB = (decimal) reader["ValorFOB"];
					}
					if (reader["FactorDistribucion"] != DBNull.Value)
					{
						detalleEntradaEntity.FactorDistribucion = (decimal) reader["FactorDistribucion"];
					}
					if (reader["CostoUnitarioImportacion"] != DBNull.Value)
					{
						detalleEntradaEntity.CostoUnitarioImportacion = (decimal) reader["CostoUnitarioImportacion"];
					}
					detalleEntradaEntity.Cantidad = (decimal) reader["Cantidad"];
					detalleEntradaEntity.IdTipoUnidad = Convert.ToInt32(reader["IdTipoUnidad"]);
					detalleEntradaEntity.CostoVenta = (decimal) reader["CostoVenta"];
					if (reader["Descuento"] != DBNull.Value)
					{
						detalleEntradaEntity.Descuento = (decimal) reader["Descuento"];
					}
					if (reader["ValorAdicional"] != DBNull.Value)
					{
						detalleEntradaEntity.ValorAdicional = (decimal)reader["ValorAdicional"];
					}
					if (reader["Subtotal"] != DBNull.Value)
					{
						detalleEntradaEntity.Subtotal = (decimal) reader["Subtotal"];
					}
					if (reader["FechaFabricacion"] != DBNull.Value)
					{
						detalleEntradaEntity.FechaFabricacion = Convert.ToDateTime(reader["FechaFabricacion"]);
					}
					if (reader["FechaExpiracion"] != DBNull.Value)
					{
						detalleEntradaEntity.FechaExpiracion = Convert.ToDateTime(reader["FechaExpiracion"]);
					}
					if (reader["Lote"] != DBNull.Value)
					{
						detalleEntradaEntity.Lote = Convert.ToString(reader["Lote"]).ToUpper();
					}
					detalleEntradaEntity.IpIngreso = Convert.ToString(reader["IpIngreso"]);
					detalleEntradaEntity.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
					detalleEntradaEntity.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);
					if (reader["IpModificacion"] != DBNull.Value)
					{
						detalleEntradaEntity.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
					}
					if (reader["UsuarioModificacion"] != DBNull.Value)
					{
						detalleEntradaEntity.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
					}
					if (reader["FechaModificacion"] != DBNull.Value)
					{
						detalleEntradaEntity.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
					}
					detalleEntradaEntity.IdEstado = Convert.ToInt16(reader["IdEstado"]);

                    
                    detalleEntradaEntity.SetLoadedState();
                    detalleEntradaEntityCollection.Add(detalleEntradaEntity);
                    
                }

                return detalleEntradaEntityCollection;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (reader != null) reader.Close();
                mCommand.Dispose();
            }

        }
        
          
    }
}

