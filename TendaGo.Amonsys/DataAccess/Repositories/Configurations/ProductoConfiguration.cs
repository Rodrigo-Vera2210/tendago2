// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using ER.DA.Models;
using ER.DA.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;

namespace ER.DA.Repositories.Configurations
{
    public partial class ProductoConfiguration : IEntityTypeConfiguration<Producto>
    {
        public void Configure(EntityTypeBuilder<Producto> entity)
        {
            entity.HasKey(e => e.Id).HasName("PK_Productos");

            entity.ToTable(tb => tb.HasTrigger("TR_PRODUCTO_URL"));

            entity.HasIndex(e => new { e.IdEmpresa, e.CodigoInterno }, "UQ_Producto").IsUnique();

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CodigoBarra)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CodigoInterno)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CodigoProveedor)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Costo).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DescipcionBusqueda)
                .IsRequired()
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.Descripcion)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Descuento).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.FechaIngreso).HasColumnType("datetime");
            entity.Property(e => e.FechaModificacion).HasColumnType("datetime");
            entity.Property(e => e.IpIngreso)
                .IsRequired()
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.IpModificacion)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PathArchivo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PathArchivo2)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Peso).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Producto1)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Producto");
            entity.Property(e => e.RegistroSanitario)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TipoProducto)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Sirve para especificar si es un Producto o Servicio");
            entity.Property(e => e.UsuarioIngreso)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UsuarioModificacion)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Volumen).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.IdCategoriaNavigation).WithMany(p => p.Producto)
                .HasForeignKey(d => d.IdCategoria)
                .HasConstraintName("FK_Producto_Categoria");

            entity.HasOne(d => d.IdDivisionNavigation).WithMany(p => p.Producto)
                .HasForeignKey(d => d.IdDivision)
                .HasConstraintName("FK_Producto_Division");

            entity.HasOne(d => d.IdEmpresaNavigation).WithMany(p => p.Producto)
                .HasForeignKey(d => d.IdEmpresa)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Producto_Empresa");

            entity.HasOne(d => d.IdLineaNavigation).WithMany(p => p.Producto)
                .HasForeignKey(d => d.IdLinea)
                .HasConstraintName("FK_Producto_Linea");

            entity.HasOne(d => d.IdMarcaNavigation).WithMany(p => p.Producto)
                .HasForeignKey(d => d.IdMarca)
                .HasConstraintName("FK_Producto_Marca");

            entity.HasOne(d => d.ProductoPadreNavigation).WithMany(p => p.InverseProductoPadreNavigation)
                .HasForeignKey(d => d.ProductoPadre)
                .HasConstraintName("FK_Producto_ProductoPadre");

            entity.HasOne(d => d.UnidadMedidaNavigation).WithMany(p => p.Producto)
                .HasForeignKey(d => d.UnidadMedida)
                .HasConstraintName("FK_Producto_UnidadMedida");

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<Producto> entity);
    }
}
