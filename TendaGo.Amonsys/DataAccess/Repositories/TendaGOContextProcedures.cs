// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using ER.DA.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace ER.DA.Repositories
{
    public partial class TendaGOContext
    {
        private ITendaGOContextProcedures _procedures;

        public virtual ITendaGOContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new TendaGOContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ITendaGOContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class TendaGOContextProcedures : ITendaGOContextProcedures
    {
        private readonly TendaGOContext _context;

        public TendaGOContextProcedures(TendaGOContext context)
        {
            _context = context;
        }

        public virtual async Task<List<Categoria_DeepFindByAllResult>> Categoria_DeepFindByAllAsync(int? Id, int? IdEmpresa, int? IdLinea, string Categoria, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLinea",
                    Value = IdLinea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Categoria",
                    Size = 50,
                    Value = Categoria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Categoria_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Categoria_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdLinea = @IdLinea, @Categoria = @Categoria, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Categoria_DeepFindByAllPagedAsync(int? Id, int? IdEmpresa, int? IdLinea, string Categoria, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLinea",
                    Value = IdLinea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Categoria",
                    Size = 50,
                    Value = Categoria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Categoria_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdLinea = @IdLinea, @Categoria = @Categoria, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Categoria_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Categoria_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Categoria_FindByAllResult>> Categoria_FindByAllAsync(int? Id, int? IdEmpresa, int? IdLinea, string Categoria, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLinea",
                    Value = IdLinea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Categoria",
                    Size = 50,
                    Value = Categoria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Categoria_FindByAllResult>("EXEC @returnValue = [dbo].[Categoria_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdLinea = @IdLinea, @Categoria = @Categoria, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Categoria_FindByAllPagedResult>> Categoria_FindByAllPagedAsync(int? Id, int? IdEmpresa, int? IdLinea, string Categoria, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLinea",
                    Value = IdLinea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Categoria",
                    Size = 50,
                    Value = Categoria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Categoria_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Categoria_FindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdLinea = @IdLinea, @Categoria = @Categoria, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Categoria_InsertAsync(int? IdEmpresa, int? IdLinea, string Categoria, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLinea",
                    Value = IdLinea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Categoria",
                    Size = 50,
                    Value = Categoria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Categoria_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @IdLinea = @IdLinea, @Categoria = @Categoria, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Categoria_LoadAllResult>> Categoria_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Categoria_LoadAllResult>("EXEC @returnValue = [dbo].[Categoria_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Categoria_LoadByPKResult>> Categoria_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Categoria_LoadByPKResult>("EXEC @returnValue = [dbo].[Categoria_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Categoria_UpdateAsync(int? Id, int? IdEmpresa, int? IdLinea, string Categoria, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLinea",
                    Value = IdLinea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Categoria",
                    Size = 50,
                    Value = Categoria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Categoria_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdLinea = @IdLinea, @Categoria = @Categoria, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CierreCaja_DeepFindByAllResult>> CierreCaja_DeepFindByAllAsync(string Id, DateTime? FechaApertura, DateTime? FechaCierre, int? IdEmpresa, int? IdLocal, string IdCajero, string Observaciones, decimal? SaldoInicial, decimal? TotalIngresos, decimal? TotalEgresos, decimal? SaldoFinal, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaApertura",
                    Value = FechaApertura ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaCierre",
                    Value = FechaCierre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCajero",
                    Size = 100,
                    Value = IdCajero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 500,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoInicial",
                    Precision = 18,
                    Scale = 2,
                    Value = SaldoInicial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIngresos",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIngresos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalEgresos",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalEgresos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoFinal",
                    Precision = 18,
                    Scale = 2,
                    Value = SaldoFinal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CierreCaja_DeepFindByAllResult>("EXEC @returnValue = [dbo].[CierreCaja_DeepFindByAll] @Id = @Id, @FechaApertura = @FechaApertura, @FechaCierre = @FechaCierre, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @IdCajero = @IdCajero, @Observaciones = @Observaciones, @SaldoInicial = @SaldoInicial, @TotalIngresos = @TotalIngresos, @TotalEgresos = @TotalEgresos, @SaldoFinal = @SaldoFinal, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CierreCaja_DeepFindByAllPagedAsync(string Id, DateTime? FechaApertura, DateTime? FechaCierre, int? IdEmpresa, int? IdLocal, string IdCajero, string Observaciones, decimal? SaldoInicial, decimal? TotalIngresos, decimal? TotalEgresos, decimal? SaldoFinal, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaApertura",
                    Value = FechaApertura ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaCierre",
                    Value = FechaCierre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCajero",
                    Size = 100,
                    Value = IdCajero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 500,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoInicial",
                    Precision = 18,
                    Scale = 2,
                    Value = SaldoInicial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIngresos",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIngresos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalEgresos",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalEgresos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoFinal",
                    Precision = 18,
                    Scale = 2,
                    Value = SaldoFinal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CierreCaja_DeepFindByAllPaged] @Id = @Id, @FechaApertura = @FechaApertura, @FechaCierre = @FechaCierre, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @IdCajero = @IdCajero, @Observaciones = @Observaciones, @SaldoInicial = @SaldoInicial, @TotalIngresos = @TotalIngresos, @TotalEgresos = @TotalEgresos, @SaldoFinal = @SaldoFinal, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CierreCaja_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CierreCaja_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CierreCaja_FindByAllResult>> CierreCaja_FindByAllAsync(string Id, DateTime? FechaApertura, DateTime? FechaCierre, int? IdEmpresa, int? IdLocal, string IdCajero, string Observaciones, decimal? SaldoInicial, decimal? TotalIngresos, decimal? TotalEgresos, decimal? SaldoFinal, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaApertura",
                    Value = FechaApertura ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaCierre",
                    Value = FechaCierre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCajero",
                    Size = 100,
                    Value = IdCajero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 500,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoInicial",
                    Precision = 18,
                    Scale = 2,
                    Value = SaldoInicial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIngresos",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIngresos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalEgresos",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalEgresos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoFinal",
                    Precision = 18,
                    Scale = 2,
                    Value = SaldoFinal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CierreCaja_FindByAllResult>("EXEC @returnValue = [dbo].[CierreCaja_FindByAll] @Id = @Id, @FechaApertura = @FechaApertura, @FechaCierre = @FechaCierre, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @IdCajero = @IdCajero, @Observaciones = @Observaciones, @SaldoInicial = @SaldoInicial, @TotalIngresos = @TotalIngresos, @TotalEgresos = @TotalEgresos, @SaldoFinal = @SaldoFinal, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CierreCaja_FindByAllPagedResult>> CierreCaja_FindByAllPagedAsync(string Id, DateTime? FechaApertura, DateTime? FechaCierre, int? IdEmpresa, int? IdLocal, string IdCajero, string Observaciones, decimal? SaldoInicial, decimal? TotalIngresos, decimal? TotalEgresos, decimal? SaldoFinal, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaApertura",
                    Value = FechaApertura ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaCierre",
                    Value = FechaCierre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCajero",
                    Size = 100,
                    Value = IdCajero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 500,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoInicial",
                    Precision = 18,
                    Scale = 2,
                    Value = SaldoInicial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIngresos",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIngresos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalEgresos",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalEgresos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoFinal",
                    Precision = 18,
                    Scale = 2,
                    Value = SaldoFinal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CierreCaja_FindByAllPagedResult>("EXEC @returnValue = [dbo].[CierreCaja_FindByAllPaged] @Id = @Id, @FechaApertura = @FechaApertura, @FechaCierre = @FechaCierre, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @IdCajero = @IdCajero, @Observaciones = @Observaciones, @SaldoInicial = @SaldoInicial, @TotalIngresos = @TotalIngresos, @TotalEgresos = @TotalEgresos, @SaldoFinal = @SaldoFinal, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CierreCaja_InsertAsync(DateTime? FechaApertura, DateTime? FechaCierre, int? IdEmpresa, int? IdLocal, string IdCajero, string Observaciones, decimal? SaldoInicial, decimal? TotalIngresos, decimal? TotalEgresos, decimal? SaldoFinal, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "FechaApertura",
                    Value = FechaApertura ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaCierre",
                    Value = FechaCierre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCajero",
                    Size = 100,
                    Value = IdCajero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 500,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoInicial",
                    Precision = 18,
                    Scale = 2,
                    Value = SaldoInicial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIngresos",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIngresos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalEgresos",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalEgresos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoFinal",
                    Precision = 18,
                    Scale = 2,
                    Value = SaldoFinal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CierreCaja_Insert] @Id = @Id OUTPUT, @FechaApertura = @FechaApertura, @FechaCierre = @FechaCierre, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @IdCajero = @IdCajero, @Observaciones = @Observaciones, @SaldoInicial = @SaldoInicial, @TotalIngresos = @TotalIngresos, @TotalEgresos = @TotalEgresos, @SaldoFinal = @SaldoFinal, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CierreCaja_LoadAllResult>> CierreCaja_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CierreCaja_LoadAllResult>("EXEC @returnValue = [dbo].[CierreCaja_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CierreCaja_LoadByPKResult>> CierreCaja_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CierreCaja_LoadByPKResult>("EXEC @returnValue = [dbo].[CierreCaja_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CierreCaja_UpdateAsync(string Id, DateTime? FechaApertura, DateTime? FechaCierre, int? IdEmpresa, int? IdLocal, string IdCajero, string Observaciones, decimal? SaldoInicial, decimal? TotalIngresos, decimal? TotalEgresos, decimal? SaldoFinal, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaApertura",
                    Value = FechaApertura ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaCierre",
                    Value = FechaCierre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCajero",
                    Size = 100,
                    Value = IdCajero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 500,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoInicial",
                    Precision = 18,
                    Scale = 2,
                    Value = SaldoInicial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIngresos",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIngresos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalEgresos",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalEgresos ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoFinal",
                    Precision = 18,
                    Scale = 2,
                    Value = SaldoFinal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CierreCaja_Update] @Id = @Id, @FechaApertura = @FechaApertura, @FechaCierre = @FechaCierre, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @IdCajero = @IdCajero, @Observaciones = @Observaciones, @SaldoInicial = @SaldoInicial, @TotalIngresos = @TotalIngresos, @TotalEgresos = @TotalEgresos, @SaldoFinal = @SaldoFinal, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ciudad_DeepFindByAllResult>> Ciudad_DeepFindByAllAsync(int? Id, int? IdProvincia, string Ciudad, string Codigo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProvincia",
                    Value = IdProvincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ciudad",
                    Size = 150,
                    Value = Ciudad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 5,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ciudad_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Ciudad_DeepFindByAll] @Id = @Id, @IdProvincia = @IdProvincia, @Ciudad = @Ciudad, @Codigo = @Codigo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ciudad_DeepFindByAllPagedAsync(int? Id, int? IdProvincia, string Ciudad, string Codigo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProvincia",
                    Value = IdProvincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ciudad",
                    Size = 150,
                    Value = Ciudad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 5,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ciudad_DeepFindByAllPaged] @Id = @Id, @IdProvincia = @IdProvincia, @Ciudad = @Ciudad, @Codigo = @Codigo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ciudad_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ciudad_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ciudad_FindByAllResult>> Ciudad_FindByAllAsync(int? Id, int? IdProvincia, string Ciudad, string Codigo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProvincia",
                    Value = IdProvincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ciudad",
                    Size = 150,
                    Value = Ciudad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 5,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ciudad_FindByAllResult>("EXEC @returnValue = [dbo].[Ciudad_FindByAll] @Id = @Id, @IdProvincia = @IdProvincia, @Ciudad = @Ciudad, @Codigo = @Codigo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ciudad_FindByAllPagedResult>> Ciudad_FindByAllPagedAsync(int? Id, int? IdProvincia, string Ciudad, string Codigo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProvincia",
                    Value = IdProvincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ciudad",
                    Size = 150,
                    Value = Ciudad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 5,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ciudad_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Ciudad_FindByAllPaged] @Id = @Id, @IdProvincia = @IdProvincia, @Ciudad = @Ciudad, @Codigo = @Codigo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ciudad_InsertAsync(int? IdProvincia, string Ciudad, string Codigo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdProvincia",
                    Value = IdProvincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ciudad",
                    Size = 150,
                    Value = Ciudad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 5,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ciudad_Insert] @Id = @Id OUTPUT, @IdProvincia = @IdProvincia, @Ciudad = @Ciudad, @Codigo = @Codigo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ciudad_LoadAllResult>> Ciudad_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ciudad_LoadAllResult>("EXEC @returnValue = [dbo].[Ciudad_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ciudad_LoadByPKResult>> Ciudad_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ciudad_LoadByPKResult>("EXEC @returnValue = [dbo].[Ciudad_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ciudad_UpdateAsync(int? Id, int? IdProvincia, string Ciudad, string Codigo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProvincia",
                    Value = IdProvincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ciudad",
                    Size = 150,
                    Value = Ciudad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 5,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ciudad_Update] @Id = @Id, @IdProvincia = @IdProvincia, @Ciudad = @Ciudad, @Codigo = @Codigo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CobroDebito_DeepFindByAllResult>> CobroDebito_DeepFindByAllAsync(string Id, int? IdEmpresa, int? IdCliente, DateTime? Fecha, string Detalle, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, string IdCierreCaja, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Detalle",
                    Size = 50,
                    Value = Detalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdCierreCaja",
                    Size = 50,
                    Value = IdCierreCaja ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CobroDebito_DeepFindByAllResult>("EXEC @returnValue = [dbo].[CobroDebito_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdCliente = @IdCliente, @Fecha = @Fecha, @Detalle = @Detalle, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdCierreCaja = @IdCierreCaja, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CobroDebito_DeepFindByAllPagedAsync(string Id, int? IdEmpresa, int? IdCliente, DateTime? Fecha, string Detalle, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string IdCierreCaja, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Detalle",
                    Size = 50,
                    Value = Detalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdCierreCaja",
                    Size = 50,
                    Value = IdCierreCaja ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CobroDebito_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdCliente = @IdCliente, @Fecha = @Fecha, @Detalle = @Detalle, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdCierreCaja = @IdCierreCaja, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CobroDebito_DeleteAsync(string Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CobroDebito_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CobroDebito_FindByAllResult>> CobroDebito_FindByAllAsync(string Id, int? IdEmpresa, int? IdCliente, DateTime? Fecha, string Detalle, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string IdCierreCaja, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Detalle",
                    Size = 50,
                    Value = Detalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdCierreCaja",
                    Size = 50,
                    Value = IdCierreCaja ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CobroDebito_FindByAllResult>("EXEC @returnValue = [dbo].[CobroDebito_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdCliente = @IdCliente, @Fecha = @Fecha, @Detalle = @Detalle, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdCierreCaja = @IdCierreCaja", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CobroDebito_FindByAllPagedResult>> CobroDebito_FindByAllPagedAsync(string Id, int? IdEmpresa, DateTime? Fecha, string Detalle, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string IdCierreCaja, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Detalle",
                    Size = 50,
                    Value = Detalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdCierreCaja",
                    Size = 50,
                    Value = IdCierreCaja ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CobroDebito_FindByAllPagedResult>("EXEC @returnValue = [dbo].[CobroDebito_FindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @Fecha = @Fecha, @Detalle = @Detalle, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdCierreCaja = @IdCierreCaja, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CobroDebito_InsertAsync(int? IdEmpresa, int? IdCliente, DateTime? Fecha, string Detalle, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string IdCierreCaja, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Detalle",
                    Size = 50,
                    Value = Detalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdCierreCaja",
                    Size = 50,
                    Value = IdCierreCaja ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CobroDebito_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @IdCliente = @IdCliente, @Fecha = @Fecha, @Detalle = @Detalle, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdCierreCaja = @IdCierreCaja", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CobroDebito_LoadAllResult>> CobroDebito_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CobroDebito_LoadAllResult>("EXEC @returnValue = [dbo].[CobroDebito_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CobroDebito_LoadByPKResult>> CobroDebito_LoadByPKAsync(string Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CobroDebito_LoadByPKResult>("EXEC @returnValue = [dbo].[CobroDebito_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CobroDebito_ReverseAsync(string IdCobroDebito, int? IdEmpresa, DateTime? Fecha, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdCobroDebito",
                    Size = 50,
                    Value = IdCobroDebito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CobroDebito_Reverse] @Id = @Id OUTPUT, @IdCobroDebito = @IdCobroDebito, @IdEmpresa = @IdEmpresa, @Fecha = @Fecha, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CobroDebito_UpdateAsync(string Id, int? IdEmpresa, int? IdCliente, DateTime? Fecha, string Detalle, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string IdCierreCaja, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Detalle",
                    Size = 50,
                    Value = Detalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdCierreCaja",
                    Size = 50,
                    Value = IdCierreCaja ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CobroDebito_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdCliente = @IdCliente, @Fecha = @Fecha, @Detalle = @Detalle, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdCierreCaja = @IdCierreCaja", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CuentaPorCobrar_DeepFindByAllResult>> CuentaPorCobrar_DeepFindByAllAsync(int? Id, string IdSalida, int? Numero, DateTime? FechaVencimiento, decimal? Valor, decimal? Saldo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Numero",
                    Value = Numero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaVencimiento",
                    Value = FechaVencimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CuentaPorCobrar_DeepFindByAllResult>("EXEC @returnValue = [dbo].[CuentaPorCobrar_DeepFindByAll] @Id = @Id, @IdSalida = @IdSalida, @Numero = @Numero, @FechaVencimiento = @FechaVencimiento, @Valor = @Valor, @Saldo = @Saldo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CuentaPorCobrar_DeepFindByAllPagedAsync(int? Id, string IdSalida, int? Numero, DateTime? FechaVencimiento, decimal? Valor, decimal? Saldo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Numero",
                    Value = Numero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaVencimiento",
                    Value = FechaVencimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CuentaPorCobrar_DeepFindByAllPaged] @Id = @Id, @IdSalida = @IdSalida, @Numero = @Numero, @FechaVencimiento = @FechaVencimiento, @Valor = @Valor, @Saldo = @Saldo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CuentaPorCobrar_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CuentaPorCobrar_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CuentaPorCobrar_FindByAllResult>> CuentaPorCobrar_FindByAllAsync(int? Id, string IdSalida, int? Numero, DateTime? FechaVencimiento, decimal? Valor, decimal? Saldo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Numero",
                    Value = Numero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaVencimiento",
                    Value = FechaVencimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CuentaPorCobrar_FindByAllResult>("EXEC @returnValue = [dbo].[CuentaPorCobrar_FindByAll] @Id = @Id, @IdSalida = @IdSalida, @Numero = @Numero, @FechaVencimiento = @FechaVencimiento, @Valor = @Valor, @Saldo = @Saldo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CuentaPorCobrar_FindByAllPagedResult>> CuentaPorCobrar_FindByAllPagedAsync(int? Id, string IdSalida, int? Numero, DateTime? FechaVencimiento, decimal? Valor, decimal? Saldo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Numero",
                    Value = Numero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaVencimiento",
                    Value = FechaVencimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CuentaPorCobrar_FindByAllPagedResult>("EXEC @returnValue = [dbo].[CuentaPorCobrar_FindByAllPaged] @Id = @Id, @IdSalida = @IdSalida, @Numero = @Numero, @FechaVencimiento = @FechaVencimiento, @Valor = @Valor, @Saldo = @Saldo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CuentaPorCobrar_InsertAsync(string IdSalida, int? Numero, DateTime? FechaVencimiento, decimal? Valor, decimal? Saldo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Numero",
                    Value = Numero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaVencimiento",
                    Value = FechaVencimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CuentaPorCobrar_Insert] @Id = @Id OUTPUT, @IdSalida = @IdSalida, @Numero = @Numero, @FechaVencimiento = @FechaVencimiento, @Valor = @Valor, @Saldo = @Saldo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CuentaPorCobrar_LoadAllResult>> CuentaPorCobrar_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CuentaPorCobrar_LoadAllResult>("EXEC @returnValue = [dbo].[CuentaPorCobrar_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CuentaPorCobrar_LoadByPKResult>> CuentaPorCobrar_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CuentaPorCobrar_LoadByPKResult>("EXEC @returnValue = [dbo].[CuentaPorCobrar_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CuentaPorCobrar_UpdateAsync(int? Id, string IdSalida, int? Numero, DateTime? FechaVencimiento, decimal? Valor, decimal? Saldo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Numero",
                    Value = Numero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaVencimiento",
                    Value = FechaVencimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CuentaPorCobrar_Update] @Id = @Id, @IdSalida = @IdSalida, @Numero = @Numero, @FechaVencimiento = @FechaVencimiento, @Valor = @Valor, @Saldo = @Saldo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CuentaPorPagar_DeepFindByAllResult>> CuentaPorPagar_DeepFindByAllAsync(int? Id, string IdEntrada, int? Numero, DateTime? Periodo, DateTime? Fecha, decimal? Valor, decimal? Saldo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntrada",
                    Size = 50,
                    Value = IdEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Numero",
                    Value = Numero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CuentaPorPagar_DeepFindByAllResult>("EXEC @returnValue = [dbo].[CuentaPorPagar_DeepFindByAll] @Id = @Id, @IdEntrada = @IdEntrada, @Numero = @Numero, @Periodo = @Periodo, @Fecha = @Fecha, @Valor = @Valor, @Saldo = @Saldo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CuentaPorPagar_DeepFindByAllPagedAsync(int? Id, string IdEntrada, int? Numero, DateTime? Periodo, DateTime? Fecha, decimal? Valor, decimal? Saldo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntrada",
                    Size = 50,
                    Value = IdEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Numero",
                    Value = Numero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CuentaPorPagar_DeepFindByAllPaged] @Id = @Id, @IdEntrada = @IdEntrada, @Numero = @Numero, @Periodo = @Periodo, @Fecha = @Fecha, @Valor = @Valor, @Saldo = @Saldo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CuentaPorPagar_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CuentaPorPagar_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CuentaPorPagar_FindByAllResult>> CuentaPorPagar_FindByAllAsync(int? Id, string IdEntrada, int? Numero, DateTime? Periodo, DateTime? Fecha, decimal? Valor, decimal? Saldo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntrada",
                    Size = 50,
                    Value = IdEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Numero",
                    Value = Numero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CuentaPorPagar_FindByAllResult>("EXEC @returnValue = [dbo].[CuentaPorPagar_FindByAll] @Id = @Id, @IdEntrada = @IdEntrada, @Numero = @Numero, @Periodo = @Periodo, @Fecha = @Fecha, @Valor = @Valor, @Saldo = @Saldo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CuentaPorPagar_FindByAllPagedResult>> CuentaPorPagar_FindByAllPagedAsync(int? Id, string IdEntrada, int? Numero, DateTime? Periodo, DateTime? Fecha, decimal? Valor, decimal? Saldo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntrada",
                    Size = 50,
                    Value = IdEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Numero",
                    Value = Numero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CuentaPorPagar_FindByAllPagedResult>("EXEC @returnValue = [dbo].[CuentaPorPagar_FindByAllPaged] @Id = @Id, @IdEntrada = @IdEntrada, @Numero = @Numero, @Periodo = @Periodo, @Fecha = @Fecha, @Valor = @Valor, @Saldo = @Saldo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CuentaPorPagar_InsertAsync(string IdEntrada, int? Numero, DateTime? Periodo, DateTime? Fecha, decimal? Valor, decimal? Saldo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEntrada",
                    Size = 50,
                    Value = IdEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Numero",
                    Value = Numero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CuentaPorPagar_Insert] @Id = @Id OUTPUT, @IdEntrada = @IdEntrada, @Numero = @Numero, @Periodo = @Periodo, @Fecha = @Fecha, @Valor = @Valor, @Saldo = @Saldo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CuentaPorPagar_LoadAllResult>> CuentaPorPagar_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CuentaPorPagar_LoadAllResult>("EXEC @returnValue = [dbo].[CuentaPorPagar_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CuentaPorPagar_LoadByPKResult>> CuentaPorPagar_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CuentaPorPagar_LoadByPKResult>("EXEC @returnValue = [dbo].[CuentaPorPagar_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CuentaPorPagar_UpdateAsync(int? Id, string IdEntrada, int? Numero, DateTime? Periodo, DateTime? Fecha, decimal? Valor, decimal? Saldo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntrada",
                    Size = 50,
                    Value = IdEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Numero",
                    Value = Numero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CuentaPorPagar_Update] @Id = @Id, @IdEntrada = @IdEntrada, @Numero = @Numero, @Periodo = @Periodo, @Fecha = @Fecha, @Valor = @Valor, @Saldo = @Saldo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_CierreCaja_ConsultaResult>> Custom_CierreCaja_ConsultaAsync(int? idEmpresa, int? idLocal, DateTime? fechaDesde, DateTime? fechaHasta, string idVendedor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idEmpresa",
                    Value = idEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idLocal",
                    Value = idLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fechaDesde",
                    Value = fechaDesde ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "fechaHasta",
                    Value = fechaHasta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idVendedor",
                    Size = 50,
                    Value = idVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_CierreCaja_ConsultaResult>("EXEC @returnValue = [dbo].[Custom_CierreCaja_Consulta] @idEmpresa = @idEmpresa, @idLocal = @idLocal, @fechaDesde = @fechaDesde, @fechaHasta = @fechaHasta, @idVendedor = @idVendedor", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_CierreCaja_Consulta2Result>> Custom_CierreCaja_Consulta2Async(int? idEmpresa, int? idLocal, DateTime? fechaDesde, DateTime? fechaHasta, string idVendedor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idEmpresa",
                    Value = idEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idLocal",
                    Value = idLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fechaDesde",
                    Value = fechaDesde ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "fechaHasta",
                    Value = fechaHasta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idVendedor",
                    Size = 50,
                    Value = idVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_CierreCaja_Consulta2Result>("EXEC @returnValue = [dbo].[Custom_CierreCaja_Consulta2] @idEmpresa = @idEmpresa, @idLocal = @idLocal, @fechaDesde = @fechaDesde, @fechaHasta = @fechaHasta, @idVendedor = @idVendedor", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_CierreCaja_Consulta3Result>> Custom_CierreCaja_Consulta3Async(int? idEmpresa, int? idLocal, DateTime? fechaDesde, DateTime? fechaHasta, string idVendedor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idEmpresa",
                    Value = idEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idLocal",
                    Value = idLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fechaDesde",
                    Value = fechaDesde ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "fechaHasta",
                    Value = fechaHasta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idVendedor",
                    Size = 50,
                    Value = idVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_CierreCaja_Consulta3Result>("EXEC @returnValue = [dbo].[Custom_CierreCaja_Consulta3] @idEmpresa = @idEmpresa, @idLocal = @idLocal, @fechaDesde = @fechaDesde, @fechaHasta = @fechaHasta, @idVendedor = @idVendedor", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_CierreCaja_Consulta4Result>> Custom_CierreCaja_Consulta4Async(int? idEmpresa, int? idLocal, DateTime? fechaDesde, DateTime? fechaHasta, string idVendedor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idEmpresa",
                    Value = idEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idLocal",
                    Value = idLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fechaDesde",
                    Value = fechaDesde ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "fechaHasta",
                    Value = fechaHasta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idVendedor",
                    Size = 50,
                    Value = idVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_CierreCaja_Consulta4Result>("EXEC @returnValue = [dbo].[Custom_CierreCaja_Consulta4] @idEmpresa = @idEmpresa, @idLocal = @idLocal, @fechaDesde = @fechaDesde, @fechaHasta = @fechaHasta, @idVendedor = @idVendedor", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_CierreCaja_Consulta5Result>> Custom_CierreCaja_Consulta5Async(int? idEmpresa, int? idLocal, DateTime? fechaDesde, DateTime? fechaHasta, string idVendedor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idEmpresa",
                    Value = idEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idLocal",
                    Value = idLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fechaDesde",
                    Value = fechaDesde ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "fechaHasta",
                    Value = fechaHasta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idVendedor",
                    Size = 50,
                    Value = idVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_CierreCaja_Consulta5Result>("EXEC @returnValue = [dbo].[Custom_CierreCaja_Consulta5] @idEmpresa = @idEmpresa, @idLocal = @idLocal, @fechaDesde = @fechaDesde, @fechaHasta = @fechaHasta, @idVendedor = @idVendedor", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_CierreCaja_ConsultaoldResult>> Custom_CierreCaja_ConsultaoldAsync(int? idEmpresa, int? idLocal, DateTime? fechaDesde, DateTime? fechaHasta, string idVendedor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idEmpresa",
                    Value = idEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idLocal",
                    Value = idLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fechaDesde",
                    Value = fechaDesde ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "fechaHasta",
                    Value = fechaHasta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "idVendedor",
                    Size = 50,
                    Value = idVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_CierreCaja_ConsultaoldResult>("EXEC @returnValue = [dbo].[Custom_CierreCaja_Consultaold] @idEmpresa = @idEmpresa, @idLocal = @idLocal, @fechaDesde = @fechaDesde, @fechaHasta = @fechaHasta, @idVendedor = @idVendedor", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_CierreCaja_DetalleResult>> Custom_CierreCaja_DetalleAsync(int? idEmpresa, int? idLocal, DateTime? fechaDesde, DateTime? fechaHasta, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idEmpresa",
                    Value = idEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idLocal",
                    Value = idLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "fechaDesde",
                    Value = fechaDesde ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "fechaHasta",
                    Value = fechaHasta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_CierreCaja_DetalleResult>("EXEC @returnValue = [dbo].[Custom_CierreCaja_Detalle] @idEmpresa = @idEmpresa, @idLocal = @idLocal, @fechaDesde = @fechaDesde, @fechaHasta = @fechaHasta", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_ClientesDeep_ConsultaResult>> Custom_ClientesDeep_ConsultaAsync(int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_ClientesDeep_ConsultaResult>("EXEC @returnValue = [dbo].[Custom_ClientesDeep_Consulta] @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Cobro_SearchCobroResult>> Custom_Cobro_SearchCobroAsync(string Term, int? IdEmpresa, int? IdLocal, int? IdCliente, DateTime? FechaInicio, DateTime? FechaFin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Term",
                    Size = 50,
                    Value = Term ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaInicio",
                    Value = FechaInicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFin",
                    Value = FechaFin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Cobro_SearchCobroResult>("EXEC @returnValue = [dbo].[Custom_Cobro_SearchCobro] @Term = @Term, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @IdCliente = @IdCliente, @FechaInicio = @FechaInicio, @FechaFin = @FechaFin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_CodigoBarraResult>> Custom_CodigoBarraAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_CodigoBarraResult>("EXEC @returnValue = [dbo].[Custom_CodigoBarra]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_CuentaPorCobrar_ReporteSalidaResult>> Custom_CuentaPorCobrar_ReporteSalidaAsync(string IdSalida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_CuentaPorCobrar_ReporteSalidaResult>("EXEC @returnValue = [dbo].[Custom_CuentaPorCobrar_ReporteSalida] @IdSalida = @IdSalida", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Empaquetado_ReporteEntradaResult>> Custom_Empaquetado_ReporteEntradaAsync(string IdEntrada, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEntrada",
                    Size = 50,
                    Value = IdEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Empaquetado_ReporteEntradaResult>("EXEC @returnValue = [dbo].[Custom_Empaquetado_ReporteEntrada] @IdEntrada = @IdEntrada", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Empaquetado_ReporteSalidaResult>> Custom_Empaquetado_ReporteSalidaAsync(string IdSalida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Empaquetado_ReporteSalidaResult>("EXEC @returnValue = [dbo].[Custom_Empaquetado_ReporteSalida] @IdSalida = @IdSalida", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Entrada_ReporteEntradaResult>> Custom_Entrada_ReporteEntradaAsync(string IdEntrada, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEntrada",
                    Size = 500,
                    Value = IdEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Entrada_ReporteEntradaResult>("EXEC @returnValue = [dbo].[Custom_Entrada_ReporteEntrada] @IdEntrada = @IdEntrada", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Entrada_SearchEntradaResult>> Custom_Entrada_SearchEntradaAsync(int? IdEmpresa, int? IdLocal, string TipoTransaccion, string SearchTerm, string IdVendedor, int? IdProveedor, DateTime? FechaInicio, DateTime? FechaFin, string Estado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 1000,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdVendedor",
                    Size = 50,
                    Value = IdVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaInicio",
                    Value = FechaInicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFin",
                    Value = FechaFin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Estado",
                    Size = 100,
                    Value = Estado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Entrada_SearchEntradaResult>("EXEC @returnValue = [dbo].[Custom_Entrada_SearchEntrada] @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @TipoTransaccion = @TipoTransaccion, @SearchTerm = @SearchTerm, @IdVendedor = @IdVendedor, @IdProveedor = @IdProveedor, @FechaInicio = @FechaInicio, @FechaFin = @FechaFin, @Estado = @Estado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Entrada_ValidarCompraResult>> Custom_Entrada_ValidarCompraAsync(string CodigoProducto, string CodigoUnidad, string Local, int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CodigoProducto",
                    Size = 50,
                    Value = CodigoProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoUnidad",
                    Size = 50,
                    Value = CodigoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Local",
                    Size = 100,
                    Value = Local ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Entrada_ValidarCompraResult>("EXEC @returnValue = [dbo].[Custom_Entrada_ValidarCompra] @CodigoProducto = @CodigoProducto, @CodigoUnidad = @CodigoUnidad, @Local = @Local, @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Estadisticas_CobrosResult>> Custom_Estadisticas_CobrosAsync(int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Estadisticas_CobrosResult>("EXEC @returnValue = [dbo].[Custom_Estadisticas_Cobros] @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Estadisticas_CobrosByUserResult>> Custom_Estadisticas_CobrosByUserAsync(DateTime? FechaIni, DateTime? FechaFin, int? IdEmpresa, int? IdLocal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FechaIni",
                    Value = FechaIni ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFin",
                    Value = FechaFin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Estadisticas_CobrosByUserResult>("EXEC @returnValue = [dbo].[Custom_Estadisticas_CobrosByUser] @FechaIni = @FechaIni, @FechaFin = @FechaFin, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Estadisticas_ResumidasResult>> Custom_Estadisticas_ResumidasAsync(int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Estadisticas_ResumidasResult>("EXEC @returnValue = [dbo].[Custom_Estadisticas_Resumidas] @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Estadisticas_ResumidasByUserResult>> Custom_Estadisticas_ResumidasByUserAsync(DateTime? FechaIni, DateTime? FechaFin, int? IdEmpresa, int? IdLocal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FechaIni",
                    Value = FechaIni ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFin",
                    Value = FechaFin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Estadisticas_ResumidasByUserResult>("EXEC @returnValue = [dbo].[Custom_Estadisticas_ResumidasByUser] @FechaIni = @FechaIni, @FechaFin = @FechaFin, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Estadisticas_Ventas_MensualResult>> Custom_Estadisticas_Ventas_MensualAsync(int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Estadisticas_Ventas_MensualResult>("EXEC @returnValue = [dbo].[Custom_Estadisticas_Ventas_Mensual] @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Estadisticas_VentasMensualByUserResult>> Custom_Estadisticas_VentasMensualByUserAsync(string InicioSesion, int? IdLocal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "InicioSesion",
                    Size = 50,
                    Value = InicioSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Estadisticas_VentasMensualByUserResult>("EXEC @returnValue = [dbo].[Custom_Estadisticas_VentasMensualByUser] @InicioSesion = @InicioSesion, @IdLocal = @IdLocal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Estadisticas_VentasXMesResult>> Custom_Estadisticas_VentasXMesAsync(DateTime? FechaIni, DateTime? FechaFin, int? IdEmpresa, int? IdLocal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FechaIni",
                    Value = FechaIni ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFin",
                    Value = FechaFin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Estadisticas_VentasXMesResult>("EXEC @returnValue = [dbo].[Custom_Estadisticas_VentasXMes] @FechaIni = @FechaIni, @FechaFin = @FechaFin, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Estado_CuentaResult>> Custom_Estado_CuentaAsync(int? IdEmpresa, int? IdCliente, int? Status, bool? Full, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Full",
                    Value = Full ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Estado_CuentaResult>("EXEC @returnValue = [dbo].[Custom_Estado_Cuenta] @IdEmpresa = @IdEmpresa, @IdCliente = @IdCliente, @Status = @Status, @Full = @Full", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Estado_ReporteEntradaResult>> Custom_Estado_ReporteEntradaAsync(string IdEntrada, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEntrada",
                    Size = 50,
                    Value = IdEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Estado_ReporteEntradaResult>("EXEC @returnValue = [dbo].[Custom_Estado_ReporteEntrada] @IdEntrada = @IdEntrada", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Estado_ReporteSalidaResult>> Custom_Estado_ReporteSalidaAsync(string IdSalida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Estado_ReporteSalidaResult>("EXEC @returnValue = [dbo].[Custom_Estado_ReporteSalida] @IdSalida = @IdSalida", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Custom_ExportacionAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Custom_Exportacion]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_FacturasEmitidasResult>> Custom_FacturasEmitidasAsync(string Ruc, DateTime? FechaInicio, DateTime? FechaCorte, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 15,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaInicio",
                    Value = FechaInicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaCorte",
                    Value = FechaCorte ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_FacturasEmitidasResult>("EXEC @returnValue = [dbo].[Custom_FacturasEmitidas] @Ruc = @Ruc, @FechaInicio = @FechaInicio, @FechaCorte = @FechaCorte", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_FormaPago_BySalidaResult>> Custom_FormaPago_BySalidaAsync(string IdSalida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_FormaPago_BySalidaResult>("EXEC @returnValue = [dbo].[Custom_FormaPago_BySalida] @IdSalida = @IdSalida", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Inventario_ReporteAjusteResult>> Custom_Inventario_ReporteAjusteAsync(int? IdEmpresa, DateTime? FechaDesde, DateTime? FechaHasta, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaDesde",
                    Value = FechaDesde ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHasta",
                    Value = FechaHasta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Inventario_ReporteAjusteResult>("EXEC @returnValue = [dbo].[Custom_Inventario_ReporteAjuste] @IdEmpresa = @IdEmpresa, @FechaDesde = @FechaDesde, @FechaHasta = @FechaHasta", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Inventario_ReporteAjuste2Result>> Custom_Inventario_ReporteAjuste2Async(int? IdEmpresa, DateTime? FechaDesde, DateTime? FechaHasta, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaDesde",
                    Value = FechaDesde ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHasta",
                    Value = FechaHasta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Inventario_ReporteAjuste2Result>("EXEC @returnValue = [dbo].[Custom_Inventario_ReporteAjuste2] @IdEmpresa = @IdEmpresa, @FechaDesde = @FechaDesde, @FechaHasta = @FechaHasta", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Inventario_ValorizadoResult>> Custom_Inventario_ValorizadoAsync(int? IdEmpresa, int? IdMarca, int? IdDivision, int? IdLinea, int? IdCategoria, int? UnidadMedida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMarca",
                    Value = IdMarca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdDivision",
                    Value = IdDivision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLinea",
                    Value = IdLinea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCategoria",
                    Value = IdCategoria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedida",
                    Value = UnidadMedida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Inventario_ValorizadoResult>("EXEC @returnValue = [dbo].[Custom_Inventario_Valorizado] @IdEmpresa = @IdEmpresa, @IdMarca = @IdMarca, @IdDivision = @IdDivision, @IdLinea = @IdLinea, @IdCategoria = @IdCategoria, @UnidadMedida = @UnidadMedida", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Inventario_Valorizado2Result>> Custom_Inventario_Valorizado2Async(int? IdEmpresa, int? IdMarca, int? IdDivision, int? IdLinea, int? IdCategoria, int? UnidadMedida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMarca",
                    Value = IdMarca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdDivision",
                    Value = IdDivision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLinea",
                    Value = IdLinea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCategoria",
                    Value = IdCategoria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedida",
                    Value = UnidadMedida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Inventario_Valorizado2Result>("EXEC @returnValue = [dbo].[Custom_Inventario_Valorizado2] @IdEmpresa = @IdEmpresa, @IdMarca = @IdMarca, @IdDivision = @IdDivision, @IdLinea = @IdLinea, @IdCategoria = @IdCategoria, @UnidadMedida = @UnidadMedida", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Load_DivisionResult>> Custom_Load_DivisionAsync(int? IdEmpresa, string Term, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Term",
                    Size = 20,
                    Value = Term ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Load_DivisionResult>("EXEC @returnValue = [dbo].[Custom_Load_Division] @IdEmpresa = @IdEmpresa, @Term = @Term", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Load_LineaByDivisionResult>> Custom_Load_LineaByDivisionAsync(int? IdEmpresa, int? IdDivision, string Term, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdDivision",
                    Value = IdDivision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Term",
                    Size = 20,
                    Value = Term ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Load_LineaByDivisionResult>("EXEC @returnValue = [dbo].[Custom_Load_LineaByDivision] @IdEmpresa = @IdEmpresa, @IdDivision = @IdDivision, @Term = @Term", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Load_MarcaResult>> Custom_Load_MarcaAsync(int? IdEmpresa, string Term, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Term",
                    Size = 20,
                    Value = Term ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Load_MarcaResult>("EXEC @returnValue = [dbo].[Custom_Load_Marca] @IdEmpresa = @IdEmpresa, @Term = @Term", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_MovimientoInventario_ReportResult>> Custom_MovimientoInventario_ReportAsync(int? IdEmpresa, DateTime? FechaInicio, DateTime? FechaFin, int? IdProducto, string TipoTransaccion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaInicio",
                    Value = FechaInicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFin",
                    Value = FechaFin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 5,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_MovimientoInventario_ReportResult>("EXEC @returnValue = [dbo].[Custom_MovimientoInventario_Report] @IdEmpresa = @IdEmpresa, @FechaInicio = @FechaInicio, @FechaFin = @FechaFin, @IdProducto = @IdProducto, @TipoTransaccion = @TipoTransaccion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_NotaCreditoValor_ByClienteResult>> Custom_NotaCreditoValor_ByClienteAsync(int? IdCliente, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_NotaCreditoValor_ByClienteResult>("EXEC @returnValue = [dbo].[Custom_NotaCreditoValor_ByCliente] @IdCliente = @IdCliente", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Obtener_SecuencialResult>> Custom_Obtener_SecuencialAsync(string RUC, string IdTipoDocumento, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RUC",
                    Size = 20,
                    Value = RUC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoDocumento",
                    Size = 5,
                    Value = IdTipoDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Obtener_SecuencialResult>("EXEC @returnValue = [dbo].[Custom_Obtener_Secuencial] @RUC = @RUC, @IdTipoDocumento = @IdTipoDocumento", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Pantalla_ObtenerPantallasPerfilResult>> Custom_Pantalla_ObtenerPantallasPerfilAsync(string usuario, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "usuario",
                    Size = 50,
                    Value = usuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Pantalla_ObtenerPantallasPerfilResult>("EXEC @returnValue = [dbo].[Custom_Pantalla_ObtenerPantallasPerfil] @usuario = @usuario", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_PlantillaSalidaResult>> Custom_PlantillaSalidaAsync(int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_PlantillaSalidaResult>("EXEC @returnValue = [dbo].[Custom_PlantillaSalida] @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Productos_SearchProductsByLocalResult>> Custom_Productos_SearchProductsByLocalAsync(short? IdEmpresa, int? IdLocal, string SearchTerm, string TipoProducto, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 1000,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoProducto",
                    Size = 10,
                    Value = TipoProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Productos_SearchProductsByLocalResult>("EXEC @returnValue = [dbo].[Custom_Productos_SearchProductsByLocal] @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @SearchTerm = @SearchTerm, @TipoProducto = @TipoProducto", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Productos_SearchProductsByLocalLiteResult>> Custom_Productos_SearchProductsByLocalLiteAsync(short? IdEmpresa, int? IdLocal, string SearchTerm, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 1000,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Productos_SearchProductsByLocalLiteResult>("EXEC @returnValue = [dbo].[Custom_Productos_SearchProductsByLocalLite] @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @SearchTerm = @SearchTerm", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Productos_SearchProductsByLocalLitePruebaResult>> Custom_Productos_SearchProductsByLocalLitePruebaAsync(short? IdEmpresa, int? IdLocal, string SearchTerm, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 1000,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Productos_SearchProductsByLocalLitePruebaResult>("EXEC @returnValue = [dbo].[Custom_Productos_SearchProductsByLocalLitePrueba] @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @SearchTerm = @SearchTerm", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Productos_SearchProductsByLocalLitePrueba2Result>> Custom_Productos_SearchProductsByLocalLitePrueba2Async(short? IdEmpresa, int? IdLocal, string SearchTerm, int? pageNumber, int? pageSize, OutputParameter<int?> totalRecords, OutputParameter<int?> totalPages, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametertotalRecords = new SqlParameter
            {
                ParameterName = "totalRecords",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = totalRecords?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parametertotalPages = new SqlParameter
            {
                ParameterName = "totalPages",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = totalPages?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 1000,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametertotalRecords,
                parametertotalPages,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Productos_SearchProductsByLocalLitePrueba2Result>("EXEC @returnValue = [dbo].[Custom_Productos_SearchProductsByLocalLitePrueba2] @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @SearchTerm = @SearchTerm, @pageNumber = @pageNumber, @pageSize = @pageSize, @totalRecords = @totalRecords OUTPUT, @totalPages = @totalPages OUTPUT", sqlParameters, cancellationToken);

            totalRecords.SetValue(parametertotalRecords.Value);
            totalPages.SetValue(parametertotalPages.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Productos_SearchProductsByLocalPagedResult>> Custom_Productos_SearchProductsByLocalPagedAsync(short? IdEmpresa, int? IdLocal, string SearchTerm, int? PageNumber, int? PageSize, string TipoProducto, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 1000,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoProducto",
                    Size = 10,
                    Value = TipoProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Productos_SearchProductsByLocalPagedResult>("EXEC @returnValue = [dbo].[Custom_Productos_SearchProductsByLocalPaged] @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @SearchTerm = @SearchTerm, @PageNumber = @PageNumber, @PageSize = @PageSize, @TipoProducto = @TipoProducto", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_ProductosDeep_ConsultaResult>> Custom_ProductosDeep_ConsultaAsync(int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_ProductosDeep_ConsultaResult>("EXEC @returnValue = [dbo].[Custom_ProductosDeep_Consulta] @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Ruc_Factura_ComprasResult>> Custom_Ruc_Factura_ComprasAsync(DateTime? FechaInicio, DateTime? FechaCorte, int? IdEmpresa, string Ruc, string IdProveedor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FechaInicio",
                    Value = FechaInicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaCorte",
                    Value = FechaCorte ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Size = 50,
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Ruc_Factura_ComprasResult>("EXEC @returnValue = [dbo].[Custom_Ruc_Factura_Compras] @FechaInicio = @FechaInicio, @FechaCorte = @FechaCorte, @IdEmpresa = @IdEmpresa, @Ruc = @Ruc, @IdProveedor = @IdProveedor", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Ruc_Factura_VentasResult>> Custom_Ruc_Factura_VentasAsync(DateTime? FechaInicio, DateTime? FechaCorte, int? IdEmpresa, string Ruc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FechaInicio",
                    Value = FechaInicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaCorte",
                    Value = FechaCorte ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Ruc_Factura_VentasResult>("EXEC @returnValue = [dbo].[Custom_Ruc_Factura_Ventas] @FechaInicio = @FechaInicio, @FechaCorte = @FechaCorte, @IdEmpresa = @IdEmpresa, @Ruc = @Ruc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Ruc_VentasResult>> Custom_Ruc_VentasAsync(DateTime? FechaInicio, DateTime? FechaCorte, int? IdEmpresa, string Ruc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FechaInicio",
                    Value = FechaInicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaCorte",
                    Value = FechaCorte ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Ruc_VentasResult>("EXEC @returnValue = [dbo].[Custom_Ruc_Ventas] @FechaInicio = @FechaInicio, @FechaCorte = @FechaCorte, @IdEmpresa = @IdEmpresa, @Ruc = @Ruc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Salida_ChangeResult>> Custom_Salida_ChangeAsync(string IdSalidaOld, int? IdEmpresa, int? IdLocal, string TipoTransaccion, string Usuario, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdSalidaOld",
                    Size = 50,
                    Value = IdSalidaOld ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Usuario",
                    Size = 50,
                    Value = Usuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Salida_ChangeResult>("EXEC @returnValue = [dbo].[Custom_Salida_Change] @Id = @Id OUTPUT, @IdSalidaOld = @IdSalidaOld, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @TipoTransaccion = @TipoTransaccion, @Usuario = @Usuario", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Salida_ReporteSalidaResult>> Custom_Salida_ReporteSalidaAsync(string IdSalida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 500,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Salida_ReporteSalidaResult>("EXEC @returnValue = [dbo].[Custom_Salida_ReporteSalida] @IdSalida = @IdSalida", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Salida_ReporteSalidaBodegaResult>> Custom_Salida_ReporteSalidaBodegaAsync(string IdSalida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 500,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Salida_ReporteSalidaBodegaResult>("EXEC @returnValue = [dbo].[Custom_Salida_ReporteSalidaBodega] @IdSalida = @IdSalida", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Salida_ReporteSalidasResult>> Custom_Salida_ReporteSalidasAsync(int? IdEmpresa, DateTime? Desde, DateTime? Hasta, int? IdLocal, string IdVendedor, string TipoTransaccion, int? IdProducto, int? IdDivision, int? IdLinea, int? IdCategoria, int? IdCliente, string Ruc, string EstadoActual, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Desde",
                    Value = Desde ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Hasta",
                    Value = Hasta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdVendedor",
                    Size = 50,
                    Value = IdVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdDivision",
                    Value = IdDivision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLinea",
                    Value = IdLinea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCategoria",
                    Value = IdCategoria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoActual",
                    Size = 50,
                    Value = EstadoActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Salida_ReporteSalidasResult>("EXEC @returnValue = [dbo].[Custom_Salida_ReporteSalidas] @IdEmpresa = @IdEmpresa, @Desde = @Desde, @Hasta = @Hasta, @IdLocal = @IdLocal, @IdVendedor = @IdVendedor, @TipoTransaccion = @TipoTransaccion, @IdProducto = @IdProducto, @IdDivision = @IdDivision, @IdLinea = @IdLinea, @IdCategoria = @IdCategoria, @IdCliente = @IdCliente, @Ruc = @Ruc, @EstadoActual = @EstadoActual", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Salida_SearchSalidaResult>> Custom_Salida_SearchSalidaAsync(int? IdEmpresa, int? IdLocal, string TipoTransaccion, string SearchTerm, string IdVendedor, int? IdCliente, DateTime? FechaInicio, DateTime? FechaFin, string Estado, string TransaccionPadre, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 1000,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdVendedor",
                    Size = 50,
                    Value = IdVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaInicio",
                    Value = FechaInicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFin",
                    Value = FechaFin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Estado",
                    Size = 100,
                    Value = Estado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransaccionPadre",
                    Size = 100,
                    Value = TransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Salida_SearchSalidaResult>("EXEC @returnValue = [dbo].[Custom_Salida_SearchSalida] @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @TipoTransaccion = @TipoTransaccion, @SearchTerm = @SearchTerm, @IdVendedor = @IdVendedor, @IdCliente = @IdCliente, @FechaInicio = @FechaInicio, @FechaFin = @FechaFin, @Estado = @Estado, @TransaccionPadre = @TransaccionPadre", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Salida_SearchSalida2Result>> Custom_Salida_SearchSalida2Async(int? IdEmpresa, int? IdLocal, string TipoTransaccion, string SearchTerm, string IdVendedor, int? IdCliente, DateTime? FechaInicio, DateTime? FechaFin, string Estado, string TransaccionPadre, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 1000,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdVendedor",
                    Size = 50,
                    Value = IdVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaInicio",
                    Value = FechaInicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFin",
                    Value = FechaFin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Estado",
                    Size = 100,
                    Value = Estado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransaccionPadre",
                    Size = 100,
                    Value = TransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Salida_SearchSalida2Result>("EXEC @returnValue = [dbo].[Custom_Salida_SearchSalida2] @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @TipoTransaccion = @TipoTransaccion, @SearchTerm = @SearchTerm, @IdVendedor = @IdVendedor, @IdCliente = @IdCliente, @FechaInicio = @FechaInicio, @FechaFin = @FechaFin, @Estado = @Estado, @TransaccionPadre = @TransaccionPadre", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Stock_CostoPromedioPonderadoResult>> Custom_Stock_CostoPromedioPonderadoAsync(string Tipo, int? IdEmpresa, int? IdProducto, int? IdLocal, string IdSalidaEntrada, string IdDetalle, decimal? Cantidad, decimal? ValorUnitario, int? IdTipoUnidad, short? IdEstado, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "Tipo",
                    Size = 2,
                    Value = Tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalidaEntrada",
                    Size = 50,
                    Value = IdSalidaEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalle",
                    Size = 50,
                    Value = IdDetalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorUnitario",
                    Precision = 18,
                    Scale = 4,
                    Value = ValorUnitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Stock_CostoPromedioPonderadoResult>("EXEC @returnValue = [dbo].[Custom_Stock_CostoPromedioPonderado] @Id = @Id OUTPUT, @Tipo = @Tipo, @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @IdLocal = @IdLocal, @IdSalidaEntrada = @IdSalidaEntrada, @IdDetalle = @IdDetalle, @Cantidad = @Cantidad, @ValorUnitario = @ValorUnitario, @IdTipoUnidad = @IdTipoUnidad, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Stock_CostoPromedioPonderadoBUResult>> Custom_Stock_CostoPromedioPonderadoBUAsync(string Tipo, int? IdEmpresa, int? IdProducto, int? IdLocal, string IdSalidaEntrada, string IdDetalle, decimal? Cantidad, decimal? ValorUnitario, int? IdTipoUnidad, short? IdEstado, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "Tipo",
                    Size = 1,
                    Value = Tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalidaEntrada",
                    Size = 50,
                    Value = IdSalidaEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalle",
                    Size = 50,
                    Value = IdDetalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorUnitario",
                    Precision = 18,
                    Scale = 4,
                    Value = ValorUnitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Stock_CostoPromedioPonderadoBUResult>("EXEC @returnValue = [dbo].[Custom_Stock_CostoPromedioPonderadoBU] @Id = @Id OUTPUT, @Tipo = @Tipo, @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @IdLocal = @IdLocal, @IdSalidaEntrada = @IdSalidaEntrada, @IdDetalle = @IdDetalle, @Cantidad = @Cantidad, @ValorUnitario = @ValorUnitario, @IdTipoUnidad = @IdTipoUnidad, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Stock_CostoPromedioPonderadoPruebaResult>> Custom_Stock_CostoPromedioPonderadoPruebaAsync(string Tipo, int? IdEmpresa, int? IdProducto, int? IdLocal, string IdSalidaEntrada, string IdDetalle, decimal? Cantidad, decimal? ValorUnitario, int? IdTipoUnidad, short? IdEstado, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "Tipo",
                    Size = 2,
                    Value = Tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalidaEntrada",
                    Size = 50,
                    Value = IdSalidaEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalle",
                    Size = 50,
                    Value = IdDetalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorUnitario",
                    Precision = 18,
                    Scale = 4,
                    Value = ValorUnitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Stock_CostoPromedioPonderadoPruebaResult>("EXEC @returnValue = [dbo].[Custom_Stock_CostoPromedioPonderadoPrueba] @Id = @Id OUTPUT, @Tipo = @Tipo, @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @IdLocal = @IdLocal, @IdSalidaEntrada = @IdSalidaEntrada, @IdDetalle = @IdDetalle, @Cantidad = @Cantidad, @ValorUnitario = @ValorUnitario, @IdTipoUnidad = @IdTipoUnidad, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Stock_CostoPromedioPonderadoXXResult>> Custom_Stock_CostoPromedioPonderadoXXAsync(string Tipo, int? IdEmpresa, int? IdProducto, int? IdLocal, string IdSalidaEntrada, string IdDetalle, decimal? Cantidad, decimal? ValorUnitario, int? IdTipoUnidad, short? IdEstado, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "Tipo",
                    Size = 2,
                    Value = Tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalidaEntrada",
                    Size = 50,
                    Value = IdSalidaEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalle",
                    Size = 50,
                    Value = IdDetalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorUnitario",
                    Precision = 18,
                    Scale = 4,
                    Value = ValorUnitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Stock_CostoPromedioPonderadoXXResult>("EXEC @returnValue = [dbo].[Custom_Stock_CostoPromedioPonderadoXX] @Id = @Id OUTPUT, @Tipo = @Tipo, @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @IdLocal = @IdLocal, @IdSalidaEntrada = @IdSalidaEntrada, @IdDetalle = @IdDetalle, @Cantidad = @Cantidad, @ValorUnitario = @ValorUnitario, @IdTipoUnidad = @IdTipoUnidad, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Stock_KardexReportResult>> Custom_Stock_KardexReportAsync(int? IdEmpresa, int? IdProducto, int? IdLocal, DateTime? FechaDesde, DateTime? FechaHasta, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaDesde",
                    Value = FechaDesde ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHasta",
                    Value = FechaHasta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Stock_KardexReportResult>("EXEC @returnValue = [dbo].[Custom_Stock_KardexReport] @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @IdLocal = @IdLocal, @FechaDesde = @FechaDesde, @FechaHasta = @FechaHasta", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Stock_RecrearCarritoResult>> Custom_Stock_RecrearCarritoAsync(int? IdEmpresa, string IdProducto, string IdSalida, int? IdLocal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Size = -1,
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Stock_RecrearCarritoResult>("EXEC @returnValue = [dbo].[Custom_Stock_RecrearCarrito] @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @IdSalida = @IdSalida, @IdLocal = @IdLocal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Stock_RecrearCarrito2Result>> Custom_Stock_RecrearCarrito2Async(int? IdEmpresa, string IdProducto, string IdSalida, int? IdLocal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Size = -1,
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Stock_RecrearCarrito2Result>("EXEC @returnValue = [dbo].[Custom_Stock_RecrearCarrito2] @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @IdSalida = @IdSalida, @IdLocal = @IdLocal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Stock_SaldoInventarioResult>> Custom_Stock_SaldoInventarioAsync(int? IdEmpresa, string IdProducto, int? IdLocal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Size = -1,
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Stock_SaldoInventarioResult>("EXEC @returnValue = [dbo].[Custom_Stock_SaldoInventario] @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @IdLocal = @IdLocal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Stock_SaldoInventario2Result>> Custom_Stock_SaldoInventario2Async(int? IdEmpresa, string IdProducto, int? IdLocal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Size = -1,
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Stock_SaldoInventario2Result>("EXEC @returnValue = [dbo].[Custom_Stock_SaldoInventario2] @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @IdLocal = @IdLocal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Stock_SaldoInventarioReportResult>> Custom_Stock_SaldoInventarioReportAsync(int? IdEmpresa, int? IdProducto, int? IdLocal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Stock_SaldoInventarioReportResult>("EXEC @returnValue = [dbo].[Custom_Stock_SaldoInventarioReport] @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @IdLocal = @IdLocal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Stock_SaldoInventarioReport2Result>> Custom_Stock_SaldoInventarioReport2Async(int? IdEmpresa, int? IdProducto, int? IdLocal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Stock_SaldoInventarioReport2Result>("EXEC @returnValue = [dbo].[Custom_Stock_SaldoInventarioReport2] @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @IdLocal = @IdLocal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Stock_SaldoInventarioReportBodGOResult>> Custom_Stock_SaldoInventarioReportBodGOAsync(int? IdEmpresa, string InicioSesion, int? IdLocal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InicioSesion",
                    Size = 50,
                    Value = InicioSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Stock_SaldoInventarioReportBodGOResult>("EXEC @returnValue = [dbo].[Custom_Stock_SaldoInventarioReportBodGO] @IdEmpresa = @IdEmpresa, @InicioSesion = @InicioSesion, @IdLocal = @IdLocal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Stock_SaldoInventarioReportCliGOResult>> Custom_Stock_SaldoInventarioReportCliGOAsync(int? IdProducto, int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Stock_SaldoInventarioReportCliGOResult>("EXEC @returnValue = [dbo].[Custom_Stock_SaldoInventarioReportCliGO] @IdProducto = @IdProducto, @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Stock_SaldoInventarioReportGOResult>> Custom_Stock_SaldoInventarioReportGOAsync(int? IdEmpresa, string InicioSesion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InicioSesion",
                    Size = 50,
                    Value = InicioSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Stock_SaldoInventarioReportGOResult>("EXEC @returnValue = [dbo].[Custom_Stock_SaldoInventarioReportGO] @IdEmpresa = @IdEmpresa, @InicioSesion = @InicioSesion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Stock_SaldoInventarioReportProdGOResult>> Custom_Stock_SaldoInventarioReportProdGOAsync(int? IdEmpresa, string InicioSesion, int? IdProducto, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InicioSesion",
                    Size = 50,
                    Value = InicioSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Stock_SaldoInventarioReportProdGOResult>("EXEC @returnValue = [dbo].[Custom_Stock_SaldoInventarioReportProdGO] @IdEmpresa = @IdEmpresa, @InicioSesion = @InicioSesion, @IdProducto = @IdProducto", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Stock_SaldoInventarioReportRespaldoRResult>> Custom_Stock_SaldoInventarioReportRespaldoRAsync(int? IdEmpresa, int? IdProducto, int? IdLocal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Stock_SaldoInventarioReportRespaldoRResult>("EXEC @returnValue = [dbo].[Custom_Stock_SaldoInventarioReportRespaldoR] @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @IdLocal = @IdLocal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_TopSellersResult>> Custom_TopSellersAsync(int? IdEmpresa, int? Meses, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Meses",
                    Value = Meses ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_TopSellersResult>("EXEC @returnValue = [dbo].[Custom_TopSellers] @IdEmpresa = @IdEmpresa, @Meses = @Meses", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Transfer_SearchResult>> Custom_Transfer_SearchAsync(string ID, string TipoTransaccion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ID",
                    Size = 50,
                    Value = ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Transfer_SearchResult>("EXEC @returnValue = [dbo].[Custom_Transfer_Search] @ID = @ID, @TipoTransaccion = @TipoTransaccion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Usuario_LoadByTokenResult>> Custom_Usuario_LoadByTokenAsync(string Token, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Token",
                    Size = 50,
                    Value = Token ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Usuario_LoadByTokenResult>("EXEC @returnValue = [dbo].[Custom_Usuario_LoadByToken] @Token = @Token", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_Usuario_SearchAllResult>> Custom_Usuario_SearchAllAsync(int? IdEmpresa, string SearchTerm, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 100,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_Usuario_SearchAllResult>("EXEC @returnValue = [dbo].[Custom_Usuario_SearchAll] @IdEmpresa = @IdEmpresa, @SearchTerm = @SearchTerm", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_VentasByProductoResult>> Custom_VentasByProductoAsync(int? IdEmpresa, int? IdLocal, DateTime? Desde, DateTime? Hasta, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Desde",
                    Value = Desde ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Hasta",
                    Value = Hasta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_VentasByProductoResult>("EXEC @returnValue = [dbo].[Custom_VentasByProducto] @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @Desde = @Desde, @Hasta = @Hasta", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Custom_VentasGenerales_ReportResult>> Custom_VentasGenerales_ReportAsync(DateTime? FechaInicio, DateTime? FechaCorte, int? IdEmpresa, string Ruc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FechaInicio",
                    Value = FechaInicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaCorte",
                    Value = FechaCorte ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Custom_VentasGenerales_ReportResult>("EXEC @returnValue = [dbo].[Custom_VentasGenerales_Report] @FechaInicio = @FechaInicio, @FechaCorte = @FechaCorte, @IdEmpresa = @IdEmpresa, @Ruc = @Ruc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleCobro_DeepFindByAllResult>> DetalleCobro_DeepFindByAllAsync(int? Id, string IdCobroDebito, int? IdCuentaPorCobrar, int? IdMedioPago, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCobroDebito",
                    Size = 50,
                    Value = IdCobroDebito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCuentaPorCobrar",
                    Value = IdCuentaPorCobrar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMedioPago",
                    Value = IdMedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleCobro_DeepFindByAllResult>("EXEC @returnValue = [dbo].[DetalleCobro_DeepFindByAll] @Id = @Id, @IdCobroDebito = @IdCobroDebito, @IdCuentaPorCobrar = @IdCuentaPorCobrar, @IdMedioPago = @IdMedioPago, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleCobro_DeepFindByAll2Async(int? Id, string IdCobroDebito, int? IdCuentaPorCobrar, int? IdMedioPago, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCobroDebito",
                    Size = 50,
                    Value = IdCobroDebito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCuentaPorCobrar",
                    Value = IdCuentaPorCobrar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMedioPago",
                    Value = IdMedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleCobro_DeepFindByAll2] @Id = @Id, @IdCobroDebito = @IdCobroDebito, @IdCuentaPorCobrar = @IdCuentaPorCobrar, @IdMedioPago = @IdMedioPago, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleCobro_DeepFindByAll3Result>> DetalleCobro_DeepFindByAll3Async(int? Id, string IdCobroDebito, int? IdCuentaPorCobrar, int? IdMedioPago, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCobroDebito",
                    Size = 50,
                    Value = IdCobroDebito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCuentaPorCobrar",
                    Value = IdCuentaPorCobrar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMedioPago",
                    Value = IdMedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleCobro_DeepFindByAll3Result>("EXEC @returnValue = [dbo].[DetalleCobro_DeepFindByAll3] @Id = @Id, @IdCobroDebito = @IdCobroDebito, @IdCuentaPorCobrar = @IdCuentaPorCobrar, @IdMedioPago = @IdMedioPago, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleCobro_DeepFindByAllPagedAsync(int? Id, string IdCobroDebito, int? IdCuentaPorCobrar, int? IdMedioPago, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCobroDebito",
                    Size = 50,
                    Value = IdCobroDebito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCuentaPorCobrar",
                    Value = IdCuentaPorCobrar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMedioPago",
                    Value = IdMedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleCobro_DeepFindByAllPaged] @Id = @Id, @IdCobroDebito = @IdCobroDebito, @IdCuentaPorCobrar = @IdCuentaPorCobrar, @IdMedioPago = @IdMedioPago, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleCobro_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleCobro_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleCobro_FindByAllResult>> DetalleCobro_FindByAllAsync(int? Id, string IdCobroDebito, int? IdCuentaPorCobrar, int? IdMedioPago, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCobroDebito",
                    Size = 50,
                    Value = IdCobroDebito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCuentaPorCobrar",
                    Value = IdCuentaPorCobrar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMedioPago",
                    Value = IdMedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleCobro_FindByAllResult>("EXEC @returnValue = [dbo].[DetalleCobro_FindByAll] @Id = @Id, @IdCobroDebito = @IdCobroDebito, @IdCuentaPorCobrar = @IdCuentaPorCobrar, @IdMedioPago = @IdMedioPago, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleCobro_FindByAllPagedResult>> DetalleCobro_FindByAllPagedAsync(int? Id, string IdCobroDebito, int? IdCuentaPorCobrar, int? IdMedioPago, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCobroDebito",
                    Size = 50,
                    Value = IdCobroDebito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCuentaPorCobrar",
                    Value = IdCuentaPorCobrar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMedioPago",
                    Value = IdMedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleCobro_FindByAllPagedResult>("EXEC @returnValue = [dbo].[DetalleCobro_FindByAllPaged] @Id = @Id, @IdCobroDebito = @IdCobroDebito, @IdCuentaPorCobrar = @IdCuentaPorCobrar, @IdMedioPago = @IdMedioPago, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleCobro_InsertAsync(string IdCobroDebito, int? IdCuentaPorCobrar, int? IdMedioPago, decimal? Valor, string descripcion, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? IdLocal, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdCobroDebito",
                    Size = 50,
                    Value = IdCobroDebito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCuentaPorCobrar",
                    Value = IdCuentaPorCobrar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMedioPago",
                    Value = IdMedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "descripcion",
                    Size = 500,
                    Value = descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleCobro_Insert] @Id = @Id OUTPUT, @IdCobroDebito = @IdCobroDebito, @IdCuentaPorCobrar = @IdCuentaPorCobrar, @IdMedioPago = @IdMedioPago, @Valor = @Valor, @descripcion = @descripcion, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdLocal = @IdLocal", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleCobro_LoadAllResult>> DetalleCobro_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleCobro_LoadAllResult>("EXEC @returnValue = [dbo].[DetalleCobro_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleCobro_LoadByPKResult>> DetalleCobro_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleCobro_LoadByPKResult>("EXEC @returnValue = [dbo].[DetalleCobro_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleCobro_UpdateAsync(int? Id, string IdCobroDebito, int? IdCuentaPorCobrar, int? IdMedioPago, decimal? Valor, string descripcion, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? IdLocal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCobroDebito",
                    Size = 50,
                    Value = IdCobroDebito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCuentaPorCobrar",
                    Value = IdCuentaPorCobrar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMedioPago",
                    Value = IdMedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "descripcion",
                    Size = 500,
                    Value = descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleCobro_Update] @Id = @Id, @IdCobroDebito = @IdCobroDebito, @IdCuentaPorCobrar = @IdCuentaPorCobrar, @IdMedioPago = @IdMedioPago, @Valor = @Valor, @descripcion = @descripcion, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdLocal = @IdLocal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleDocumento_DeepFindByAllResult>> DetalleDocumento_DeepFindByAllAsync(long? Id, string IdDocumento, int? IdProducto, decimal? Precio, decimal? Cantidad, decimal? Descuento, decimal? SubtotalSinImpuesto, string TipoIva, string TipoIce, decimal? Iva, decimal? Ice, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdDocumento",
                    Size = 50,
                    Value = IdDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 4,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 4,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SubtotalSinImpuesto",
                    Precision = 38,
                    Scale = 8,
                    Value = SubtotalSinImpuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIva",
                    Size = 3,
                    Value = TipoIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIce",
                    Size = 3,
                    Value = TipoIce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Iva",
                    Precision = 18,
                    Scale = 2,
                    Value = Iva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Ice",
                    Precision = 18,
                    Scale = 2,
                    Value = Ice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleDocumento_DeepFindByAllResult>("EXEC @returnValue = [dbo].[DetalleDocumento_DeepFindByAll] @Id = @Id, @IdDocumento = @IdDocumento, @IdProducto = @IdProducto, @Precio = @Precio, @Cantidad = @Cantidad, @Descuento = @Descuento, @SubtotalSinImpuesto = @SubtotalSinImpuesto, @TipoIva = @TipoIva, @TipoIce = @TipoIce, @Iva = @Iva, @Ice = @Ice, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleDocumento_DeepFindByAllPagedAsync(long? Id, string IdDocumento, int? IdProducto, decimal? Precio, decimal? Cantidad, decimal? Descuento, decimal? SubtotalSinImpuesto, string TipoIva, string TipoIce, decimal? Iva, decimal? Ice, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdDocumento",
                    Size = 50,
                    Value = IdDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 4,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 4,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SubtotalSinImpuesto",
                    Precision = 38,
                    Scale = 8,
                    Value = SubtotalSinImpuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIva",
                    Size = 3,
                    Value = TipoIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIce",
                    Size = 3,
                    Value = TipoIce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Iva",
                    Precision = 18,
                    Scale = 2,
                    Value = Iva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Ice",
                    Precision = 18,
                    Scale = 2,
                    Value = Ice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleDocumento_DeepFindByAllPaged] @Id = @Id, @IdDocumento = @IdDocumento, @IdProducto = @IdProducto, @Precio = @Precio, @Cantidad = @Cantidad, @Descuento = @Descuento, @SubtotalSinImpuesto = @SubtotalSinImpuesto, @TipoIva = @TipoIva, @TipoIce = @TipoIce, @Iva = @Iva, @Ice = @Ice, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleDocumento_DeleteAsync(long? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleDocumento_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleDocumento_FindByAllResult>> DetalleDocumento_FindByAllAsync(long? Id, string IdDocumento, int? IdProducto, decimal? Precio, decimal? Cantidad, decimal? Descuento, decimal? SubtotalSinImpuesto, string TipoIva, string TipoIce, decimal? Iva, decimal? Ice, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdDocumento",
                    Size = 50,
                    Value = IdDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 4,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 4,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SubtotalSinImpuesto",
                    Precision = 38,
                    Scale = 8,
                    Value = SubtotalSinImpuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIva",
                    Size = 3,
                    Value = TipoIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIce",
                    Size = 3,
                    Value = TipoIce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Iva",
                    Precision = 18,
                    Scale = 2,
                    Value = Iva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Ice",
                    Precision = 18,
                    Scale = 2,
                    Value = Ice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleDocumento_FindByAllResult>("EXEC @returnValue = [dbo].[DetalleDocumento_FindByAll] @Id = @Id, @IdDocumento = @IdDocumento, @IdProducto = @IdProducto, @Precio = @Precio, @Cantidad = @Cantidad, @Descuento = @Descuento, @SubtotalSinImpuesto = @SubtotalSinImpuesto, @TipoIva = @TipoIva, @TipoIce = @TipoIce, @Iva = @Iva, @Ice = @Ice, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleDocumento_FindByAllPagedResult>> DetalleDocumento_FindByAllPagedAsync(long? Id, string IdDocumento, int? IdProducto, decimal? Precio, decimal? Cantidad, decimal? Descuento, decimal? SubtotalSinImpuesto, string TipoIva, string TipoIce, decimal? Iva, decimal? Ice, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdDocumento",
                    Size = 50,
                    Value = IdDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 4,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 4,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SubtotalSinImpuesto",
                    Precision = 38,
                    Scale = 8,
                    Value = SubtotalSinImpuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIva",
                    Size = 3,
                    Value = TipoIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIce",
                    Size = 3,
                    Value = TipoIce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Iva",
                    Precision = 18,
                    Scale = 2,
                    Value = Iva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Ice",
                    Precision = 18,
                    Scale = 2,
                    Value = Ice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleDocumento_FindByAllPagedResult>("EXEC @returnValue = [dbo].[DetalleDocumento_FindByAllPaged] @Id = @Id, @IdDocumento = @IdDocumento, @IdProducto = @IdProducto, @Precio = @Precio, @Cantidad = @Cantidad, @Descuento = @Descuento, @SubtotalSinImpuesto = @SubtotalSinImpuesto, @TipoIva = @TipoIva, @TipoIce = @TipoIce, @Iva = @Iva, @Ice = @Ice, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleDocumento_InsertAsync(string IdDocumento, int? IdProducto, decimal? Precio, decimal? Cantidad, decimal? Descuento, string TipoIva, string TipoIce, decimal? Iva, decimal? Ice, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<long?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdDocumento",
                    Size = 50,
                    Value = IdDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 4,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 4,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIva",
                    Size = 3,
                    Value = TipoIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIce",
                    Size = 3,
                    Value = TipoIce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Iva",
                    Precision = 18,
                    Scale = 2,
                    Value = Iva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Ice",
                    Precision = 18,
                    Scale = 2,
                    Value = Ice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleDocumento_Insert] @Id = @Id OUTPUT, @IdDocumento = @IdDocumento, @IdProducto = @IdProducto, @Precio = @Precio, @Cantidad = @Cantidad, @Descuento = @Descuento, @TipoIva = @TipoIva, @TipoIce = @TipoIce, @Iva = @Iva, @Ice = @Ice, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleDocumento_LoadAllResult>> DetalleDocumento_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleDocumento_LoadAllResult>("EXEC @returnValue = [dbo].[DetalleDocumento_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleDocumento_LoadByPKResult>> DetalleDocumento_LoadByPKAsync(long? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleDocumento_LoadByPKResult>("EXEC @returnValue = [dbo].[DetalleDocumento_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleDocumento_UpdateAsync(long? Id, string IdDocumento, int? IdProducto, decimal? Precio, decimal? Cantidad, decimal? Descuento, decimal? SubtotalSinImpuesto, string TipoIva, string TipoIce, decimal? Iva, decimal? Ice, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdDocumento",
                    Size = 50,
                    Value = IdDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 4,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 4,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SubtotalSinImpuesto",
                    Precision = 38,
                    Scale = 8,
                    Value = SubtotalSinImpuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIva",
                    Size = 3,
                    Value = TipoIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIce",
                    Size = 3,
                    Value = TipoIce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Iva",
                    Precision = 18,
                    Scale = 2,
                    Value = Iva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Ice",
                    Precision = 18,
                    Scale = 2,
                    Value = Ice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleDocumento_Update] @Id = @Id, @IdDocumento = @IdDocumento, @IdProducto = @IdProducto, @Precio = @Precio, @Cantidad = @Cantidad, @Descuento = @Descuento, @SubtotalSinImpuesto = @SubtotalSinImpuesto, @TipoIva = @TipoIva, @TipoIce = @TipoIce, @Iva = @Iva, @Ice = @Ice, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleEntrada_DeepFindByAllResult>> DetalleEntrada_DeepFindByAllAsync(string Id, int? IdEmpresa, string Periodo, DateTime? Fecha, string TipoTransaccion, string IdEntrada, int? IdProducto, int? IdProveedor, int? IdLocal, decimal? ValorFOB, decimal? FactorDistribucion, decimal? CostoUnitarioImportacion, decimal? Cantidad, int? IdTipoUnidad, decimal? CostoVenta, decimal? Descuento, decimal? ValorAdicional, decimal? Subtotal, DateTime? FechaFabricacion, DateTime? FechaExpiracion, string Lote, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntrada",
                    Size = 50,
                    Value = IdEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ValorFOB",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorFOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FactorDistribucion",
                    Precision = 18,
                    Scale = 4,
                    Value = FactorDistribucion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CostoUnitarioImportacion",
                    Precision = 18,
                    Scale = 2,
                    Value = CostoUnitarioImportacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoVenta",
                    Precision = 18,
                    Scale = 2,
                    Value = CostoVenta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorAdicional",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorAdicional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal",
                    Precision = 38,
                    Scale = 4,
                    Value = Subtotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFabricacion",
                    Value = FechaFabricacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaExpiracion",
                    Value = FechaExpiracion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Lote",
                    Size = 50,
                    Value = Lote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleEntrada_DeepFindByAllResult>("EXEC @returnValue = [dbo].[DetalleEntrada_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdEntrada = @IdEntrada, @IdProducto = @IdProducto, @IdProveedor = @IdProveedor, @IdLocal = @IdLocal, @ValorFOB = @ValorFOB, @FactorDistribucion = @FactorDistribucion, @CostoUnitarioImportacion = @CostoUnitarioImportacion, @Cantidad = @Cantidad, @IdTipoUnidad = @IdTipoUnidad, @CostoVenta = @CostoVenta, @Descuento = @Descuento, @ValorAdicional = @ValorAdicional, @Subtotal = @Subtotal, @FechaFabricacion = @FechaFabricacion, @FechaExpiracion = @FechaExpiracion, @Lote = @Lote, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleEntrada_DeepFindByAllPagedAsync(string Id, int? IdEmpresa, string Periodo, DateTime? Fecha, string TipoTransaccion, string IdEntrada, int? IdProducto, int? IdProveedor, int? IdLocal, decimal? ValorFOB, decimal? FactorDistribucion, decimal? CostoUnitarioImportacion, decimal? Cantidad, int? IdTipoUnidad, decimal? CostoVenta, decimal? Descuento, decimal? ValorAdicional, decimal? Subtotal, DateTime? FechaFabricacion, DateTime? FechaExpiracion, string Lote, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntrada",
                    Size = 50,
                    Value = IdEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ValorFOB",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorFOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FactorDistribucion",
                    Precision = 18,
                    Scale = 4,
                    Value = FactorDistribucion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CostoUnitarioImportacion",
                    Precision = 18,
                    Scale = 2,
                    Value = CostoUnitarioImportacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoVenta",
                    Precision = 18,
                    Scale = 2,
                    Value = CostoVenta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorAdicional",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorAdicional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal",
                    Precision = 38,
                    Scale = 4,
                    Value = Subtotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFabricacion",
                    Value = FechaFabricacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaExpiracion",
                    Value = FechaExpiracion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Lote",
                    Size = 50,
                    Value = Lote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleEntrada_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdEntrada = @IdEntrada, @IdProducto = @IdProducto, @IdProveedor = @IdProveedor, @IdLocal = @IdLocal, @ValorFOB = @ValorFOB, @FactorDistribucion = @FactorDistribucion, @CostoUnitarioImportacion = @CostoUnitarioImportacion, @Cantidad = @Cantidad, @IdTipoUnidad = @IdTipoUnidad, @CostoVenta = @CostoVenta, @Descuento = @Descuento, @ValorAdicional = @ValorAdicional, @Subtotal = @Subtotal, @FechaFabricacion = @FechaFabricacion, @FechaExpiracion = @FechaExpiracion, @Lote = @Lote, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleEntrada_DeleteAsync(string Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleEntrada_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleEntrada_FindByAllResult>> DetalleEntrada_FindByAllAsync(string Id, int? IdEmpresa, string Periodo, DateTime? Fecha, string TipoTransaccion, string IdEntrada, int? IdProducto, int? IdProveedor, int? IdLocal, decimal? ValorFOB, decimal? FactorDistribucion, decimal? CostoUnitarioImportacion, decimal? Cantidad, int? IdTipoUnidad, decimal? CostoVenta, decimal? Descuento, decimal? ValorAdicional, decimal? Subtotal, DateTime? FechaFabricacion, DateTime? FechaExpiracion, string Lote, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntrada",
                    Size = 50,
                    Value = IdEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ValorFOB",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorFOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FactorDistribucion",
                    Precision = 18,
                    Scale = 4,
                    Value = FactorDistribucion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CostoUnitarioImportacion",
                    Precision = 18,
                    Scale = 2,
                    Value = CostoUnitarioImportacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoVenta",
                    Precision = 18,
                    Scale = 2,
                    Value = CostoVenta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorAdicional",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorAdicional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal",
                    Precision = 38,
                    Scale = 4,
                    Value = Subtotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFabricacion",
                    Value = FechaFabricacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaExpiracion",
                    Value = FechaExpiracion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Lote",
                    Size = 50,
                    Value = Lote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleEntrada_FindByAllResult>("EXEC @returnValue = [dbo].[DetalleEntrada_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdEntrada = @IdEntrada, @IdProducto = @IdProducto, @IdProveedor = @IdProveedor, @IdLocal = @IdLocal, @ValorFOB = @ValorFOB, @FactorDistribucion = @FactorDistribucion, @CostoUnitarioImportacion = @CostoUnitarioImportacion, @Cantidad = @Cantidad, @IdTipoUnidad = @IdTipoUnidad, @CostoVenta = @CostoVenta, @Descuento = @Descuento, @ValorAdicional = @ValorAdicional, @Subtotal = @Subtotal, @FechaFabricacion = @FechaFabricacion, @FechaExpiracion = @FechaExpiracion, @Lote = @Lote, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleEntrada_FindByAllPagedResult>> DetalleEntrada_FindByAllPagedAsync(string Id, int? IdEmpresa, string Periodo, DateTime? Fecha, string TipoTransaccion, string IdEntrada, int? IdProducto, int? IdProveedor, int? IdLocal, decimal? ValorFOB, decimal? FactorDistribucion, decimal? CostoUnitarioImportacion, decimal? Cantidad, int? IdTipoUnidad, decimal? CostoVenta, decimal? Descuento, decimal? ValorAdicional, decimal? Subtotal, DateTime? FechaFabricacion, DateTime? FechaExpiracion, string Lote, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntrada",
                    Size = 50,
                    Value = IdEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ValorFOB",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorFOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FactorDistribucion",
                    Precision = 18,
                    Scale = 4,
                    Value = FactorDistribucion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CostoUnitarioImportacion",
                    Precision = 18,
                    Scale = 2,
                    Value = CostoUnitarioImportacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoVenta",
                    Precision = 18,
                    Scale = 2,
                    Value = CostoVenta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorAdicional",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorAdicional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal",
                    Precision = 38,
                    Scale = 4,
                    Value = Subtotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFabricacion",
                    Value = FechaFabricacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaExpiracion",
                    Value = FechaExpiracion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Lote",
                    Size = 50,
                    Value = Lote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleEntrada_FindByAllPagedResult>("EXEC @returnValue = [dbo].[DetalleEntrada_FindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdEntrada = @IdEntrada, @IdProducto = @IdProducto, @IdProveedor = @IdProveedor, @IdLocal = @IdLocal, @ValorFOB = @ValorFOB, @FactorDistribucion = @FactorDistribucion, @CostoUnitarioImportacion = @CostoUnitarioImportacion, @Cantidad = @Cantidad, @IdTipoUnidad = @IdTipoUnidad, @CostoVenta = @CostoVenta, @Descuento = @Descuento, @ValorAdicional = @ValorAdicional, @Subtotal = @Subtotal, @FechaFabricacion = @FechaFabricacion, @FechaExpiracion = @FechaExpiracion, @Lote = @Lote, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleEntrada_InsertAsync(int? IdEmpresa, string Periodo, DateTime? Fecha, string TipoTransaccion, string IdEntrada, int? IdProducto, int? IdProveedor, int? IdLocal, decimal? ValorFOB, decimal? FactorDistribucion, decimal? CostoUnitarioImportacion, decimal? Cantidad, int? IdTipoUnidad, decimal? CostoVenta, decimal? Descuento, decimal? ValorAdicional, DateTime? FechaFabricacion, DateTime? FechaExpiracion, string Lote, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, short? Estado, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntrada",
                    Size = 50,
                    Value = IdEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ValorFOB",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorFOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FactorDistribucion",
                    Precision = 18,
                    Scale = 4,
                    Value = FactorDistribucion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CostoUnitarioImportacion",
                    Precision = 18,
                    Scale = 2,
                    Value = CostoUnitarioImportacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoVenta",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoVenta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorAdicional",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorAdicional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFabricacion",
                    Value = FechaFabricacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaExpiracion",
                    Value = FechaExpiracion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Lote",
                    Size = 50,
                    Value = Lote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Estado",
                    Value = Estado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleEntrada_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdEntrada = @IdEntrada, @IdProducto = @IdProducto, @IdProveedor = @IdProveedor, @IdLocal = @IdLocal, @ValorFOB = @ValorFOB, @FactorDistribucion = @FactorDistribucion, @CostoUnitarioImportacion = @CostoUnitarioImportacion, @Cantidad = @Cantidad, @IdTipoUnidad = @IdTipoUnidad, @CostoVenta = @CostoVenta, @Descuento = @Descuento, @ValorAdicional = @ValorAdicional, @FechaFabricacion = @FechaFabricacion, @FechaExpiracion = @FechaExpiracion, @Lote = @Lote, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Estado = @Estado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleEntrada_LoadAllResult>> DetalleEntrada_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleEntrada_LoadAllResult>("EXEC @returnValue = [dbo].[DetalleEntrada_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleEntrada_LoadByPKResult>> DetalleEntrada_LoadByPKAsync(string Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleEntrada_LoadByPKResult>("EXEC @returnValue = [dbo].[DetalleEntrada_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleEntrada_UpdateAsync(string Id, int? IdEmpresa, string Periodo, DateTime? Fecha, string TipoTransaccion, string IdEntrada, int? IdProducto, int? IdProveedor, int? IdLocal, decimal? ValorFOB, decimal? FactorDistribucion, decimal? CostoUnitarioImportacion, decimal? Cantidad, int? IdTipoUnidad, decimal? CostoVenta, decimal? Descuento, decimal? ValorAdicional, decimal? Subtotal, DateTime? FechaFabricacion, DateTime? FechaExpiracion, string Lote, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntrada",
                    Size = 50,
                    Value = IdEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ValorFOB",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorFOB ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FactorDistribucion",
                    Precision = 18,
                    Scale = 2,
                    Value = FactorDistribucion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CostoUnitarioImportacion",
                    Precision = 18,
                    Scale = 2,
                    Value = CostoUnitarioImportacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoVenta",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoVenta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorAdicional",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorAdicional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal",
                    Precision = 38,
                    Scale = 6,
                    Value = Subtotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFabricacion",
                    Value = FechaFabricacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaExpiracion",
                    Value = FechaExpiracion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Lote",
                    Size = 50,
                    Value = Lote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleEntrada_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdEntrada = @IdEntrada, @IdProducto = @IdProducto, @IdProveedor = @IdProveedor, @IdLocal = @IdLocal, @ValorFOB = @ValorFOB, @FactorDistribucion = @FactorDistribucion, @CostoUnitarioImportacion = @CostoUnitarioImportacion, @Cantidad = @Cantidad, @IdTipoUnidad = @IdTipoUnidad, @CostoVenta = @CostoVenta, @Descuento = @Descuento, @ValorAdicional = @ValorAdicional, @Subtotal = @Subtotal, @FechaFabricacion = @FechaFabricacion, @FechaExpiracion = @FechaExpiracion, @Lote = @Lote, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleMedioCobro_DeepFindByAllResult>> DetalleMedioCobro_DeepFindByAllAsync(int? Id, string IdCobroDebito, int? IdMedioPago, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCobroDebito",
                    Size = 150,
                    Value = IdCobroDebito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdMedioPago",
                    Value = IdMedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleMedioCobro_DeepFindByAllResult>("EXEC @returnValue = [dbo].[DetalleMedioCobro_DeepFindByAll] @Id = @Id, @IdCobroDebito = @IdCobroDebito, @IdMedioPago = @IdMedioPago, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleMedioCobro_DeepFindByAllPagedAsync(int? Id, string IdCobroDebito, int? IdMedioPago, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCobroDebito",
                    Size = 50,
                    Value = IdCobroDebito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdMedioPago",
                    Value = IdMedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleMedioCobro_DeepFindByAllPaged] @Id = @Id, @IdCobroDebito = @IdCobroDebito, @IdMedioPago = @IdMedioPago, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleMedioCobro_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleMedioCobro_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleMedioCobro_FindByAllResult>> DetalleMedioCobro_FindByAllAsync(int? Id, string IdCobroDebito, int? IdMedioPago, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCobroDebito",
                    Size = 50,
                    Value = IdCobroDebito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdMedioPago",
                    Value = IdMedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleMedioCobro_FindByAllResult>("EXEC @returnValue = [dbo].[DetalleMedioCobro_FindByAll] @Id = @Id, @IdCobroDebito = @IdCobroDebito, @IdMedioPago = @IdMedioPago, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleMedioCobro_FindByAllPagedResult>> DetalleMedioCobro_FindByAllPagedAsync(int? Id, string IdCobroDebito, int? IdMedioPago, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCobroDebito",
                    Size = 50,
                    Value = IdCobroDebito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdMedioPago",
                    Value = IdMedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleMedioCobro_FindByAllPagedResult>("EXEC @returnValue = [dbo].[DetalleMedioCobro_FindByAllPaged] @Id = @Id, @IdCobroDebito = @IdCobroDebito, @IdMedioPago = @IdMedioPago, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleMedioCobro_InsertAsync(string IdCobroDebito, int? IdMedioPago, string Descripcion, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? IdDetalleCobro, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdCobroDebito",
                    Size = 50,
                    Value = IdCobroDebito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdMedioPago",
                    Value = IdMedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Descripcion",
                    Size = 250,
                    Value = Descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalleCobro",
                    Value = IdDetalleCobro ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleMedioCobro_Insert] @Id = @Id OUTPUT, @IdCobroDebito = @IdCobroDebito, @IdMedioPago = @IdMedioPago, @Descripcion = @Descripcion, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdDetalleCobro = @IdDetalleCobro", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleMedioCobro_LoadAllResult>> DetalleMedioCobro_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleMedioCobro_LoadAllResult>("EXEC @returnValue = [dbo].[DetalleMedioCobro_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleMedioCobro_LoadByPKResult>> DetalleMedioCobro_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleMedioCobro_LoadByPKResult>("EXEC @returnValue = [dbo].[DetalleMedioCobro_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleMedioCobro_UpdateAsync(int? Id, string IdCobroDebito, int? IdMedioPago, string Descripcion, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCobroDebito",
                    Size = 50,
                    Value = IdCobroDebito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdMedioPago",
                    Value = IdMedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Descripcion",
                    Size = 250,
                    Value = Descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleMedioCobro_Update] @Id = @Id, @IdCobroDebito = @IdCobroDebito, @IdMedioPago = @IdMedioPago, @Descripcion = @Descripcion, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetallePago_DeepFindByAllResult>> DetallePago_DeepFindByAllAsync(int? Id, int? IdPagoCredito, int? IdCuentaPorPagar, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPagoCredito",
                    Value = IdPagoCredito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCuentaPorPagar",
                    Value = IdCuentaPorPagar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetallePago_DeepFindByAllResult>("EXEC @returnValue = [dbo].[DetallePago_DeepFindByAll] @Id = @Id, @IdPagoCredito = @IdPagoCredito, @IdCuentaPorPagar = @IdCuentaPorPagar, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetallePago_DeepFindByAllPagedAsync(int? Id, int? IdPagoCredito, int? IdCuentaPorPagar, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPagoCredito",
                    Value = IdPagoCredito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCuentaPorPagar",
                    Value = IdCuentaPorPagar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetallePago_DeepFindByAllPaged] @Id = @Id, @IdPagoCredito = @IdPagoCredito, @IdCuentaPorPagar = @IdCuentaPorPagar, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetallePago_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetallePago_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetallePago_FindByAllResult>> DetallePago_FindByAllAsync(int? Id, int? IdPagoCredito, int? IdCuentaPorPagar, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPagoCredito",
                    Value = IdPagoCredito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCuentaPorPagar",
                    Value = IdCuentaPorPagar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetallePago_FindByAllResult>("EXEC @returnValue = [dbo].[DetallePago_FindByAll] @Id = @Id, @IdPagoCredito = @IdPagoCredito, @IdCuentaPorPagar = @IdCuentaPorPagar, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetallePago_FindByAllPagedResult>> DetallePago_FindByAllPagedAsync(int? Id, int? IdPagoCredito, int? IdCuentaPorPagar, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPagoCredito",
                    Value = IdPagoCredito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCuentaPorPagar",
                    Value = IdCuentaPorPagar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetallePago_FindByAllPagedResult>("EXEC @returnValue = [dbo].[DetallePago_FindByAllPaged] @Id = @Id, @IdPagoCredito = @IdPagoCredito, @IdCuentaPorPagar = @IdCuentaPorPagar, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetallePago_InsertAsync(string IdPagoCredito, int? IdCuentaPorPagar, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdPagoCredito",
                    Size = 50,
                    Value = IdPagoCredito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCuentaPorPagar",
                    Value = IdCuentaPorPagar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetallePago_Insert] @Id = @Id OUTPUT, @IdPagoCredito = @IdPagoCredito, @IdCuentaPorPagar = @IdCuentaPorPagar, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetallePago_LoadAllResult>> DetallePago_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetallePago_LoadAllResult>("EXEC @returnValue = [dbo].[DetallePago_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetallePago_LoadByPKResult>> DetallePago_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetallePago_LoadByPKResult>("EXEC @returnValue = [dbo].[DetallePago_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetallePago_UpdateAsync(int? Id, int? IdPagoCredito, int? IdCuentaPorPagar, decimal? Valor, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPagoCredito",
                    Value = IdPagoCredito ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCuentaPorPagar",
                    Value = IdCuentaPorPagar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Valor",
                    Precision = 18,
                    Scale = 2,
                    Value = Valor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetallePago_Update] @Id = @Id, @IdPagoCredito = @IdPagoCredito, @IdCuentaPorPagar = @IdCuentaPorPagar, @Valor = @Valor, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleSalida_CheckAsync(string Id, bool? Revisado, bool? Empaquetado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Revisado",
                    Value = Revisado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Empaquetado",
                    Value = Empaquetado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleSalida_Check] @Id = @Id, @Revisado = @Revisado, @Empaquetado = @Empaquetado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleSalida_DeepFindByAllResult>> DetalleSalida_DeepFindByAllAsync(string Id, string Periodo, DateTime? Fecha, string TipoTransaccion, string IdSalida, int? IdProducto, int? IdProveedor, int? IdLocal, decimal? CostoUnitarioImportacion, decimal? Cantidad, int? IdTipoUnidad, decimal? CostoVenta, decimal? Precio, decimal? Descuento, decimal? Subtotal, DateTime? FechaFabricacion, DateTime? FechaExpiracion, string Lote, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? Empaquetado, bool? Revisado, int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoUnitarioImportacion",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoUnitarioImportacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoVenta",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoVenta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 4,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal",
                    Precision = 38,
                    Scale = 4,
                    Value = Subtotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFabricacion",
                    Value = FechaFabricacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaExpiracion",
                    Value = FechaExpiracion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Lote",
                    Size = 50,
                    Value = Lote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Empaquetado",
                    Value = Empaquetado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Revisado",
                    Value = Revisado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleSalida_DeepFindByAllResult>("EXEC @returnValue = [dbo].[DetalleSalida_DeepFindByAll] @Id = @Id, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdSalida = @IdSalida, @IdProducto = @IdProducto, @IdProveedor = @IdProveedor, @IdLocal = @IdLocal, @CostoUnitarioImportacion = @CostoUnitarioImportacion, @Cantidad = @Cantidad, @IdTipoUnidad = @IdTipoUnidad, @CostoVenta = @CostoVenta, @Precio = @Precio, @Descuento = @Descuento, @Subtotal = @Subtotal, @FechaFabricacion = @FechaFabricacion, @FechaExpiracion = @FechaExpiracion, @Lote = @Lote, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Empaquetado = @Empaquetado, @Revisado = @Revisado, @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleSalida_DeepFindByAllPagedAsync(string Id, string Periodo, DateTime? Fecha, string TipoTransaccion, string IdSalida, int? IdProducto, int? IdProveedor, int? IdLocal, decimal? CostoUnitarioImportacion, decimal? Cantidad, int? IdTipoUnidad, decimal? CostoVenta, decimal? Precio, decimal? Descuento, decimal? Subtotal, DateTime? FechaFabricacion, DateTime? FechaExpiracion, string Lote, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? IdEmpresa, bool? Empaquetado, bool? Revisado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoUnitarioImportacion",
                    Precision = 18,
                    Scale = 2,
                    Value = CostoUnitarioImportacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoVenta",
                    Precision = 18,
                    Scale = 2,
                    Value = CostoVenta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 2,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal",
                    Precision = 38,
                    Scale = 4,
                    Value = Subtotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFabricacion",
                    Value = FechaFabricacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaExpiracion",
                    Value = FechaExpiracion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Lote",
                    Size = 50,
                    Value = Lote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Empaquetado",
                    Value = Empaquetado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Revisado",
                    Value = Revisado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleSalida_DeepFindByAllPaged] @Id = @Id, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdSalida = @IdSalida, @IdProducto = @IdProducto, @IdProveedor = @IdProveedor, @IdLocal = @IdLocal, @CostoUnitarioImportacion = @CostoUnitarioImportacion, @Cantidad = @Cantidad, @IdTipoUnidad = @IdTipoUnidad, @CostoVenta = @CostoVenta, @Precio = @Precio, @Descuento = @Descuento, @Subtotal = @Subtotal, @FechaFabricacion = @FechaFabricacion, @FechaExpiracion = @FechaExpiracion, @Lote = @Lote, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdEmpresa = @IdEmpresa, @Empaquetado = @Empaquetado, @Revisado = @Revisado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleSalida_DeleteAsync(string Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleSalida_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleSalida_FindByAllResult>> DetalleSalida_FindByAllAsync(string Id, string Periodo, DateTime? Fecha, string TipoTransaccion, string IdSalida, int? IdProducto, int? IdProveedor, int? IdLocal, decimal? CostoUnitarioImportacion, decimal? Cantidad, int? IdTipoUnidad, decimal? CostoVenta, decimal? Precio, decimal? Descuento, decimal? Subtotal, DateTime? FechaFabricacion, DateTime? FechaExpiracion, string Lote, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? Empaquetado, bool? Revisado, int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoUnitarioImportacion",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoUnitarioImportacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoVenta",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoVenta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 4,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal",
                    Precision = 38,
                    Scale = 4,
                    Value = Subtotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFabricacion",
                    Value = FechaFabricacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaExpiracion",
                    Value = FechaExpiracion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Lote",
                    Size = 50,
                    Value = Lote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Empaquetado",
                    Value = Empaquetado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Revisado",
                    Value = Revisado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleSalida_FindByAllResult>("EXEC @returnValue = [dbo].[DetalleSalida_FindByAll] @Id = @Id, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdSalida = @IdSalida, @IdProducto = @IdProducto, @IdProveedor = @IdProveedor, @IdLocal = @IdLocal, @CostoUnitarioImportacion = @CostoUnitarioImportacion, @Cantidad = @Cantidad, @IdTipoUnidad = @IdTipoUnidad, @CostoVenta = @CostoVenta, @Precio = @Precio, @Descuento = @Descuento, @Subtotal = @Subtotal, @FechaFabricacion = @FechaFabricacion, @FechaExpiracion = @FechaExpiracion, @Lote = @Lote, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Empaquetado = @Empaquetado, @Revisado = @Revisado, @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleSalida_FindByAll2Result>> DetalleSalida_FindByAll2Async(string Id, string Periodo, DateTime? Fecha, string TipoTransaccion, string IdSalida, int? IdProducto, int? IdProveedor, int? IdLocal, decimal? CostoUnitarioImportacion, decimal? Cantidad, int? IdTipoUnidad, decimal? CostoVenta, decimal? Precio, decimal? Descuento, decimal? Subtotal, DateTime? FechaFabricacion, DateTime? FechaExpiracion, string Lote, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? Empaquetado, bool? Revisado, int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoUnitarioImportacion",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoUnitarioImportacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoVenta",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoVenta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 4,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal",
                    Precision = 38,
                    Scale = 4,
                    Value = Subtotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFabricacion",
                    Value = FechaFabricacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaExpiracion",
                    Value = FechaExpiracion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Lote",
                    Size = 50,
                    Value = Lote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Empaquetado",
                    Value = Empaquetado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Revisado",
                    Value = Revisado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleSalida_FindByAll2Result>("EXEC @returnValue = [dbo].[DetalleSalida_FindByAll2] @Id = @Id, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdSalida = @IdSalida, @IdProducto = @IdProducto, @IdProveedor = @IdProveedor, @IdLocal = @IdLocal, @CostoUnitarioImportacion = @CostoUnitarioImportacion, @Cantidad = @Cantidad, @IdTipoUnidad = @IdTipoUnidad, @CostoVenta = @CostoVenta, @Precio = @Precio, @Descuento = @Descuento, @Subtotal = @Subtotal, @FechaFabricacion = @FechaFabricacion, @FechaExpiracion = @FechaExpiracion, @Lote = @Lote, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Empaquetado = @Empaquetado, @Revisado = @Revisado, @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleSalida_FindByAllPagedResult>> DetalleSalida_FindByAllPagedAsync(string Id, string Periodo, DateTime? Fecha, string TipoTransaccion, string IdSalida, int? IdProducto, int? IdProveedor, int? IdLocal, decimal? CostoUnitarioImportacion, decimal? Cantidad, int? IdTipoUnidad, decimal? CostoVenta, decimal? Precio, decimal? Descuento, decimal? Subtotal, DateTime? FechaFabricacion, DateTime? FechaExpiracion, string Lote, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? Empaquetado, bool? Revisado, int? IdEmpresa, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoUnitarioImportacion",
                    Precision = 18,
                    Scale = 2,
                    Value = CostoUnitarioImportacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoVenta",
                    Precision = 18,
                    Scale = 2,
                    Value = CostoVenta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 2,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal",
                    Precision = 38,
                    Scale = 4,
                    Value = Subtotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFabricacion",
                    Value = FechaFabricacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaExpiracion",
                    Value = FechaExpiracion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Lote",
                    Size = 50,
                    Value = Lote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Empaquetado",
                    Value = Empaquetado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Revisado",
                    Value = Revisado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleSalida_FindByAllPagedResult>("EXEC @returnValue = [dbo].[DetalleSalida_FindByAllPaged] @Id = @Id, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdSalida = @IdSalida, @IdProducto = @IdProducto, @IdProveedor = @IdProveedor, @IdLocal = @IdLocal, @CostoUnitarioImportacion = @CostoUnitarioImportacion, @Cantidad = @Cantidad, @IdTipoUnidad = @IdTipoUnidad, @CostoVenta = @CostoVenta, @Precio = @Precio, @Descuento = @Descuento, @Subtotal = @Subtotal, @FechaFabricacion = @FechaFabricacion, @FechaExpiracion = @FechaExpiracion, @Lote = @Lote, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Empaquetado = @Empaquetado, @Revisado = @Revisado, @IdEmpresa = @IdEmpresa, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleSalida_InsertAsync(string Periodo, DateTime? Fecha, string TipoTransaccion, string IdSalida, int? IdProducto, int? IdProveedor, int? IdLocal, decimal? CostoUnitarioImportacion, decimal? Cantidad, int? IdTipoUnidad, decimal? CostoVenta, decimal? Precio, decimal? Descuento, decimal? Subtotal, DateTime? FechaFabricacion, DateTime? FechaExpiracion, string Lote, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? Empaquetado, bool? Revisado, int? IdEmpresa, short? Estado, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoUnitarioImportacion",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoUnitarioImportacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoVenta",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoVenta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 4,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal",
                    Precision = 18,
                    Scale = 4,
                    Value = Subtotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFabricacion",
                    Value = FechaFabricacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaExpiracion",
                    Value = FechaExpiracion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Lote",
                    Size = 50,
                    Value = Lote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Empaquetado",
                    Value = Empaquetado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Revisado",
                    Value = Revisado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Estado",
                    Value = Estado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleSalida_Insert] @Id = @Id OUTPUT, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdSalida = @IdSalida, @IdProducto = @IdProducto, @IdProveedor = @IdProveedor, @IdLocal = @IdLocal, @CostoUnitarioImportacion = @CostoUnitarioImportacion, @Cantidad = @Cantidad, @IdTipoUnidad = @IdTipoUnidad, @CostoVenta = @CostoVenta, @Precio = @Precio, @Descuento = @Descuento, @Subtotal = @Subtotal, @FechaFabricacion = @FechaFabricacion, @FechaExpiracion = @FechaExpiracion, @Lote = @Lote, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Empaquetado = @Empaquetado, @Revisado = @Revisado, @IdEmpresa = @IdEmpresa, @Estado = @Estado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleSalida_LoadAllResult>> DetalleSalida_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleSalida_LoadAllResult>("EXEC @returnValue = [dbo].[DetalleSalida_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DetalleSalida_LoadByPKResult>> DetalleSalida_LoadByPKAsync(string Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DetalleSalida_LoadByPKResult>("EXEC @returnValue = [dbo].[DetalleSalida_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DetalleSalida_UpdateAsync(string Id, string Periodo, DateTime? Fecha, string TipoTransaccion, string IdSalida, int? IdProducto, int? IdProveedor, int? IdLocal, decimal? CostoUnitarioImportacion, decimal? Cantidad, int? IdTipoUnidad, decimal? CostoVenta, decimal? Precio, decimal? Descuento, decimal? Subtotal, DateTime? FechaFabricacion, DateTime? FechaExpiracion, string Lote, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? Empaquetado, bool? Revisado, int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoUnitarioImportacion",
                    Precision = 18,
                    Scale = 2,
                    Value = CostoUnitarioImportacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CostoVenta",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoVenta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 4,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal",
                    Precision = 38,
                    Scale = 4,
                    Value = Subtotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFabricacion",
                    Value = FechaFabricacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "FechaExpiracion",
                    Value = FechaExpiracion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Lote",
                    Size = 50,
                    Value = Lote ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Empaquetado",
                    Value = Empaquetado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Revisado",
                    Value = Revisado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DetalleSalida_Update] @Id = @Id, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdSalida = @IdSalida, @IdProducto = @IdProducto, @IdProveedor = @IdProveedor, @IdLocal = @IdLocal, @CostoUnitarioImportacion = @CostoUnitarioImportacion, @Cantidad = @Cantidad, @IdTipoUnidad = @IdTipoUnidad, @CostoVenta = @CostoVenta, @Precio = @Precio, @Descuento = @Descuento, @Subtotal = @Subtotal, @FechaFabricacion = @FechaFabricacion, @FechaExpiracion = @FechaExpiracion, @Lote = @Lote, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Empaquetado = @Empaquetado, @Revisado = @Revisado, @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Division_DeepFindByAllResult>> Division_DeepFindByAllAsync(int? Id, int? IdEmpresa, string Division, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Division",
                    Size = 50,
                    Value = Division ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Division_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Division_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @Division = @Division, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Division_DeepFindByAllPagedAsync(int? Id, int? IdEmpresa, string Division, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Division",
                    Size = 50,
                    Value = Division ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Division_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @Division = @Division, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Division_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Division_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Division_FindByAllResult>> Division_FindByAllAsync(int? Id, int? IdEmpresa, string Division, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Division",
                    Size = 50,
                    Value = Division ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Division_FindByAllResult>("EXEC @returnValue = [dbo].[Division_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @Division = @Division, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Division_FindByAllPagedResult>> Division_FindByAllPagedAsync(int? Id, int? IdEmpresa, string Division, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Division",
                    Size = 50,
                    Value = Division ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Division_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Division_FindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @Division = @Division, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Division_InsertAsync(int? IdEmpresa, string Division, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Division",
                    Size = 50,
                    Value = Division ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Division_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @Division = @Division, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Division_LoadAllResult>> Division_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Division_LoadAllResult>("EXEC @returnValue = [dbo].[Division_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Division_LoadByPKResult>> Division_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Division_LoadByPKResult>("EXEC @returnValue = [dbo].[Division_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Division_UpdateAsync(int? Id, int? IdEmpresa, string Division, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Division",
                    Size = 50,
                    Value = Division ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Division_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @Division = @Division, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Documento_DeepFindByAllResult>> Documento_DeepFindByAllAsync(string Id, string IdTipoDocumento, int? IdEmpresa, string IdSalida, int? IdEntidad, short? IdMoneda, string Notas, string GuiaRemision, string NumeroDocumento, decimal? Base0, decimal? BaseIva, decimal? TotalDescuento, decimal? TotalSinImpuesto, decimal? TotalIce, decimal? TotalIva, decimal? Total, string FormaPago, int? Plazo, string UnidadTiempo, string IpIngreso, string UsuarioIngreso, DateTime? Fecha, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? ConsumidorFinal, string Establecimiento, string PuntoEmision, string RUC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoDocumento",
                    Size = 2,
                    Value = IdTipoDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntidad",
                    Value = IdEntidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMoneda",
                    Value = IdMoneda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Notas",
                    Size = 1000,
                    Value = Notas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GuiaRemision",
                    Size = 34,
                    Value = GuiaRemision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NumeroDocumento",
                    Size = 34,
                    Value = NumeroDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Base0",
                    Precision = 18,
                    Scale = 2,
                    Value = Base0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "BaseIva",
                    Precision = 18,
                    Scale = 2,
                    Value = BaseIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalDescuento",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalDescuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalSinImpuesto",
                    Precision = 20,
                    Scale = 2,
                    Value = TotalSinImpuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIce",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIva",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 22,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FormaPago",
                    Size = 2,
                    Value = FormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Plazo",
                    Value = Plazo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadTiempo",
                    Size = 50,
                    Value = UnidadTiempo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ConsumidorFinal",
                    Value = ConsumidorFinal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Establecimiento",
                    Size = 3,
                    Value = Establecimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PuntoEmision",
                    Size = 3,
                    Value = PuntoEmision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RUC",
                    Size = 20,
                    Value = RUC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Documento_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Documento_DeepFindByAll] @Id = @Id, @IdTipoDocumento = @IdTipoDocumento, @IdEmpresa = @IdEmpresa, @IdSalida = @IdSalida, @IdEntidad = @IdEntidad, @IdMoneda = @IdMoneda, @Notas = @Notas, @GuiaRemision = @GuiaRemision, @NumeroDocumento = @NumeroDocumento, @Base0 = @Base0, @BaseIva = @BaseIva, @TotalDescuento = @TotalDescuento, @TotalSinImpuesto = @TotalSinImpuesto, @TotalIce = @TotalIce, @TotalIva = @TotalIva, @Total = @Total, @FormaPago = @FormaPago, @Plazo = @Plazo, @UnidadTiempo = @UnidadTiempo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @Fecha = @Fecha, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @ConsumidorFinal = @ConsumidorFinal, @Establecimiento = @Establecimiento, @PuntoEmision = @PuntoEmision, @RUC = @RUC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Documento_DeepFindByAllPagedAsync(string Id, string IdTipoDocumento, int? IdEmpresa, string IdSalida, int? IdEntidad, short? IdMoneda, string Notas, string GuiaRemision, string NumeroDocumento, DateTime? Fecha, decimal? Base0, decimal? BaseIva, decimal? TotalDescuento, decimal? TotalSinImpuesto, decimal? TotalIce, decimal? TotalIva, decimal? Total, string FormaPago, int? Plazo, string UnidadTiempo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? ConsumidorFinal, string Establecimiento, string PuntoEmision, string RUC, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoDocumento",
                    Size = 2,
                    Value = IdTipoDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntidad",
                    Value = IdEntidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMoneda",
                    Value = IdMoneda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Notas",
                    Size = 1000,
                    Value = Notas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GuiaRemision",
                    Size = 34,
                    Value = GuiaRemision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NumeroDocumento",
                    Size = 34,
                    Value = NumeroDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Base0",
                    Precision = 18,
                    Scale = 2,
                    Value = Base0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "BaseIva",
                    Precision = 18,
                    Scale = 2,
                    Value = BaseIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalDescuento",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalDescuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalSinImpuesto",
                    Precision = 20,
                    Scale = 2,
                    Value = TotalSinImpuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIce",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIva",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 22,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FormaPago",
                    Size = 2,
                    Value = FormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Plazo",
                    Value = Plazo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadTiempo",
                    Size = 50,
                    Value = UnidadTiempo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ConsumidorFinal",
                    Value = ConsumidorFinal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Establecimiento",
                    Size = 3,
                    Value = Establecimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PuntoEmision",
                    Size = 3,
                    Value = PuntoEmision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RUC",
                    Size = 20,
                    Value = RUC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Documento_DeepFindByAllPaged] @Id = @Id, @IdTipoDocumento = @IdTipoDocumento, @IdEmpresa = @IdEmpresa, @IdSalida = @IdSalida, @IdEntidad = @IdEntidad, @IdMoneda = @IdMoneda, @Notas = @Notas, @GuiaRemision = @GuiaRemision, @NumeroDocumento = @NumeroDocumento, @Fecha = @Fecha, @Base0 = @Base0, @BaseIva = @BaseIva, @TotalDescuento = @TotalDescuento, @TotalSinImpuesto = @TotalSinImpuesto, @TotalIce = @TotalIce, @TotalIva = @TotalIva, @Total = @Total, @FormaPago = @FormaPago, @Plazo = @Plazo, @UnidadTiempo = @UnidadTiempo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @ConsumidorFinal = @ConsumidorFinal, @Establecimiento = @Establecimiento, @PuntoEmision = @PuntoEmision, @RUC = @RUC, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Documento_DeleteAsync(string Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Documento_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Documento_FindByAllResult>> Documento_FindByAllAsync(string Id, string IdTipoDocumento, int? IdEmpresa, string IdSalida, int? IdEntidad, short? IdMoneda, string Notas, string GuiaRemision, string NumeroDocumento, DateTime? Fecha, decimal? Base0, decimal? BaseIva, decimal? TotalDescuento, decimal? TotalSinImpuesto, decimal? TotalIce, decimal? TotalIva, decimal? Total, string FormaPago, int? Plazo, string UnidadTiempo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? ConsumidorFinal, string Establecimiento, string PuntoEmision, string RUC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoDocumento",
                    Size = 2,
                    Value = IdTipoDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntidad",
                    Value = IdEntidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMoneda",
                    Value = IdMoneda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Notas",
                    Size = 1000,
                    Value = Notas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GuiaRemision",
                    Size = 34,
                    Value = GuiaRemision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NumeroDocumento",
                    Size = 34,
                    Value = NumeroDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Base0",
                    Precision = 18,
                    Scale = 2,
                    Value = Base0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "BaseIva",
                    Precision = 18,
                    Scale = 2,
                    Value = BaseIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalDescuento",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalDescuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalSinImpuesto",
                    Precision = 20,
                    Scale = 2,
                    Value = TotalSinImpuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIce",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIva",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 22,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FormaPago",
                    Size = 2,
                    Value = FormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Plazo",
                    Value = Plazo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadTiempo",
                    Size = 50,
                    Value = UnidadTiempo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ConsumidorFinal",
                    Value = ConsumidorFinal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Establecimiento",
                    Size = 3,
                    Value = Establecimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PuntoEmision",
                    Size = 3,
                    Value = PuntoEmision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RUC",
                    Size = 20,
                    Value = RUC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Documento_FindByAllResult>("EXEC @returnValue = [dbo].[Documento_FindByAll] @Id = @Id, @IdTipoDocumento = @IdTipoDocumento, @IdEmpresa = @IdEmpresa, @IdSalida = @IdSalida, @IdEntidad = @IdEntidad, @IdMoneda = @IdMoneda, @Notas = @Notas, @GuiaRemision = @GuiaRemision, @NumeroDocumento = @NumeroDocumento, @Fecha = @Fecha, @Base0 = @Base0, @BaseIva = @BaseIva, @TotalDescuento = @TotalDescuento, @TotalSinImpuesto = @TotalSinImpuesto, @TotalIce = @TotalIce, @TotalIva = @TotalIva, @Total = @Total, @FormaPago = @FormaPago, @Plazo = @Plazo, @UnidadTiempo = @UnidadTiempo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @ConsumidorFinal = @ConsumidorFinal, @Establecimiento = @Establecimiento, @PuntoEmision = @PuntoEmision, @RUC = @RUC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Documento_InsertAsync(string IdTipoDocumento, int? IdEmpresa, string IdSalida, int? IdEntidad, short? IdMoneda, string Notas, string GuiaRemision, string NumeroDocumento, DateTime? Fecha, decimal? Base0, decimal? BaseIva, decimal? TotalDescuento, decimal? TotalIce, decimal? TotalIva, string FormaPago, int? Plazo, string UnidadTiempo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string RUC, string Establecimiento, string PuntoEmision, bool? ConsumidorFinal, long? IdFacturaGo, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdTipoDocumento",
                    Size = 2,
                    Value = IdTipoDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntidad",
                    Value = IdEntidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMoneda",
                    Value = IdMoneda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Notas",
                    Size = 500,
                    Value = Notas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GuiaRemision",
                    Size = 17,
                    Value = GuiaRemision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NumeroDocumento",
                    Size = 17,
                    Value = NumeroDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Base0",
                    Precision = 18,
                    Scale = 2,
                    Value = Base0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "BaseIva",
                    Precision = 18,
                    Scale = 2,
                    Value = BaseIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalDescuento",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalDescuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIce",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIva",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FormaPago",
                    Size = 2,
                    Value = FormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Plazo",
                    Value = Plazo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadTiempo",
                    Size = 50,
                    Value = UnidadTiempo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "RUC",
                    Size = 15,
                    Value = RUC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Establecimiento",
                    Size = 3,
                    Value = Establecimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PuntoEmision",
                    Size = 3,
                    Value = PuntoEmision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ConsumidorFinal",
                    Value = ConsumidorFinal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IdFacturaGo",
                    Value = IdFacturaGo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Documento_Insert] @Id = @Id OUTPUT, @IdTipoDocumento = @IdTipoDocumento, @IdEmpresa = @IdEmpresa, @IdSalida = @IdSalida, @IdEntidad = @IdEntidad, @IdMoneda = @IdMoneda, @Notas = @Notas, @GuiaRemision = @GuiaRemision, @NumeroDocumento = @NumeroDocumento, @Fecha = @Fecha, @Base0 = @Base0, @BaseIva = @BaseIva, @TotalDescuento = @TotalDescuento, @TotalIce = @TotalIce, @TotalIva = @TotalIva, @FormaPago = @FormaPago, @Plazo = @Plazo, @UnidadTiempo = @UnidadTiempo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @RUC = @RUC, @Establecimiento = @Establecimiento, @PuntoEmision = @PuntoEmision, @ConsumidorFinal = @ConsumidorFinal, @IdFacturaGo = @IdFacturaGo", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Documento_LoadAllResult>> Documento_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Documento_LoadAllResult>("EXEC @returnValue = [dbo].[Documento_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Documento_UpdateAsync(string Id, string IdTipoDocumento, int? IdEmpresa, string IdSalida, int? IdEntidad, short? IdMoneda, string Notas, string GuiaRemision, string NumeroDocumento, DateTime? Fecha, decimal? Base0, decimal? BaseIva, decimal? TotalDescuento, decimal? TotalSinImpuesto, decimal? TotalIce, decimal? TotalIva, decimal? Total, string FormaPago, int? Plazo, string UnidadTiempo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string Establecimiento, string PuntoEmision, string RUC, bool? ConsumidorFinal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoDocumento",
                    Size = 2,
                    Value = IdTipoDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntidad",
                    Value = IdEntidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMoneda",
                    Value = IdMoneda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Notas",
                    Size = 1000,
                    Value = Notas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GuiaRemision",
                    Size = 34,
                    Value = GuiaRemision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NumeroDocumento",
                    Size = 34,
                    Value = NumeroDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Base0",
                    Precision = 18,
                    Scale = 2,
                    Value = Base0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "BaseIva",
                    Precision = 18,
                    Scale = 2,
                    Value = BaseIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalDescuento",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalDescuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalSinImpuesto",
                    Precision = 20,
                    Scale = 2,
                    Value = TotalSinImpuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIce",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIce ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalIva",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 22,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FormaPago",
                    Size = 2,
                    Value = FormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Plazo",
                    Value = Plazo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadTiempo",
                    Size = 50,
                    Value = UnidadTiempo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Establecimiento",
                    Size = 3,
                    Value = Establecimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PuntoEmision",
                    Size = 3,
                    Value = PuntoEmision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RUC",
                    Size = 15,
                    Value = RUC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ConsumidorFinal",
                    Value = ConsumidorFinal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Documento_Update] @Id = @Id, @IdTipoDocumento = @IdTipoDocumento, @IdEmpresa = @IdEmpresa, @IdSalida = @IdSalida, @IdEntidad = @IdEntidad, @IdMoneda = @IdMoneda, @Notas = @Notas, @GuiaRemision = @GuiaRemision, @NumeroDocumento = @NumeroDocumento, @Fecha = @Fecha, @Base0 = @Base0, @BaseIva = @BaseIva, @TotalDescuento = @TotalDescuento, @TotalSinImpuesto = @TotalSinImpuesto, @TotalIce = @TotalIce, @TotalIva = @TotalIva, @Total = @Total, @FormaPago = @FormaPago, @Plazo = @Plazo, @UnidadTiempo = @UnidadTiempo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Establecimiento = @Establecimiento, @PuntoEmision = @PuntoEmision, @RUC = @RUC, @ConsumidorFinal = @ConsumidorFinal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Empaquetado_DeepFindByAllResult>> Empaquetado_DeepFindByAllAsync(string Id, short? IdEmpresa, string IdSalida, int? Cantidad, int? IdTipoPaquete, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoPaquete",
                    Value = IdTipoPaquete ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Empaquetado_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Empaquetado_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdSalida = @IdSalida, @Cantidad = @Cantidad, @IdTipoPaquete = @IdTipoPaquete, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Empaquetado_DeepFindByAllPagedAsync(string Id, short? IdEmpresa, string IdSalida, int? Cantidad, int? IdTipoPaquete, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoPaquete",
                    Value = IdTipoPaquete ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Empaquetado_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdSalida = @IdSalida, @Cantidad = @Cantidad, @IdTipoPaquete = @IdTipoPaquete, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Empaquetado_DeleteAsync(string Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Empaquetado_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Empaquetado_FindByAllResult>> Empaquetado_FindByAllAsync(string Id, short? IdEmpresa, string IdSalida, int? Cantidad, int? IdTipoPaquete, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoPaquete",
                    Value = IdTipoPaquete ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Empaquetado_FindByAllResult>("EXEC @returnValue = [dbo].[Empaquetado_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdSalida = @IdSalida, @Cantidad = @Cantidad, @IdTipoPaquete = @IdTipoPaquete, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Empaquetado_FindByAllPagedResult>> Empaquetado_FindByAllPagedAsync(string Id, short? IdEmpresa, string IdSalida, int? Cantidad, int? IdTipoPaquete, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoPaquete",
                    Value = IdTipoPaquete ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Empaquetado_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Empaquetado_FindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdSalida = @IdSalida, @Cantidad = @Cantidad, @IdTipoPaquete = @IdTipoPaquete, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Empaquetado_InsertAsync(short? IdEmpresa, string IdSalida, int? Cantidad, int? IdTipoPaquete, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoPaquete",
                    Value = IdTipoPaquete ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Empaquetado_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @IdSalida = @IdSalida, @Cantidad = @Cantidad, @IdTipoPaquete = @IdTipoPaquete, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Empaquetado_LoadAllResult>> Empaquetado_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Empaquetado_LoadAllResult>("EXEC @returnValue = [dbo].[Empaquetado_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Empaquetado_LoadByPKResult>> Empaquetado_LoadByPKAsync(string Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Empaquetado_LoadByPKResult>("EXEC @returnValue = [dbo].[Empaquetado_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Empaquetado_UpdateAsync(string Id, short? IdEmpresa, string IdSalida, int? Cantidad, int? IdTipoPaquete, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoPaquete",
                    Value = IdTipoPaquete ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Empaquetado_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdSalida = @IdSalida, @Cantidad = @Cantidad, @IdTipoPaquete = @IdTipoPaquete, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Empresa_DeepFindByAllResult>> Empresa_DeepFindByAllAsync(int? Id, string NombreEmpresa, string Direccion, string Telefono, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? FlujoInventario, bool? FacturaPOS, bool? IncluyeIVA, bool? Importacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NombreEmpresa",
                    Size = 50,
                    Value = NombreEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 500,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Telefono",
                    Size = 50,
                    Value = Telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "FlujoInventario",
                    Value = FlujoInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FacturaPOS",
                    Value = FacturaPOS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIVA",
                    Value = IncluyeIVA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Importacion",
                    Value = Importacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Empresa_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Empresa_DeepFindByAll] @Id = @Id, @NombreEmpresa = @NombreEmpresa, @Direccion = @Direccion, @Telefono = @Telefono, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @FlujoInventario = @FlujoInventario, @FacturaPOS = @FacturaPOS, @IncluyeIVA = @IncluyeIVA, @Importacion = @Importacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Empresa_DeepFindByAllPagedAsync(int? Id, string NombreEmpresa, string Direccion, string Telefono, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? FlujoInventario, bool? FacturaPOS, bool? Importacion, bool? IncluyeIVA, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NombreEmpresa",
                    Size = 50,
                    Value = NombreEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 500,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Telefono",
                    Size = 50,
                    Value = Telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "FlujoInventario",
                    Value = FlujoInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FacturaPOS",
                    Value = FacturaPOS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Importacion",
                    Value = Importacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIVA",
                    Value = IncluyeIVA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Empresa_DeepFindByAllPaged] @Id = @Id, @NombreEmpresa = @NombreEmpresa, @Direccion = @Direccion, @Telefono = @Telefono, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @FlujoInventario = @FlujoInventario, @FacturaPOS = @FacturaPOS, @Importacion = @Importacion, @IncluyeIVA = @IncluyeIVA, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Empresa_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Empresa_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Empresa_FindByAllResult>> Empresa_FindByAllAsync(int? Id, string NombreEmpresa, string Direccion, string Telefono, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? FlujoInventario, bool? FacturaPOS, bool? Importacion, bool? IncluyeIVA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NombreEmpresa",
                    Size = 50,
                    Value = NombreEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 500,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Telefono",
                    Size = 50,
                    Value = Telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "FlujoInventario",
                    Value = FlujoInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FacturaPOS",
                    Value = FacturaPOS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Importacion",
                    Value = Importacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIVA",
                    Value = IncluyeIVA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Empresa_FindByAllResult>("EXEC @returnValue = [dbo].[Empresa_FindByAll] @Id = @Id, @NombreEmpresa = @NombreEmpresa, @Direccion = @Direccion, @Telefono = @Telefono, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @FlujoInventario = @FlujoInventario, @FacturaPOS = @FacturaPOS, @Importacion = @Importacion, @IncluyeIVA = @IncluyeIVA", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Empresa_FindByAllPagedResult>> Empresa_FindByAllPagedAsync(int? Id, string NombreEmpresa, string Direccion, string Telefono, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? FlujoInventario, bool? FacturaPOS, bool? Importacion, bool? IncluyeIVA, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NombreEmpresa",
                    Size = 50,
                    Value = NombreEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 500,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Telefono",
                    Size = 50,
                    Value = Telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "FlujoInventario",
                    Value = FlujoInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FacturaPOS",
                    Value = FacturaPOS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Importacion",
                    Value = Importacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIVA",
                    Value = IncluyeIVA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Empresa_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Empresa_FindByAllPaged] @Id = @Id, @NombreEmpresa = @NombreEmpresa, @Direccion = @Direccion, @Telefono = @Telefono, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @FlujoInventario = @FlujoInventario, @FacturaPOS = @FacturaPOS, @Importacion = @Importacion, @IncluyeIVA = @IncluyeIVA, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Empresa_InsertAsync(string NombreEmpresa, string Direccion, string Telefono, string Logo, string RaizArchivo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? FlujoInventario, bool? FacturaPOS, bool? Importacion, bool? IncluyeIVA, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "NombreEmpresa",
                    Size = 50,
                    Value = NombreEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 500,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Telefono",
                    Size = 50,
                    Value = Telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Logo",
                    Size = 500,
                    Value = Logo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RaizArchivo",
                    Size = 500,
                    Value = RaizArchivo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "FlujoInventario",
                    Value = FlujoInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FacturaPOS",
                    Value = FacturaPOS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Importacion",
                    Value = Importacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIVA",
                    Value = IncluyeIVA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Empresa_Insert] @Id = @Id OUTPUT, @NombreEmpresa = @NombreEmpresa, @Direccion = @Direccion, @Telefono = @Telefono, @Logo = @Logo, @RaizArchivo = @RaizArchivo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @FlujoInventario = @FlujoInventario, @FacturaPOS = @FacturaPOS, @Importacion = @Importacion, @IncluyeIVA = @IncluyeIVA", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Empresa_LoadAllResult>> Empresa_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Empresa_LoadAllResult>("EXEC @returnValue = [dbo].[Empresa_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Empresa_LoadByPKResult>> Empresa_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Empresa_LoadByPKResult>("EXEC @returnValue = [dbo].[Empresa_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Empresa_UpdateAsync(int? Id, string NombreEmpresa, string Direccion, string Telefono, string Logo, string RaizArchivo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? FlujoInventario, bool? FacturaPOS, bool? Importacion, bool? IncluyeIVA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NombreEmpresa",
                    Size = 50,
                    Value = NombreEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 500,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Telefono",
                    Size = 50,
                    Value = Telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Logo",
                    Size = 500,
                    Value = Logo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RaizArchivo",
                    Size = 500,
                    Value = RaizArchivo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "FlujoInventario",
                    Value = FlujoInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "FacturaPOS",
                    Value = FacturaPOS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Importacion",
                    Value = Importacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIVA",
                    Value = IncluyeIVA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Empresa_Update] @Id = @Id, @NombreEmpresa = @NombreEmpresa, @Direccion = @Direccion, @Telefono = @Telefono, @Logo = @Logo, @RaizArchivo = @RaizArchivo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @FlujoInventario = @FlujoInventario, @FacturaPOS = @FacturaPOS, @Importacion = @Importacion, @IncluyeIVA = @IncluyeIVA", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Entidad_DeepFindByAllResult>> Entidad_DeepFindByAllAsync(int? Id, int? IdEmpresa, string TipoEntidad, string TipoIdentificacion, string RazonSocial, string Identificacion, short? IdPais, int? IdProvincia, int? IdCiudad, string Direccion, int? IdSector, string Telefono, string Celular, string Correo, string Observaciones, byte[] Foto, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? EsCliente, bool? EsProveedor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoEntidad",
                    Size = 50,
                    Value = TipoEntidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIdentificacion",
                    Size = 1,
                    Value = TipoIdentificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RazonSocial",
                    Size = 250,
                    Value = RazonSocial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Identificacion",
                    Size = 50,
                    Value = Identificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdPais",
                    Value = IdPais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdProvincia",
                    Value = IdProvincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCiudad",
                    Value = IdCiudad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 500,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSector",
                    Value = IdSector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Telefono",
                    Size = 50,
                    Value = Telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Celular",
                    Size = 50,
                    Value = Celular ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Correo",
                    Size = 50,
                    Value = Correo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 250,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Foto",
                    Size = 1,
                    Value = Foto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "EsCliente",
                    Value = EsCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EsProveedor",
                    Value = EsProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Entidad_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Entidad_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @TipoEntidad = @TipoEntidad, @TipoIdentificacion = @TipoIdentificacion, @RazonSocial = @RazonSocial, @Identificacion = @Identificacion, @IdPais = @IdPais, @IdProvincia = @IdProvincia, @IdCiudad = @IdCiudad, @Direccion = @Direccion, @IdSector = @IdSector, @Telefono = @Telefono, @Celular = @Celular, @Correo = @Correo, @Observaciones = @Observaciones, @Foto = @Foto, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @EsCliente = @EsCliente, @EsProveedor = @EsProveedor", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Entidad_DeepFindByAllPagedAsync(int? Id, int? IdEmpresa, string TipoIdentificacion, string TipoEntidad, string RazonSocial, string Identificacion, short? IdPais, int? IdProvincia, int? IdCiudad, string Direccion, int? IdSector, string Telefono, string Celular, string Correo, string Observaciones, byte[] Foto, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? EsCliente, bool? EsProveedor, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIdentificacion",
                    Size = 1,
                    Value = TipoIdentificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoEntidad",
                    Size = 50,
                    Value = TipoEntidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RazonSocial",
                    Size = 250,
                    Value = RazonSocial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Identificacion",
                    Size = 50,
                    Value = Identificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdPais",
                    Value = IdPais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdProvincia",
                    Value = IdProvincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCiudad",
                    Value = IdCiudad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 500,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSector",
                    Value = IdSector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Telefono",
                    Size = 50,
                    Value = Telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Celular",
                    Size = 50,
                    Value = Celular ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Correo",
                    Size = 50,
                    Value = Correo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 250,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Foto",
                    Size = 1,
                    Value = Foto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "EsCliente",
                    Value = EsCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EsProveedor",
                    Value = EsProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Entidad_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @TipoIdentificacion = @TipoIdentificacion, @TipoEntidad = @TipoEntidad, @RazonSocial = @RazonSocial, @Identificacion = @Identificacion, @IdPais = @IdPais, @IdProvincia = @IdProvincia, @IdCiudad = @IdCiudad, @Direccion = @Direccion, @IdSector = @IdSector, @Telefono = @Telefono, @Celular = @Celular, @Correo = @Correo, @Observaciones = @Observaciones, @Foto = @Foto, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @EsCliente = @EsCliente, @EsProveedor = @EsProveedor, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Entidad_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Entidad_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Entidad_FindByAllResult>> Entidad_FindByAllAsync(int? Id, int? IdEmpresa, string TipoEntidad, string TipoIdentificacion, string RazonSocial, string Identificacion, short? IdPais, int? IdProvincia, int? IdCiudad, string Direccion, int? IdSector, string Telefono, string Celular, string Correo, string Observaciones, byte[] Foto, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? EsCliente, bool? EsProveedor, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoEntidad",
                    Size = 50,
                    Value = TipoEntidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIdentificacion",
                    Size = 1,
                    Value = TipoIdentificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RazonSocial",
                    Size = 250,
                    Value = RazonSocial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Identificacion",
                    Size = 50,
                    Value = Identificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdPais",
                    Value = IdPais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdProvincia",
                    Value = IdProvincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCiudad",
                    Value = IdCiudad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 500,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSector",
                    Value = IdSector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Telefono",
                    Size = 50,
                    Value = Telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Celular",
                    Size = 50,
                    Value = Celular ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Correo",
                    Size = 50,
                    Value = Correo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 250,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Foto",
                    Size = 1,
                    Value = Foto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "EsCliente",
                    Value = EsCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EsProveedor",
                    Value = EsProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Entidad_FindByAllResult>("EXEC @returnValue = [dbo].[Entidad_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @TipoEntidad = @TipoEntidad, @TipoIdentificacion = @TipoIdentificacion, @RazonSocial = @RazonSocial, @Identificacion = @Identificacion, @IdPais = @IdPais, @IdProvincia = @IdProvincia, @IdCiudad = @IdCiudad, @Direccion = @Direccion, @IdSector = @IdSector, @Telefono = @Telefono, @Celular = @Celular, @Correo = @Correo, @Observaciones = @Observaciones, @Foto = @Foto, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @EsCliente = @EsCliente, @EsProveedor = @EsProveedor", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Entidad_FindByAllPagedAsync(int? Id, int? IdEmpresa, string TipoIdentificacion, string TipoEntidad, string RazonSocial, string Identificacion, short? IdPais, int? IdProvincia, int? IdCiudad, string Direccion, int? IdSector, string Telefono, string Celular, string Correo, string Observaciones, byte[] Foto, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? EsCliente, bool? EsProveedor, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIdentificacion",
                    Size = 1,
                    Value = TipoIdentificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoEntidad",
                    Size = 50,
                    Value = TipoEntidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RazonSocial",
                    Size = 250,
                    Value = RazonSocial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Identificacion",
                    Size = 50,
                    Value = Identificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdPais",
                    Value = IdPais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdProvincia",
                    Value = IdProvincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCiudad",
                    Value = IdCiudad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 500,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSector",
                    Value = IdSector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Telefono",
                    Size = 50,
                    Value = Telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Celular",
                    Size = 50,
                    Value = Celular ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Correo",
                    Size = 50,
                    Value = Correo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 250,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Foto",
                    Size = 1,
                    Value = Foto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "EsCliente",
                    Value = EsCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EsProveedor",
                    Value = EsProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Entidad_FindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @TipoIdentificacion = @TipoIdentificacion, @TipoEntidad = @TipoEntidad, @RazonSocial = @RazonSocial, @Identificacion = @Identificacion, @IdPais = @IdPais, @IdProvincia = @IdProvincia, @IdCiudad = @IdCiudad, @Direccion = @Direccion, @IdSector = @IdSector, @Telefono = @Telefono, @Celular = @Celular, @Correo = @Correo, @Observaciones = @Observaciones, @Foto = @Foto, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @EsCliente = @EsCliente, @EsProveedor = @EsProveedor, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Entidad_InsertAsync(int? IdEmpresa, string TipoIdentificacion, string TipoEntidad, string RazonSocial, string Identificacion, short? IdPais, int? IdProvincia, int? IdCiudad, string Direccion, int? IdSector, string Telefono, string Celular, string Correo, string Observaciones, string Foto, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? EsCliente, bool? EsProveedor, string Latitud, string Longitud, DateTime? FechaNacimiento, string Genero, string EstadoCivil, string Nacionalidad, string NivelEstudio, string Profesion, bool? CrearBodega, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIdentificacion",
                    Size = 1,
                    Value = TipoIdentificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoEntidad",
                    Size = 50,
                    Value = TipoEntidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RazonSocial",
                    Size = 250,
                    Value = RazonSocial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Identificacion",
                    Size = 50,
                    Value = Identificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdPais",
                    Value = IdPais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdProvincia",
                    Value = IdProvincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCiudad",
                    Value = IdCiudad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 500,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSector",
                    Value = IdSector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Telefono",
                    Size = 50,
                    Value = Telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Celular",
                    Size = 50,
                    Value = Celular ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Correo",
                    Size = 50,
                    Value = Correo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 250,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Foto",
                    Size = -1,
                    Value = Foto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "EsCliente",
                    Value = EsCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EsProveedor",
                    Value = EsProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Latitud",
                    Size = 300,
                    Value = Latitud ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Longitud",
                    Size = 300,
                    Value = Longitud ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaNacimiento",
                    Value = FechaNacimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Genero",
                    Size = 15,
                    Value = Genero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoCivil",
                    Size = 50,
                    Value = EstadoCivil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nacionalidad",
                    Size = 50,
                    Value = Nacionalidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NivelEstudio",
                    Size = 50,
                    Value = NivelEstudio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Profesion",
                    Size = 50,
                    Value = Profesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CrearBodega",
                    Value = CrearBodega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Entidad_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @TipoIdentificacion = @TipoIdentificacion, @TipoEntidad = @TipoEntidad, @RazonSocial = @RazonSocial, @Identificacion = @Identificacion, @IdPais = @IdPais, @IdProvincia = @IdProvincia, @IdCiudad = @IdCiudad, @Direccion = @Direccion, @IdSector = @IdSector, @Telefono = @Telefono, @Celular = @Celular, @Correo = @Correo, @Observaciones = @Observaciones, @Foto = @Foto, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @EsCliente = @EsCliente, @EsProveedor = @EsProveedor, @Latitud = @Latitud, @Longitud = @Longitud, @FechaNacimiento = @FechaNacimiento, @Genero = @Genero, @EstadoCivil = @EstadoCivil, @Nacionalidad = @Nacionalidad, @NivelEstudio = @NivelEstudio, @Profesion = @Profesion, @CrearBodega = @CrearBodega", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Entidad_LoadAllResult>> Entidad_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Entidad_LoadAllResult>("EXEC @returnValue = [dbo].[Entidad_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Entidad_LoadByCellPhoneResult>> Entidad_LoadByCellPhoneAsync(int? IdEmpresa, string Celular, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Celular",
                    Size = 50,
                    Value = Celular ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Entidad_LoadByCellPhoneResult>("EXEC @returnValue = [dbo].[Entidad_LoadByCellPhone] @IdEmpresa = @IdEmpresa, @Celular = @Celular", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Entidad_LoadByPKResult>> Entidad_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Entidad_LoadByPKResult>("EXEC @returnValue = [dbo].[Entidad_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Entidad_LoadByTermDriverPagedResult>> Entidad_LoadByTermDriverPagedAsync(int? IdEmpresa, string Term, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Term",
                    Size = 50,
                    Value = Term ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Entidad_LoadByTermDriverPagedResult>("EXEC @returnValue = [dbo].[Entidad_LoadByTermDriverPaged] @IdEmpresa = @IdEmpresa, @Term = @Term, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Entidad_LoadByTermPagedResult>> Entidad_LoadByTermPagedAsync(int? IdEmpresa, string Term, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Term",
                    Size = 50,
                    Value = Term ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Entidad_LoadByTermPagedResult>("EXEC @returnValue = [dbo].[Entidad_LoadByTermPaged] @IdEmpresa = @IdEmpresa, @Term = @Term, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Entidad_UpdateAsync(int? Id, int? IdEmpresa, string TipoIdentificacion, string TipoEntidad, string RazonSocial, string Identificacion, short? IdPais, int? IdProvincia, int? IdCiudad, string Direccion, int? IdSector, string Telefono, string Celular, string Correo, string Observaciones, string Foto, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? EsCliente, bool? EsProveedor, string Latitud, string Longitud, DateTime? FechaNacimiento, string Genero, string EstadoCivil, string Nacionalidad, string NivelEstudio, string Profesion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoIdentificacion",
                    Size = 1,
                    Value = TipoIdentificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoEntidad",
                    Size = 50,
                    Value = TipoEntidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RazonSocial",
                    Size = 250,
                    Value = RazonSocial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Identificacion",
                    Size = 50,
                    Value = Identificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdPais",
                    Value = IdPais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdProvincia",
                    Value = IdProvincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCiudad",
                    Value = IdCiudad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 500,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSector",
                    Value = IdSector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Telefono",
                    Size = 50,
                    Value = Telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Celular",
                    Size = 50,
                    Value = Celular ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Correo",
                    Size = 50,
                    Value = Correo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 250,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Foto",
                    Size = -1,
                    Value = Foto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "EsCliente",
                    Value = EsCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "EsProveedor",
                    Value = EsProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Latitud",
                    Size = 300,
                    Value = Latitud ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Longitud",
                    Size = 300,
                    Value = Longitud ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaNacimiento",
                    Value = FechaNacimiento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Genero",
                    Size = 15,
                    Value = Genero ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoCivil",
                    Size = 50,
                    Value = EstadoCivil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nacionalidad",
                    Size = 50,
                    Value = Nacionalidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NivelEstudio",
                    Size = 50,
                    Value = NivelEstudio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Profesion",
                    Size = 50,
                    Value = Profesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Entidad_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @TipoIdentificacion = @TipoIdentificacion, @TipoEntidad = @TipoEntidad, @RazonSocial = @RazonSocial, @Identificacion = @Identificacion, @IdPais = @IdPais, @IdProvincia = @IdProvincia, @IdCiudad = @IdCiudad, @Direccion = @Direccion, @IdSector = @IdSector, @Telefono = @Telefono, @Celular = @Celular, @Correo = @Correo, @Observaciones = @Observaciones, @Foto = @Foto, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @EsCliente = @EsCliente, @EsProveedor = @EsProveedor, @Latitud = @Latitud, @Longitud = @Longitud, @FechaNacimiento = @FechaNacimiento, @Genero = @Genero, @EstadoCivil = @EstadoCivil, @Nacionalidad = @Nacionalidad, @NivelEstudio = @NivelEstudio, @Profesion = @Profesion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Entrada_DeepFindByAllResult>> Entrada_DeepFindByAllAsync(string Id, int? IdEmpresa, int? IdLocal, string Periodo, DateTime? Fecha, string TipoTransaccion, int? IdProveedor, decimal? Subtotal0, decimal? Subtotal12, decimal? Total, decimal? Saldo, string NumeroFacturaPedido, string TransaccionPadre, string TipoTransaccionPadre, string EstadoActual, decimal? ValorAdicional, DateTime? FechaHoraEntrega, int? IdFormaPago, decimal? Tasa, short? IdMonedaOrigen, string Ruc, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal0",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal12",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal12 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 18,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NumeroFacturaPedido",
                    Size = 50,
                    Value = NumeroFacturaPedido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransaccionPadre",
                    Size = 50,
                    Value = TransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccionPadre",
                    Size = 6,
                    Value = TipoTransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoActual",
                    Size = 50,
                    Value = EstadoActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValorAdicional",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorAdicional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntrega",
                    Value = FechaHoraEntrega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdFormaPago",
                    Value = IdFormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tasa",
                    Precision = 18,
                    Scale = 4,
                    Value = Tasa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdMonedaOrigen",
                    Value = IdMonedaOrigen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Entrada_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Entrada_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdProveedor = @IdProveedor, @Subtotal0 = @Subtotal0, @Subtotal12 = @Subtotal12, @Total = @Total, @Saldo = @Saldo, @NumeroFacturaPedido = @NumeroFacturaPedido, @TransaccionPadre = @TransaccionPadre, @TipoTransaccionPadre = @TipoTransaccionPadre, @EstadoActual = @EstadoActual, @ValorAdicional = @ValorAdicional, @FechaHoraEntrega = @FechaHoraEntrega, @IdFormaPago = @IdFormaPago, @Tasa = @Tasa, @IdMonedaOrigen = @IdMonedaOrigen, @Ruc = @Ruc, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Entrada_DeepFindByAllPagedAsync(string Id, int? IdEmpresa, int? IdLocal, string Periodo, DateTime? Fecha, string TipoTransaccion, int? IdProveedor, decimal? Subtotal0, decimal? Subtotal12, decimal? Total, decimal? Saldo, string NumeroFacturaPedido, int? IdFormaPago, decimal? Tasa, short? IdMonedaOrigen, string Ruc, string TransaccionPadre, string TipoTransaccionPadre, string EstadoActual, decimal? ValorAdicional, DateTime? FechaHoraEntrega, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal0",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal12",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal12 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 18,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NumeroFacturaPedido",
                    Size = 50,
                    Value = NumeroFacturaPedido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdFormaPago",
                    Value = IdFormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tasa",
                    Precision = 18,
                    Scale = 4,
                    Value = Tasa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdMonedaOrigen",
                    Value = IdMonedaOrigen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransaccionPadre",
                    Size = 50,
                    Value = TransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccionPadre",
                    Size = 6,
                    Value = TipoTransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoActual",
                    Size = 50,
                    Value = EstadoActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValorAdicional",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorAdicional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntrega",
                    Value = FechaHoraEntrega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Entrada_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdProveedor = @IdProveedor, @Subtotal0 = @Subtotal0, @Subtotal12 = @Subtotal12, @Total = @Total, @Saldo = @Saldo, @NumeroFacturaPedido = @NumeroFacturaPedido, @IdFormaPago = @IdFormaPago, @Tasa = @Tasa, @IdMonedaOrigen = @IdMonedaOrigen, @Ruc = @Ruc, @TransaccionPadre = @TransaccionPadre, @TipoTransaccionPadre = @TipoTransaccionPadre, @EstadoActual = @EstadoActual, @ValorAdicional = @ValorAdicional, @FechaHoraEntrega = @FechaHoraEntrega, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Entrada_DeleteAsync(string Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Entrada_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Entrada_FindByAllResult>> Entrada_FindByAllAsync(string Id, int? IdEmpresa, int? IdLocal, string Periodo, DateTime? Fecha, string TipoTransaccion, int? IdProveedor, decimal? Subtotal0, decimal? Subtotal12, decimal? Total, decimal? Saldo, string NumeroFacturaPedido, int? IdFormaPago, string TransaccionPadre, string TipoTransaccionPadre, string EstadoActual, decimal? ValorAdicional, DateTime? FechaHoraEntrega, decimal? Tasa, short? IdMonedaOrigen, string Ruc, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal0",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal12",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal12 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 18,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NumeroFacturaPedido",
                    Size = 50,
                    Value = NumeroFacturaPedido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdFormaPago",
                    Value = IdFormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TransaccionPadre",
                    Size = 50,
                    Value = TransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccionPadre",
                    Size = 6,
                    Value = TipoTransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoActual",
                    Size = 50,
                    Value = EstadoActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValorAdicional",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorAdicional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntrega",
                    Value = FechaHoraEntrega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Tasa",
                    Precision = 18,
                    Scale = 4,
                    Value = Tasa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdMonedaOrigen",
                    Value = IdMonedaOrigen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Entrada_FindByAllResult>("EXEC @returnValue = [dbo].[Entrada_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdProveedor = @IdProveedor, @Subtotal0 = @Subtotal0, @Subtotal12 = @Subtotal12, @Total = @Total, @Saldo = @Saldo, @NumeroFacturaPedido = @NumeroFacturaPedido, @IdFormaPago = @IdFormaPago, @TransaccionPadre = @TransaccionPadre, @TipoTransaccionPadre = @TipoTransaccionPadre, @EstadoActual = @EstadoActual, @ValorAdicional = @ValorAdicional, @FechaHoraEntrega = @FechaHoraEntrega, @Tasa = @Tasa, @IdMonedaOrigen = @IdMonedaOrigen, @Ruc = @Ruc, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Entrada_FindByAllPagedResult>> Entrada_FindByAllPagedAsync(string Id, int? IdEmpresa, int? IdLocal, string Periodo, DateTime? Fecha, string TipoTransaccion, int? IdProveedor, decimal? Subtotal0, decimal? Subtotal12, decimal? Total, decimal? Saldo, string NumeroFacturaPedido, string TransaccionPadre, string TipoTransaccionPadre, string EstadoActual, decimal? ValorAdicional, DateTime? FechaHoraEntrega, int? IdFormaPago, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal0",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal12",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal12 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 18,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NumeroFacturaPedido",
                    Size = 50,
                    Value = NumeroFacturaPedido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransaccionPadre",
                    Size = 50,
                    Value = TransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccionPadre",
                    Size = 6,
                    Value = TipoTransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoActual",
                    Size = 50,
                    Value = EstadoActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValorAdicional",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorAdicional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntrega",
                    Value = FechaHoraEntrega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdFormaPago",
                    Value = IdFormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Entrada_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Entrada_FindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdProveedor = @IdProveedor, @Subtotal0 = @Subtotal0, @Subtotal12 = @Subtotal12, @Total = @Total, @Saldo = @Saldo, @NumeroFacturaPedido = @NumeroFacturaPedido, @TransaccionPadre = @TransaccionPadre, @TipoTransaccionPadre = @TipoTransaccionPadre, @EstadoActual = @EstadoActual, @ValorAdicional = @ValorAdicional, @FechaHoraEntrega = @FechaHoraEntrega, @IdFormaPago = @IdFormaPago, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Entrada_InsertAsync(int? IdEmpresa, int? IdLocal, string Periodo, DateTime? Fecha, string TipoTransaccion, int? IdProveedor, decimal? Subtotal0, decimal? Subtotal12, decimal? Total, decimal? Saldo, string NumeroFacturaPedido, int? IdFormaPago, decimal? Tasa, short? IdMonedaOrigen, string TransaccionPadre, string TipoTransaccionPadre, string EstadoActual, decimal? ValorAdicional, DateTime? FechaHoraEntrega, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string Ruc, string Observaciones, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal0",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal12",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal12 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 18,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NumeroFacturaPedido",
                    Size = 50,
                    Value = NumeroFacturaPedido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdFormaPago",
                    Value = IdFormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tasa",
                    Precision = 18,
                    Scale = 4,
                    Value = Tasa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdMonedaOrigen",
                    Value = IdMonedaOrigen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "TransaccionPadre",
                    Size = 50,
                    Value = TransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccionPadre",
                    Size = 6,
                    Value = TipoTransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoActual",
                    Size = 50,
                    Value = EstadoActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValorAdicional",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorAdicional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntrega",
                    Value = FechaHoraEntrega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 1000,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Entrada_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdProveedor = @IdProveedor, @Subtotal0 = @Subtotal0, @Subtotal12 = @Subtotal12, @Total = @Total, @Saldo = @Saldo, @NumeroFacturaPedido = @NumeroFacturaPedido, @IdFormaPago = @IdFormaPago, @Tasa = @Tasa, @IdMonedaOrigen = @IdMonedaOrigen, @TransaccionPadre = @TransaccionPadre, @TipoTransaccionPadre = @TipoTransaccionPadre, @EstadoActual = @EstadoActual, @ValorAdicional = @ValorAdicional, @FechaHoraEntrega = @FechaHoraEntrega, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Ruc = @Ruc, @Observaciones = @Observaciones", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Entrada_LoadAllResult>> Entrada_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Entrada_LoadAllResult>("EXEC @returnValue = [dbo].[Entrada_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Entrada_LoadByPKResult>> Entrada_LoadByPKAsync(string Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Entrada_LoadByPKResult>("EXEC @returnValue = [dbo].[Entrada_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Entrada_UpdateAsync(string Id, int? IdEmpresa, int? IdLocal, string Periodo, DateTime? Fecha, string TipoTransaccion, int? IdProveedor, decimal? Subtotal0, decimal? Subtotal12, decimal? Total, decimal? Saldo, string NumeroFacturaPedido, int? IdFormaPago, decimal? Tasa, short? IdMonedaOrigen, string TransaccionPadre, string TipoTransaccionPadre, string EstadoActual, decimal? ValorAdicional, DateTime? FechaHoraEntrega, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string Ruc, string Observaciones, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal0",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal12",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal12 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 18,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "NumeroFacturaPedido",
                    Size = 50,
                    Value = NumeroFacturaPedido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdFormaPago",
                    Value = IdFormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tasa",
                    Precision = 18,
                    Scale = 4,
                    Value = Tasa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdMonedaOrigen",
                    Value = IdMonedaOrigen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "TransaccionPadre",
                    Size = 50,
                    Value = TransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccionPadre",
                    Size = 6,
                    Value = TipoTransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoActual",
                    Size = 50,
                    Value = EstadoActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValorAdicional",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorAdicional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntrega",
                    Value = FechaHoraEntrega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 1000,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Entrada_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdProveedor = @IdProveedor, @Subtotal0 = @Subtotal0, @Subtotal12 = @Subtotal12, @Total = @Total, @Saldo = @Saldo, @NumeroFacturaPedido = @NumeroFacturaPedido, @IdFormaPago = @IdFormaPago, @Tasa = @Tasa, @IdMonedaOrigen = @IdMonedaOrigen, @TransaccionPadre = @TransaccionPadre, @TipoTransaccionPadre = @TipoTransaccionPadre, @EstadoActual = @EstadoActual, @ValorAdicional = @ValorAdicional, @FechaHoraEntrega = @FechaHoraEntrega, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Ruc = @Ruc, @Observaciones = @Observaciones", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Guia_InsertAsync(string IdSalida, int? IdEntidadChofer, int? IdVehiculo, DateTime? FechaInicio, DateTime? FechaFin, string DireccionEntrega, string Latitud, string Longitud, string Estado, string FotoUrl, int? IdEmpresa, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntidadChofer",
                    Value = IdEntidadChofer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdVehiculo",
                    Value = IdVehiculo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaInicio",
                    Value = FechaInicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaFin",
                    Value = FechaFin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DireccionEntrega",
                    Size = -1,
                    Value = DireccionEntrega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Latitud",
                    Size = 150,
                    Value = Latitud ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Longitud",
                    Size = 150,
                    Value = Longitud ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Estado",
                    Size = 10,
                    Value = Estado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FotoUrl",
                    Size = 500,
                    Value = FotoUrl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 50,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Guia_Insert] @IdSalida = @IdSalida, @IdEntidadChofer = @IdEntidadChofer, @IdVehiculo = @IdVehiculo, @FechaInicio = @FechaInicio, @FechaFin = @FechaFin, @DireccionEntrega = @DireccionEntrega, @Latitud = @Latitud, @Longitud = @Longitud, @Estado = @Estado, @FotoUrl = @FotoUrl, @IdEmpresa = @IdEmpresa, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<InformacionAdicional_FindByAllResult>> InformacionAdicional_FindByAllAsync(int? Id, string IdSalida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<InformacionAdicional_FindByAllResult>("EXEC @returnValue = [dbo].[InformacionAdicional_FindByAll] @Id = @Id, @IdSalida = @IdSalida", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InformacionAdicional_InsertAsync(string IdSalida, string TituloInfoAdicional, string InfoAdicional, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TituloInfoAdicional",
                    Size = 250,
                    Value = TituloInfoAdicional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InfoAdicional",
                    Size = 250,
                    Value = InfoAdicional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InformacionAdicional_Insert] @Id = @Id OUTPUT, @IdSalida = @IdSalida, @TituloInfoAdicional = @TituloInfoAdicional, @InfoAdicional = @InfoAdicional", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertOrUpdateCuentaPorCobrarAsXmlAsync(string XmlData, OutputParameter<int?> idEgreso, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteridEgreso = new SqlParameter
            {
                ParameterName = "idEgreso",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = idEgreso?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "XmlData",
                    Value = XmlData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Xml,
                },
                parameteridEgreso,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertOrUpdateCuentaPorCobrarAsXml] @XmlData = @XmlData, @idEgreso = @idEgreso OUTPUT", sqlParameters, cancellationToken);

            idEgreso.SetValue(parameteridEgreso.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Linea_DeepFindByAllResult>> Linea_DeepFindByAllAsync(int? Id, int? IdEmpresa, int? IdDivision, string Linea, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdDivision",
                    Value = IdDivision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Linea",
                    Size = 50,
                    Value = Linea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Linea_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Linea_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdDivision = @IdDivision, @Linea = @Linea, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Linea_DeepFindByAllPagedAsync(int? Id, int? IdEmpresa, int? IdDivision, string Linea, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdDivision",
                    Value = IdDivision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Linea",
                    Size = 50,
                    Value = Linea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Linea_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdDivision = @IdDivision, @Linea = @Linea, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Linea_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Linea_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Linea_FindByAllResult>> Linea_FindByAllAsync(int? Id, int? IdEmpresa, int? IdDivision, string Linea, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdDivision",
                    Value = IdDivision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Linea",
                    Size = 50,
                    Value = Linea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Linea_FindByAllResult>("EXEC @returnValue = [dbo].[Linea_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdDivision = @IdDivision, @Linea = @Linea, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Linea_FindByAllPagedResult>> Linea_FindByAllPagedAsync(int? Id, int? IdEmpresa, int? IdDivision, string Linea, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdDivision",
                    Value = IdDivision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Linea",
                    Size = 50,
                    Value = Linea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Linea_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Linea_FindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdDivision = @IdDivision, @Linea = @Linea, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Linea_InsertAsync(int? IdEmpresa, int? IdDivision, string Linea, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdDivision",
                    Value = IdDivision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Linea",
                    Size = 50,
                    Value = Linea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Linea_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @IdDivision = @IdDivision, @Linea = @Linea, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Linea_LoadAllResult>> Linea_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Linea_LoadAllResult>("EXEC @returnValue = [dbo].[Linea_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Linea_LoadByPKResult>> Linea_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Linea_LoadByPKResult>("EXEC @returnValue = [dbo].[Linea_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Linea_UpdateAsync(int? Id, int? IdEmpresa, int? IdDivision, string Linea, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdDivision",
                    Value = IdDivision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Linea",
                    Size = 50,
                    Value = Linea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Linea_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdDivision = @IdDivision, @Linea = @Linea, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<LocalBodega_DeepFindByAllResult>> LocalBodega_DeepFindByAllAsync(int? Id, int? IdEmpresa, string Tipo, string Local, string Direccion, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string DefaultRUC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tipo",
                    Size = 1,
                    Value = Tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Local",
                    Size = 50,
                    Value = Local ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 250,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultRUC",
                    Size = 13,
                    Value = DefaultRUC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<LocalBodega_DeepFindByAllResult>("EXEC @returnValue = [dbo].[LocalBodega_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @Tipo = @Tipo, @Local = @Local, @Direccion = @Direccion, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @DefaultRUC = @DefaultRUC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> LocalBodega_DeepFindByAllPagedAsync(int? Id, int? IdEmpresa, string Tipo, string Local, string Direccion, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string DefaultRUC, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tipo",
                    Size = 1,
                    Value = Tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Local",
                    Size = 50,
                    Value = Local ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 250,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultRUC",
                    Size = 13,
                    Value = DefaultRUC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[LocalBodega_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @Tipo = @Tipo, @Local = @Local, @Direccion = @Direccion, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @DefaultRUC = @DefaultRUC, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> LocalBodega_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[LocalBodega_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<LocalBodega_FindByAllResult>> LocalBodega_FindByAllAsync(int? Id, int? IdEmpresa, string Tipo, string Local, string Direccion, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string DefaultRUC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tipo",
                    Size = 1,
                    Value = Tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Local",
                    Size = 50,
                    Value = Local ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 250,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultRUC",
                    Size = 13,
                    Value = DefaultRUC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<LocalBodega_FindByAllResult>("EXEC @returnValue = [dbo].[LocalBodega_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @Tipo = @Tipo, @Local = @Local, @Direccion = @Direccion, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @DefaultRUC = @DefaultRUC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<LocalBodega_FindByAllPagedResult>> LocalBodega_FindByAllPagedAsync(int? Id, int? IdEmpresa, string Tipo, string Local, string Direccion, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string DefaultRUC, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tipo",
                    Size = 1,
                    Value = Tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Local",
                    Size = 50,
                    Value = Local ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 250,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultRUC",
                    Size = 13,
                    Value = DefaultRUC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<LocalBodega_FindByAllPagedResult>("EXEC @returnValue = [dbo].[LocalBodega_FindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @Tipo = @Tipo, @Local = @Local, @Direccion = @Direccion, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @DefaultRUC = @DefaultRUC, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> LocalBodega_InsertAsync(int? IdEmpresa, string Tipo, string Local, string Direccion, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string DefaultRUC, int? IdEntidad, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tipo",
                    Size = 1,
                    Value = Tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Local",
                    Size = 50,
                    Value = Local ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 250,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultRUC",
                    Size = 13,
                    Value = DefaultRUC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEntidad",
                    Value = IdEntidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[LocalBodega_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @Tipo = @Tipo, @Local = @Local, @Direccion = @Direccion, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @DefaultRUC = @DefaultRUC, @IdEntidad = @IdEntidad", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<LocalBodega_LoadAllResult>> LocalBodega_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<LocalBodega_LoadAllResult>("EXEC @returnValue = [dbo].[LocalBodega_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<LocalBodega_LoadByPKResult>> LocalBodega_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<LocalBodega_LoadByPKResult>("EXEC @returnValue = [dbo].[LocalBodega_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> LocalBodega_UpdateAsync(int? Id, int? IdEmpresa, string Tipo, string Local, string Direccion, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string DefaultRUC, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tipo",
                    Size = 1,
                    Value = Tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Local",
                    Size = 50,
                    Value = Local ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 250,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultRUC",
                    Size = 13,
                    Value = DefaultRUC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[LocalBodega_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @Tipo = @Tipo, @Local = @Local, @Direccion = @Direccion, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @DefaultRUC = @DefaultRUC", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Marca_DeepFindByAllResult>> Marca_DeepFindByAllAsync(int? Id, int? IdEmpresa, string Marca, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Marca",
                    Size = 50,
                    Value = Marca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Marca_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Marca_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @Marca = @Marca, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Marca_DeepFindByAllPagedAsync(int? Id, int? IdEmpresa, string Marca, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Marca",
                    Size = 50,
                    Value = Marca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Marca_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @Marca = @Marca, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Marca_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Marca_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Marca_FindByAllResult>> Marca_FindByAllAsync(int? Id, int? IdEmpresa, string Marca, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Marca",
                    Size = 50,
                    Value = Marca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Marca_FindByAllResult>("EXEC @returnValue = [dbo].[Marca_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @Marca = @Marca, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Marca_FindByAllPagedResult>> Marca_FindByAllPagedAsync(int? Id, int? IdEmpresa, string Marca, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Marca",
                    Size = 50,
                    Value = Marca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Marca_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Marca_FindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @Marca = @Marca, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Marca_InsertAsync(int? IdEmpresa, string Marca, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Marca",
                    Size = 50,
                    Value = Marca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Marca_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @Marca = @Marca, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Marca_LoadAllResult>> Marca_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Marca_LoadAllResult>("EXEC @returnValue = [dbo].[Marca_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Marca_LoadByPKResult>> Marca_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Marca_LoadByPKResult>("EXEC @returnValue = [dbo].[Marca_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Marca_UpdateAsync(int? Id, int? IdEmpresa, string Marca, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Marca",
                    Size = 50,
                    Value = Marca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Marca_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @Marca = @Marca, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MedioPago_DeepFindByAllResult>> MedioPago_DeepFindByAllAsync(int? Id, int? IdEmpresa, string MedioPago, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MedioPago",
                    Size = 50,
                    Value = MedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MedioPago_DeepFindByAllResult>("EXEC @returnValue = [dbo].[MedioPago_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @MedioPago = @MedioPago, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> MedioPago_DeepFindByAllPagedAsync(int? Id, int? IdEmpresa, string MedioPago, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MedioPago",
                    Size = 50,
                    Value = MedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[MedioPago_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @MedioPago = @MedioPago, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> MedioPago_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[MedioPago_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MedioPago_FindByAllResult>> MedioPago_FindByAllAsync(int? Id, int? IdEmpresa, string MedioPago, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MedioPago",
                    Size = 50,
                    Value = MedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MedioPago_FindByAllResult>("EXEC @returnValue = [dbo].[MedioPago_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @MedioPago = @MedioPago, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MedioPago_FindByAllPagedResult>> MedioPago_FindByAllPagedAsync(int? Id, int? IdEmpresa, string MedioPago, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MedioPago",
                    Size = 50,
                    Value = MedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MedioPago_FindByAllPagedResult>("EXEC @returnValue = [dbo].[MedioPago_FindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @MedioPago = @MedioPago, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> MedioPago_InsertAsync(int? IdEmpresa, string MedioPago, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MedioPago",
                    Size = 50,
                    Value = MedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[MedioPago_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @MedioPago = @MedioPago, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MedioPago_LoadAllResult>> MedioPago_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MedioPago_LoadAllResult>("EXEC @returnValue = [dbo].[MedioPago_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MedioPago_LoadByPKResult>> MedioPago_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MedioPago_LoadByPKResult>("EXEC @returnValue = [dbo].[MedioPago_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> MedioPago_UpdateAsync(int? Id, int? IdEmpresa, string MedioPago, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MedioPago",
                    Size = 50,
                    Value = MedioPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[MedioPago_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @MedioPago = @MedioPago, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Modulo_DeepFindByAllResult>> Modulo_DeepFindByAllAsync(short? Id, string Modulo, string Icono, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Modulo",
                    Size = 500,
                    Value = Modulo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Icono",
                    Size = 50,
                    Value = Icono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Modulo_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Modulo_DeepFindByAll] @Id = @Id, @Modulo = @Modulo, @Icono = @Icono, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Modulo_DeepFindByAllPagedAsync(short? Id, string Modulo, string Icono, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Modulo",
                    Size = 500,
                    Value = Modulo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Icono",
                    Size = 50,
                    Value = Icono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Modulo_DeepFindByAllPaged] @Id = @Id, @Modulo = @Modulo, @Icono = @Icono, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Modulo_DeleteAsync(short? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Modulo_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Modulo_FindByAllResult>> Modulo_FindByAllAsync(short? Id, string Modulo, string Icono, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Modulo",
                    Size = 500,
                    Value = Modulo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Icono",
                    Size = 50,
                    Value = Icono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Modulo_FindByAllResult>("EXEC @returnValue = [dbo].[Modulo_FindByAll] @Id = @Id, @Modulo = @Modulo, @Icono = @Icono, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Modulo_FindByAllPagedResult>> Modulo_FindByAllPagedAsync(short? Id, string Modulo, string Icono, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Modulo",
                    Size = 500,
                    Value = Modulo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Icono",
                    Size = 50,
                    Value = Icono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Modulo_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Modulo_FindByAllPaged] @Id = @Id, @Modulo = @Modulo, @Icono = @Icono, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Modulo_InsertAsync(string Modulo, string Icono, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<short?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "Modulo",
                    Size = 500,
                    Value = Modulo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Icono",
                    Size = 50,
                    Value = Icono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Modulo_Insert] @Id = @Id OUTPUT, @Modulo = @Modulo, @Icono = @Icono, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Modulo_LoadAllResult>> Modulo_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Modulo_LoadAllResult>("EXEC @returnValue = [dbo].[Modulo_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Modulo_LoadByPKResult>> Modulo_LoadByPKAsync(short? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Modulo_LoadByPKResult>("EXEC @returnValue = [dbo].[Modulo_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Modulo_UpdateAsync(short? Id, string Modulo, string Icono, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Modulo",
                    Size = 500,
                    Value = Modulo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Icono",
                    Size = 50,
                    Value = Icono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Modulo_Update] @Id = @Id, @Modulo = @Modulo, @Icono = @Icono, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Moneda_DeepFindByAllResult>> Moneda_DeepFindByAllAsync(short? Id, string CodigoISO, short? Pais, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoISO",
                    Size = 4,
                    Value = CodigoISO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pais",
                    Value = Pais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Moneda_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Moneda_DeepFindByAll] @Id = @Id, @CodigoISO = @CodigoISO, @Pais = @Pais, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Moneda_DeepFindByAllPagedAsync(short? Id, string CodigoISO, short? Pais, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoISO",
                    Size = 4,
                    Value = CodigoISO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pais",
                    Value = Pais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Moneda_DeepFindByAllPaged] @Id = @Id, @CodigoISO = @CodigoISO, @Pais = @Pais, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Moneda_DeleteAsync(short? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Moneda_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Moneda_FindByAllResult>> Moneda_FindByAllAsync(short? Id, string CodigoISO, short? Pais, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoISO",
                    Size = 4,
                    Value = CodigoISO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pais",
                    Value = Pais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Moneda_FindByAllResult>("EXEC @returnValue = [dbo].[Moneda_FindByAll] @Id = @Id, @CodigoISO = @CodigoISO, @Pais = @Pais, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Moneda_FindByAllPagedResult>> Moneda_FindByAllPagedAsync(short? Id, string CodigoISO, short? Pais, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoISO",
                    Size = 4,
                    Value = CodigoISO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pais",
                    Value = Pais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Moneda_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Moneda_FindByAllPaged] @Id = @Id, @CodigoISO = @CodigoISO, @Pais = @Pais, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Moneda_InsertAsync(string CodigoISO, short? Pais, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<short?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "CodigoISO",
                    Size = 4,
                    Value = CodigoISO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pais",
                    Value = Pais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Moneda_Insert] @Id = @Id OUTPUT, @CodigoISO = @CodigoISO, @Pais = @Pais, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Moneda_LoadAllResult>> Moneda_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Moneda_LoadAllResult>("EXEC @returnValue = [dbo].[Moneda_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Moneda_LoadByPKResult>> Moneda_LoadByPKAsync(short? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Moneda_LoadByPKResult>("EXEC @returnValue = [dbo].[Moneda_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Moneda_UpdateAsync(short? Id, string CodigoISO, short? Pais, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoISO",
                    Size = 4,
                    Value = CodigoISO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pais",
                    Value = Pais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Moneda_Update] @Id = @Id, @CodigoISO = @CodigoISO, @Pais = @Pais, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PagoCredito_DeepFindByAllResult>> PagoCredito_DeepFindByAllAsync(int? Id, int? IdEmpresa, int? IdProveedor, DateTime? Fecha, string Detalle, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Detalle",
                    Size = 50,
                    Value = Detalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PagoCredito_DeepFindByAllResult>("EXEC @returnValue = [dbo].[PagoCredito_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdProveedor = @IdProveedor, @Fecha = @Fecha, @Detalle = @Detalle, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PagoCredito_DeepFindByAllPagedAsync(int? Id, int? IdEmpresa, int? IdPorveedor, DateTime? Fecha, string Detalle, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPorveedor",
                    Value = IdPorveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Detalle",
                    Size = 50,
                    Value = Detalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PagoCredito_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdPorveedor = @IdPorveedor, @Fecha = @Fecha, @Detalle = @Detalle, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PagoCredito_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PagoCredito_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PagoCredito_FindByAllResult>> PagoCredito_FindByAllAsync(int? Id, int? IdEmpresa, DateTime? Fecha, string Detalle, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Detalle",
                    Size = 50,
                    Value = Detalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PagoCredito_FindByAllResult>("EXEC @returnValue = [dbo].[PagoCredito_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @Fecha = @Fecha, @Detalle = @Detalle, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PagoCredito_FindByAllPagedResult>> PagoCredito_FindByAllPagedAsync(int? Id, int? IdEmpresa, DateTime? Fecha, string Detalle, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Detalle",
                    Size = 50,
                    Value = Detalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PagoCredito_FindByAllPagedResult>("EXEC @returnValue = [dbo].[PagoCredito_FindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @Fecha = @Fecha, @Detalle = @Detalle, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PagoCredito_InsertAsync(int? IdEmpresa, int? IdProveedor, DateTime? Fecha, string Detalle, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Detalle",
                    Size = 50,
                    Value = Detalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PagoCredito_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @IdProveedor = @IdProveedor, @Fecha = @Fecha, @Detalle = @Detalle, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PagoCredito_LoadAllResult>> PagoCredito_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PagoCredito_LoadAllResult>("EXEC @returnValue = [dbo].[PagoCredito_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PagoCredito_LoadByPKResult>> PagoCredito_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PagoCredito_LoadByPKResult>("EXEC @returnValue = [dbo].[PagoCredito_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PagoCredito_UpdateAsync(int? Id, int? IdEmpresa, int? IdProveedor, DateTime? Fecha, string Detalle, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Detalle",
                    Size = 50,
                    Value = Detalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PagoCredito_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdProveedor = @IdProveedor, @Fecha = @Fecha, @Detalle = @Detalle, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Pais_DeepFindByAllResult>> Pais_DeepFindByAllAsync(short? Id, string Codigo, string Pais, string Nacionalidad, string CodigoNacionalidad, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 4,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pais",
                    Size = 100,
                    Value = Pais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nacionalidad",
                    Size = 100,
                    Value = Nacionalidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoNacionalidad",
                    Size = 4,
                    Value = CodigoNacionalidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Pais_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Pais_DeepFindByAll] @Id = @Id, @Codigo = @Codigo, @Pais = @Pais, @Nacionalidad = @Nacionalidad, @CodigoNacionalidad = @CodigoNacionalidad, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Pais_DeepFindByAllPagedAsync(short? Id, string Codigo, string Pais, string Nacionalidad, string CodigoNacionalidad, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 4,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pais",
                    Size = 100,
                    Value = Pais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nacionalidad",
                    Size = 100,
                    Value = Nacionalidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoNacionalidad",
                    Size = 4,
                    Value = CodigoNacionalidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Pais_DeepFindByAllPaged] @Id = @Id, @Codigo = @Codigo, @Pais = @Pais, @Nacionalidad = @Nacionalidad, @CodigoNacionalidad = @CodigoNacionalidad, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Pais_DeleteAsync(short? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Pais_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Pais_FindByAllResult>> Pais_FindByAllAsync(short? Id, string Codigo, string Pais, string Nacionalidad, string CodigoNacionalidad, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 4,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pais",
                    Size = 100,
                    Value = Pais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nacionalidad",
                    Size = 100,
                    Value = Nacionalidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoNacionalidad",
                    Size = 4,
                    Value = CodigoNacionalidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Pais_FindByAllResult>("EXEC @returnValue = [dbo].[Pais_FindByAll] @Id = @Id, @Codigo = @Codigo, @Pais = @Pais, @Nacionalidad = @Nacionalidad, @CodigoNacionalidad = @CodigoNacionalidad, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Pais_FindByAllPagedResult>> Pais_FindByAllPagedAsync(short? Id, string Codigo, string Pais, string Nacionalidad, string CodigoNacionalidad, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 4,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pais",
                    Size = 100,
                    Value = Pais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nacionalidad",
                    Size = 100,
                    Value = Nacionalidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoNacionalidad",
                    Size = 4,
                    Value = CodigoNacionalidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Pais_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Pais_FindByAllPaged] @Id = @Id, @Codigo = @Codigo, @Pais = @Pais, @Nacionalidad = @Nacionalidad, @CodigoNacionalidad = @CodigoNacionalidad, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Pais_InsertAsync(string Codigo, string Pais, string Nacionalidad, string CodigoNacionalidad, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<short?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 4,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pais",
                    Size = 100,
                    Value = Pais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nacionalidad",
                    Size = 100,
                    Value = Nacionalidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoNacionalidad",
                    Size = 4,
                    Value = CodigoNacionalidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Pais_Insert] @Id = @Id OUTPUT, @Codigo = @Codigo, @Pais = @Pais, @Nacionalidad = @Nacionalidad, @CodigoNacionalidad = @CodigoNacionalidad, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Pais_LoadAllResult>> Pais_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Pais_LoadAllResult>("EXEC @returnValue = [dbo].[Pais_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Pais_LoadByPKResult>> Pais_LoadByPKAsync(short? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Pais_LoadByPKResult>("EXEC @returnValue = [dbo].[Pais_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Pais_UpdateAsync(short? Id, string Codigo, string Pais, string Nacionalidad, string CodigoNacionalidad, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 4,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Pais",
                    Size = 100,
                    Value = Pais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nacionalidad",
                    Size = 100,
                    Value = Nacionalidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoNacionalidad",
                    Size = 4,
                    Value = CodigoNacionalidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Pais_Update] @Id = @Id, @Codigo = @Codigo, @Pais = @Pais, @Nacionalidad = @Nacionalidad, @CodigoNacionalidad = @CodigoNacionalidad, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Pantalla_DeepFindByAllResult>> Pantalla_DeepFindByAllAsync(short? Id, short? IdModulo, short? IdGrupo, string Nombre, string Descripcion, string NombreAssembly, string Icono, string Ayuda, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? Orden, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdModulo",
                    Value = IdModulo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdGrupo",
                    Value = IdGrupo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 100,
                    Value = Nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Descripcion",
                    Size = 150,
                    Value = Descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NombreAssembly",
                    Size = 100,
                    Value = NombreAssembly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Icono",
                    Size = 50,
                    Value = Icono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Ayuda",
                    Size = 250,
                    Value = Ayuda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Orden",
                    Value = Orden ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Pantalla_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Pantalla_DeepFindByAll] @Id = @Id, @IdModulo = @IdModulo, @IdGrupo = @IdGrupo, @Nombre = @Nombre, @Descripcion = @Descripcion, @NombreAssembly = @NombreAssembly, @Icono = @Icono, @Ayuda = @Ayuda, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Orden = @Orden", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Pantalla_DeepFindByAllPagedAsync(short? Id, short? IdModulo, short? IdGrupo, string Nombre, string Descripcion, string NombreAssembly, string Icono, string Ayuda, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? Orden, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdModulo",
                    Value = IdModulo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdGrupo",
                    Value = IdGrupo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 100,
                    Value = Nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Descripcion",
                    Size = 150,
                    Value = Descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NombreAssembly",
                    Size = 100,
                    Value = NombreAssembly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Icono",
                    Size = 50,
                    Value = Icono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Ayuda",
                    Size = 250,
                    Value = Ayuda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Orden",
                    Value = Orden ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Pantalla_DeepFindByAllPaged] @Id = @Id, @IdModulo = @IdModulo, @IdGrupo = @IdGrupo, @Nombre = @Nombre, @Descripcion = @Descripcion, @NombreAssembly = @NombreAssembly, @Icono = @Icono, @Ayuda = @Ayuda, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Orden = @Orden, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Pantalla_DeleteAsync(short? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Pantalla_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Pantalla_FindByAllResult>> Pantalla_FindByAllAsync(short? Id, short? IdModulo, short? IdGrupo, string Nombre, string Descripcion, string NombreAssembly, string Icono, string Ayuda, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? Orden, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdModulo",
                    Value = IdModulo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdGrupo",
                    Value = IdGrupo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 100,
                    Value = Nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Descripcion",
                    Size = 150,
                    Value = Descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NombreAssembly",
                    Size = 100,
                    Value = NombreAssembly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Icono",
                    Size = 50,
                    Value = Icono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Ayuda",
                    Size = 250,
                    Value = Ayuda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Orden",
                    Value = Orden ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Pantalla_FindByAllResult>("EXEC @returnValue = [dbo].[Pantalla_FindByAll] @Id = @Id, @IdModulo = @IdModulo, @IdGrupo = @IdGrupo, @Nombre = @Nombre, @Descripcion = @Descripcion, @NombreAssembly = @NombreAssembly, @Icono = @Icono, @Ayuda = @Ayuda, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Orden = @Orden", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Pantalla_FindByAllPagedResult>> Pantalla_FindByAllPagedAsync(short? Id, short? IdModulo, short? IdGrupo, string Nombre, string Descripcion, string NombreAssembly, string Icono, string Ayuda, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? Orden, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdModulo",
                    Value = IdModulo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdGrupo",
                    Value = IdGrupo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 100,
                    Value = Nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Descripcion",
                    Size = 150,
                    Value = Descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NombreAssembly",
                    Size = 100,
                    Value = NombreAssembly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Icono",
                    Size = 50,
                    Value = Icono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Ayuda",
                    Size = 250,
                    Value = Ayuda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Orden",
                    Value = Orden ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Pantalla_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Pantalla_FindByAllPaged] @Id = @Id, @IdModulo = @IdModulo, @IdGrupo = @IdGrupo, @Nombre = @Nombre, @Descripcion = @Descripcion, @NombreAssembly = @NombreAssembly, @Icono = @Icono, @Ayuda = @Ayuda, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Orden = @Orden, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Pantalla_InsertAsync(short? IdModulo, short? IdGrupo, string Nombre, string Descripcion, string NombreAssembly, string Icono, string Ayuda, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? Orden, OutputParameter<short?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdModulo",
                    Value = IdModulo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdGrupo",
                    Value = IdGrupo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 100,
                    Value = Nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Descripcion",
                    Size = 150,
                    Value = Descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NombreAssembly",
                    Size = 100,
                    Value = NombreAssembly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Icono",
                    Size = 50,
                    Value = Icono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Ayuda",
                    Size = 250,
                    Value = Ayuda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Orden",
                    Value = Orden ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Pantalla_Insert] @Id = @Id OUTPUT, @IdModulo = @IdModulo, @IdGrupo = @IdGrupo, @Nombre = @Nombre, @Descripcion = @Descripcion, @NombreAssembly = @NombreAssembly, @Icono = @Icono, @Ayuda = @Ayuda, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Orden = @Orden", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Pantalla_LoadAllResult>> Pantalla_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Pantalla_LoadAllResult>("EXEC @returnValue = [dbo].[Pantalla_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Pantalla_LoadByPKResult>> Pantalla_LoadByPKAsync(short? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Pantalla_LoadByPKResult>("EXEC @returnValue = [dbo].[Pantalla_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Pantalla_UpdateAsync(short? Id, short? IdModulo, short? IdGrupo, string Nombre, string Descripcion, string NombreAssembly, string Icono, string Ayuda, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? Orden, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdModulo",
                    Value = IdModulo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdGrupo",
                    Value = IdGrupo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 100,
                    Value = Nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Descripcion",
                    Size = 150,
                    Value = Descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NombreAssembly",
                    Size = 100,
                    Value = NombreAssembly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Icono",
                    Size = 50,
                    Value = Icono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Ayuda",
                    Size = 250,
                    Value = Ayuda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Orden",
                    Value = Orden ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Pantalla_Update] @Id = @Id, @IdModulo = @IdModulo, @IdGrupo = @IdGrupo, @Nombre = @Nombre, @Descripcion = @Descripcion, @NombreAssembly = @NombreAssembly, @Icono = @Icono, @Ayuda = @Ayuda, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Orden = @Orden", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PantallaXPerfil_DeepFindByAllResult>> PantallaXPerfil_DeepFindByAllAsync(short? Id, short? IdPerfil, short? IdPantalla, bool? Guardar, bool? Modificar, bool? Eliminar, bool? Consultar, bool? VistaPreliminar, bool? Imprimir, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdPerfil",
                    Value = IdPerfil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdPantalla",
                    Value = IdPantalla ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Guardar",
                    Value = Guardar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Modificar",
                    Value = Modificar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Eliminar",
                    Value = Eliminar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Consultar",
                    Value = Consultar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "VistaPreliminar",
                    Value = VistaPreliminar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Imprimir",
                    Value = Imprimir ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PantallaXPerfil_DeepFindByAllResult>("EXEC @returnValue = [dbo].[PantallaXPerfil_DeepFindByAll] @Id = @Id, @IdPerfil = @IdPerfil, @IdPantalla = @IdPantalla, @Guardar = @Guardar, @Modificar = @Modificar, @Eliminar = @Eliminar, @Consultar = @Consultar, @VistaPreliminar = @VistaPreliminar, @Imprimir = @Imprimir, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PantallaXPerfil_DeepFindByAllPagedAsync(short? Id, short? IdPerfil, short? IdPantalla, bool? Guardar, bool? Modificar, bool? Eliminar, bool? Consultar, bool? VistaPreliminar, bool? Imprimir, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdPerfil",
                    Value = IdPerfil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdPantalla",
                    Value = IdPantalla ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Guardar",
                    Value = Guardar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Modificar",
                    Value = Modificar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Eliminar",
                    Value = Eliminar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Consultar",
                    Value = Consultar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "VistaPreliminar",
                    Value = VistaPreliminar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Imprimir",
                    Value = Imprimir ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PantallaXPerfil_DeepFindByAllPaged] @Id = @Id, @IdPerfil = @IdPerfil, @IdPantalla = @IdPantalla, @Guardar = @Guardar, @Modificar = @Modificar, @Eliminar = @Eliminar, @Consultar = @Consultar, @VistaPreliminar = @VistaPreliminar, @Imprimir = @Imprimir, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PantallaXPerfil_DeleteAsync(short? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PantallaXPerfil_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PantallaXPerfil_FindByAllResult>> PantallaXPerfil_FindByAllAsync(short? Id, short? IdPerfil, short? IdPantalla, bool? Guardar, bool? Modificar, bool? Eliminar, bool? Consultar, bool? VistaPreliminar, bool? Imprimir, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdPerfil",
                    Value = IdPerfil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdPantalla",
                    Value = IdPantalla ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Guardar",
                    Value = Guardar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Modificar",
                    Value = Modificar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Eliminar",
                    Value = Eliminar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Consultar",
                    Value = Consultar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "VistaPreliminar",
                    Value = VistaPreliminar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Imprimir",
                    Value = Imprimir ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PantallaXPerfil_FindByAllResult>("EXEC @returnValue = [dbo].[PantallaXPerfil_FindByAll] @Id = @Id, @IdPerfil = @IdPerfil, @IdPantalla = @IdPantalla, @Guardar = @Guardar, @Modificar = @Modificar, @Eliminar = @Eliminar, @Consultar = @Consultar, @VistaPreliminar = @VistaPreliminar, @Imprimir = @Imprimir, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PantallaXPerfil_FindByAllPagedResult>> PantallaXPerfil_FindByAllPagedAsync(short? Id, short? IdPerfil, short? IdPantalla, bool? Guardar, bool? Modificar, bool? Eliminar, bool? Consultar, bool? VistaPreliminar, bool? Imprimir, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdPerfil",
                    Value = IdPerfil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdPantalla",
                    Value = IdPantalla ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Guardar",
                    Value = Guardar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Modificar",
                    Value = Modificar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Eliminar",
                    Value = Eliminar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Consultar",
                    Value = Consultar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "VistaPreliminar",
                    Value = VistaPreliminar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Imprimir",
                    Value = Imprimir ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PantallaXPerfil_FindByAllPagedResult>("EXEC @returnValue = [dbo].[PantallaXPerfil_FindByAllPaged] @Id = @Id, @IdPerfil = @IdPerfil, @IdPantalla = @IdPantalla, @Guardar = @Guardar, @Modificar = @Modificar, @Eliminar = @Eliminar, @Consultar = @Consultar, @VistaPreliminar = @VistaPreliminar, @Imprimir = @Imprimir, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PantallaXPerfil_InsertAsync(short? IdPerfil, short? IdPantalla, bool? Guardar, bool? Modificar, bool? Eliminar, bool? Consultar, bool? VistaPreliminar, bool? Imprimir, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<short?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdPerfil",
                    Value = IdPerfil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdPantalla",
                    Value = IdPantalla ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Guardar",
                    Value = Guardar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Modificar",
                    Value = Modificar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Eliminar",
                    Value = Eliminar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Consultar",
                    Value = Consultar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "VistaPreliminar",
                    Value = VistaPreliminar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Imprimir",
                    Value = Imprimir ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PantallaXPerfil_Insert] @Id = @Id OUTPUT, @IdPerfil = @IdPerfil, @IdPantalla = @IdPantalla, @Guardar = @Guardar, @Modificar = @Modificar, @Eliminar = @Eliminar, @Consultar = @Consultar, @VistaPreliminar = @VistaPreliminar, @Imprimir = @Imprimir, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PantallaXPerfil_LoadAllResult>> PantallaXPerfil_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PantallaXPerfil_LoadAllResult>("EXEC @returnValue = [dbo].[PantallaXPerfil_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PantallaXPerfil_LoadByPKResult>> PantallaXPerfil_LoadByPKAsync(short? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PantallaXPerfil_LoadByPKResult>("EXEC @returnValue = [dbo].[PantallaXPerfil_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PantallaXPerfil_UpdateAsync(short? Id, short? IdPerfil, short? IdPantalla, bool? Guardar, bool? Modificar, bool? Eliminar, bool? Consultar, bool? VistaPreliminar, bool? Imprimir, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdPerfil",
                    Value = IdPerfil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdPantalla",
                    Value = IdPantalla ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Guardar",
                    Value = Guardar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Modificar",
                    Value = Modificar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Eliminar",
                    Value = Eliminar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Consultar",
                    Value = Consultar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "VistaPreliminar",
                    Value = VistaPreliminar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Imprimir",
                    Value = Imprimir ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PantallaXPerfil_Update] @Id = @Id, @IdPerfil = @IdPerfil, @IdPantalla = @IdPantalla, @Guardar = @Guardar, @Modificar = @Modificar, @Eliminar = @Eliminar, @Consultar = @Consultar, @VistaPreliminar = @VistaPreliminar, @Imprimir = @Imprimir, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Perfil_DeepFindByAllResult>> Perfil_DeepFindByAllAsync(short? Id, string Perfil, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Perfil",
                    Size = 250,
                    Value = Perfil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Perfil_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Perfil_DeepFindByAll] @Id = @Id, @Perfil = @Perfil, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Perfil_DeepFindByAllPagedAsync(short? Id, string Perfil, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Perfil",
                    Size = 250,
                    Value = Perfil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Perfil_DeepFindByAllPaged] @Id = @Id, @Perfil = @Perfil, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Perfil_DeleteAsync(short? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Perfil_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Perfil_FindByAllResult>> Perfil_FindByAllAsync(short? Id, string Perfil, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Perfil",
                    Size = 250,
                    Value = Perfil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Perfil_FindByAllResult>("EXEC @returnValue = [dbo].[Perfil_FindByAll] @Id = @Id, @Perfil = @Perfil, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Perfil_FindByAllPagedResult>> Perfil_FindByAllPagedAsync(short? Id, string Perfil, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Perfil",
                    Size = 250,
                    Value = Perfil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Perfil_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Perfil_FindByAllPaged] @Id = @Id, @Perfil = @Perfil, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Perfil_InsertAsync(string Perfil, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<short?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "Perfil",
                    Size = 250,
                    Value = Perfil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Perfil_Insert] @Id = @Id OUTPUT, @Perfil = @Perfil, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Perfil_LoadAllResult>> Perfil_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Perfil_LoadAllResult>("EXEC @returnValue = [dbo].[Perfil_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Perfil_LoadByPKResult>> Perfil_LoadByPKAsync(short? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Perfil_LoadByPKResult>("EXEC @returnValue = [dbo].[Perfil_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Perfil_UpdateAsync(short? Id, string Perfil, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Perfil",
                    Size = 250,
                    Value = Perfil ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Perfil_Update] @Id = @Id, @Perfil = @Perfil, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PR_CuentaPorCobrar_ByIdClienteResult>> PR_CuentaPorCobrar_ByIdClienteAsync(int? idEmpresa, int? idCliente, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idEmpresa",
                    Value = idEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idCliente",
                    Value = idCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PR_CuentaPorCobrar_ByIdClienteResult>("EXEC @returnValue = [dbo].[PR_CuentaPorCobrar_ByIdCliente] @idEmpresa = @idEmpresa, @idCliente = @idCliente", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Precio_DeepFindByAllResult>> Precio_DeepFindByAllAsync(int? Id, int? IdProducto, int? IdTipoUnidad, decimal? Precio, int? Moneda, bool? IncluyeIva, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 2,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Moneda",
                    Value = Moneda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIva",
                    Value = IncluyeIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Precio_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Precio_DeepFindByAll] @Id = @Id, @IdProducto = @IdProducto, @IdTipoUnidad = @IdTipoUnidad, @Precio = @Precio, @Moneda = @Moneda, @IncluyeIva = @IncluyeIva, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Precio_DeepFindByAllPagedAsync(int? Id, int? IdProducto, int? IdTipoUnidad, decimal? Precio, int? Moneda, bool? IncluyeIva, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 2,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Moneda",
                    Value = Moneda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIva",
                    Value = IncluyeIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Precio_DeepFindByAllPaged] @Id = @Id, @IdProducto = @IdProducto, @IdTipoUnidad = @IdTipoUnidad, @Precio = @Precio, @Moneda = @Moneda, @IncluyeIva = @IncluyeIva, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Precio_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Precio_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Precio_FindByAllResult>> Precio_FindByAllAsync(int? Id, int? IdProducto, int? IdTipoUnidad, decimal? Precio, int? Moneda, bool? IncluyeIva, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 2,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Moneda",
                    Value = Moneda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIva",
                    Value = IncluyeIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Precio_FindByAllResult>("EXEC @returnValue = [dbo].[Precio_FindByAll] @Id = @Id, @IdProducto = @IdProducto, @IdTipoUnidad = @IdTipoUnidad, @Precio = @Precio, @Moneda = @Moneda, @IncluyeIva = @IncluyeIva, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Precio_FindByAllPagedResult>> Precio_FindByAllPagedAsync(int? Id, int? IdProducto, int? IdTipoUnidad, decimal? Precio, int? Moneda, bool? IncluyeIva, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 2,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Moneda",
                    Value = Moneda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIva",
                    Value = IncluyeIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Precio_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Precio_FindByAllPaged] @Id = @Id, @IdProducto = @IdProducto, @IdTipoUnidad = @IdTipoUnidad, @Precio = @Precio, @Moneda = @Moneda, @IncluyeIva = @IncluyeIva, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Precio_InsertAsync(int? IdProducto, int? IdTipoUnidad, decimal? Precio, int? Moneda, bool? IncluyeIva, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 2,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Moneda",
                    Value = Moneda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIva",
                    Value = IncluyeIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Precio_Insert] @Id = @Id OUTPUT, @IdProducto = @IdProducto, @IdTipoUnidad = @IdTipoUnidad, @Precio = @Precio, @Moneda = @Moneda, @IncluyeIva = @IncluyeIva, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Precio_LoadAllResult>> Precio_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Precio_LoadAllResult>("EXEC @returnValue = [dbo].[Precio_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Precio_LoadByPKResult>> Precio_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Precio_LoadByPKResult>("EXEC @returnValue = [dbo].[Precio_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Precio_UpdateAsync(int? Id, int? IdProducto, int? IdTipoUnidad, decimal? Precio, int? Moneda, bool? IncluyeIva, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 2,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Moneda",
                    Value = Moneda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIva",
                    Value = IncluyeIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Precio_Update] @Id = @Id, @IdProducto = @IdProducto, @IdTipoUnidad = @IdTipoUnidad, @Precio = @Precio, @Moneda = @Moneda, @IncluyeIva = @IncluyeIva, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PresupuestoFacturacion_DeepFindByAllResult>> PresupuestoFacturacion_DeepFindByAllAsync(int? Id, int? IdEmpresa, string Ruc, string Mes, string Fecha, decimal? Presupuesto, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Mes",
                    Size = 7,
                    Value = Mes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Size = 20,
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Presupuesto",
                    Precision = 18,
                    Scale = 2,
                    Value = Presupuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PresupuestoFacturacion_DeepFindByAllResult>("EXEC @returnValue = [dbo].[PresupuestoFacturacion_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @Ruc = @Ruc, @Mes = @Mes, @Fecha = @Fecha, @Presupuesto = @Presupuesto, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PresupuestoFacturacion_DeepFindByAllPagedAsync(int? Id, int? IdEmpresa, string Ruc, string Mes, string Fecha, decimal? Presupuesto, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Mes",
                    Size = 7,
                    Value = Mes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Size = 20,
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Presupuesto",
                    Precision = 18,
                    Scale = 2,
                    Value = Presupuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PresupuestoFacturacion_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @Ruc = @Ruc, @Mes = @Mes, @Fecha = @Fecha, @Presupuesto = @Presupuesto, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PresupuestoFacturacion_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PresupuestoFacturacion_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PresupuestoFacturacion_FindByAllResult>> PresupuestoFacturacion_FindByAllAsync(int? Id, int? IdEmpresa, string Ruc, string Mes, string Fecha, decimal? Presupuesto, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Mes",
                    Size = 7,
                    Value = Mes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Size = 20,
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Presupuesto",
                    Precision = 18,
                    Scale = 2,
                    Value = Presupuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PresupuestoFacturacion_FindByAllResult>("EXEC @returnValue = [dbo].[PresupuestoFacturacion_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @Ruc = @Ruc, @Mes = @Mes, @Fecha = @Fecha, @Presupuesto = @Presupuesto, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PresupuestoFacturacion_FindByAllPagedResult>> PresupuestoFacturacion_FindByAllPagedAsync(int? Id, int? IdEmpresa, string Ruc, string Mes, string Fecha, decimal? Presupuesto, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Mes",
                    Size = 7,
                    Value = Mes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Size = 20,
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Presupuesto",
                    Precision = 18,
                    Scale = 2,
                    Value = Presupuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PresupuestoFacturacion_FindByAllPagedResult>("EXEC @returnValue = [dbo].[PresupuestoFacturacion_FindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @Ruc = @Ruc, @Mes = @Mes, @Fecha = @Fecha, @Presupuesto = @Presupuesto, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PresupuestoFacturacion_InsertAsync(int? IdEmpresa, string Ruc, string Mes, string Fecha, decimal? Presupuesto, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Mes",
                    Size = 7,
                    Value = Mes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Size = 20,
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "Presupuesto",
                    Precision = 18,
                    Scale = 2,
                    Value = Presupuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PresupuestoFacturacion_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @Ruc = @Ruc, @Mes = @Mes, @Fecha = @Fecha, @Presupuesto = @Presupuesto, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PresupuestoFacturacion_LoadAllResult>> PresupuestoFacturacion_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PresupuestoFacturacion_LoadAllResult>("EXEC @returnValue = [dbo].[PresupuestoFacturacion_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PresupuestoFacturacion_LoadByPKResult>> PresupuestoFacturacion_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PresupuestoFacturacion_LoadByPKResult>("EXEC @returnValue = [dbo].[PresupuestoFacturacion_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> PresupuestoFacturacion_UpdateAsync(int? Id, int? IdEmpresa, string Ruc, string Mes, string Fecha, decimal? Presupuesto, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Mes",
                    Size = 7,
                    Value = Mes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Size = 20,
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "Presupuesto",
                    Precision = 18,
                    Scale = 2,
                    Value = Presupuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[PresupuestoFacturacion_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @Ruc = @Ruc, @Mes = @Mes, @Fecha = @Fecha, @Presupuesto = @Presupuesto, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Producto_DeepFindByAllResult>> Producto_DeepFindByAllAsync(int? Id, short? IdEmpresa, string CodigoProveedor, string CodigoInterno, string CodigoBarra, string TipoProducto, string Producto, string Descripcion, string DescipcionBusqueda, int? Stock, int? StockMinimo, decimal? Costo, int? UnidadMedida, decimal? Descuento, bool? CobraIva, int? IdDivision, int? IdLinea, int? IdCategoria, int? IdMarca, decimal? Peso, decimal? Volumen, string RegistroSanitario, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? ProductoPadre, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoProveedor",
                    Size = 50,
                    Value = CodigoProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoInterno",
                    Size = 50,
                    Value = CodigoInterno ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoBarra",
                    Size = 50,
                    Value = CodigoBarra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoProducto",
                    Size = 50,
                    Value = TipoProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Producto",
                    Size = 200,
                    Value = Producto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Descripcion",
                    Size = 1000,
                    Value = Descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DescipcionBusqueda",
                    Size = 5000,
                    Value = DescipcionBusqueda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StockMinimo",
                    Value = StockMinimo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Costo",
                    Precision = 18,
                    Scale = 4,
                    Value = Costo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedida",
                    Value = UnidadMedida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CobraIva",
                    Value = CobraIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IdDivision",
                    Value = IdDivision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLinea",
                    Value = IdLinea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCategoria",
                    Value = IdCategoria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMarca",
                    Value = IdMarca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Peso",
                    Precision = 18,
                    Scale = 4,
                    Value = Peso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Volumen",
                    Precision = 18,
                    Scale = 4,
                    Value = Volumen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "RegistroSanitario",
                    Size = 50,
                    Value = RegistroSanitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ProductoPadre",
                    Value = ProductoPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Producto_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Producto_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @CodigoProveedor = @CodigoProveedor, @CodigoInterno = @CodigoInterno, @CodigoBarra = @CodigoBarra, @TipoProducto = @TipoProducto, @Producto = @Producto, @Descripcion = @Descripcion, @DescipcionBusqueda = @DescipcionBusqueda, @Stock = @Stock, @StockMinimo = @StockMinimo, @Costo = @Costo, @UnidadMedida = @UnidadMedida, @Descuento = @Descuento, @CobraIva = @CobraIva, @IdDivision = @IdDivision, @IdLinea = @IdLinea, @IdCategoria = @IdCategoria, @IdMarca = @IdMarca, @Peso = @Peso, @Volumen = @Volumen, @RegistroSanitario = @RegistroSanitario, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @ProductoPadre = @ProductoPadre", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Producto_DeepFindByAllPagedAsync(int? Id, short? IdEmpresa, string CodigoProveedor, string CodigoInterno, string CodigoBarra, string TipoProducto, string Producto, string Descripcion, string DescipcionBusqueda, int? Stock, int? StockMinimo, decimal? Costo, int? UnidadMedida, decimal? Descuento, bool? CobraIva, int? IdDivision, int? IdLinea, int? IdCategoria, int? IdMarca, decimal? Peso, decimal? Volumen, string RegistroSanitario, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoProveedor",
                    Size = 50,
                    Value = CodigoProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoInterno",
                    Size = 50,
                    Value = CodigoInterno ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoBarra",
                    Size = 50,
                    Value = CodigoBarra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoProducto",
                    Size = 50,
                    Value = TipoProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Producto",
                    Size = 200,
                    Value = Producto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Descripcion",
                    Size = 1000,
                    Value = Descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DescipcionBusqueda",
                    Size = 5000,
                    Value = DescipcionBusqueda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StockMinimo",
                    Value = StockMinimo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Costo",
                    Precision = 18,
                    Scale = 4,
                    Value = Costo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedida",
                    Value = UnidadMedida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CobraIva",
                    Value = CobraIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IdDivision",
                    Value = IdDivision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLinea",
                    Value = IdLinea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCategoria",
                    Value = IdCategoria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMarca",
                    Value = IdMarca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Peso",
                    Precision = 18,
                    Scale = 4,
                    Value = Peso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Volumen",
                    Precision = 18,
                    Scale = 4,
                    Value = Volumen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "RegistroSanitario",
                    Size = 50,
                    Value = RegistroSanitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Producto_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @CodigoProveedor = @CodigoProveedor, @CodigoInterno = @CodigoInterno, @CodigoBarra = @CodigoBarra, @TipoProducto = @TipoProducto, @Producto = @Producto, @Descripcion = @Descripcion, @DescipcionBusqueda = @DescipcionBusqueda, @Stock = @Stock, @StockMinimo = @StockMinimo, @Costo = @Costo, @UnidadMedida = @UnidadMedida, @Descuento = @Descuento, @CobraIva = @CobraIva, @IdDivision = @IdDivision, @IdLinea = @IdLinea, @IdCategoria = @IdCategoria, @IdMarca = @IdMarca, @Peso = @Peso, @Volumen = @Volumen, @RegistroSanitario = @RegistroSanitario, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Producto_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Producto_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Producto_FindByAllResult>> Producto_FindByAllAsync(int? Id, short? IdEmpresa, string CodigoProveedor, string CodigoInterno, string CodigoBarra, string TipoProducto, string Producto, string Descripcion, string DescipcionBusqueda, int? Stock, int? StockMinimo, decimal? Costo, int? UnidadMedida, decimal? Descuento, bool? CobraIva, int? IdDivision, int? IdLinea, int? IdCategoria, int? IdMarca, decimal? Peso, decimal? Volumen, string RegistroSanitario, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? ProductoPadre, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoProveedor",
                    Size = 50,
                    Value = CodigoProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoInterno",
                    Size = 50,
                    Value = CodigoInterno ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoBarra",
                    Size = 50,
                    Value = CodigoBarra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoProducto",
                    Size = 50,
                    Value = TipoProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Producto",
                    Size = 200,
                    Value = Producto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Descripcion",
                    Size = 1000,
                    Value = Descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DescipcionBusqueda",
                    Size = 5000,
                    Value = DescipcionBusqueda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StockMinimo",
                    Value = StockMinimo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Costo",
                    Precision = 18,
                    Scale = 4,
                    Value = Costo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedida",
                    Value = UnidadMedida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CobraIva",
                    Value = CobraIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IdDivision",
                    Value = IdDivision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLinea",
                    Value = IdLinea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCategoria",
                    Value = IdCategoria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMarca",
                    Value = IdMarca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Peso",
                    Precision = 18,
                    Scale = 4,
                    Value = Peso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Volumen",
                    Precision = 18,
                    Scale = 4,
                    Value = Volumen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "RegistroSanitario",
                    Size = 50,
                    Value = RegistroSanitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ProductoPadre",
                    Value = ProductoPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Producto_FindByAllResult>("EXEC @returnValue = [dbo].[Producto_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @CodigoProveedor = @CodigoProveedor, @CodigoInterno = @CodigoInterno, @CodigoBarra = @CodigoBarra, @TipoProducto = @TipoProducto, @Producto = @Producto, @Descripcion = @Descripcion, @DescipcionBusqueda = @DescipcionBusqueda, @Stock = @Stock, @StockMinimo = @StockMinimo, @Costo = @Costo, @UnidadMedida = @UnidadMedida, @Descuento = @Descuento, @CobraIva = @CobraIva, @IdDivision = @IdDivision, @IdLinea = @IdLinea, @IdCategoria = @IdCategoria, @IdMarca = @IdMarca, @Peso = @Peso, @Volumen = @Volumen, @RegistroSanitario = @RegistroSanitario, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @ProductoPadre = @ProductoPadre", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Producto_FindByCodigoInternoResult>> Producto_FindByCodigoInternoAsync(string CodigoInterno, int? IdEmpresa, int? IdLocal, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CodigoInterno",
                    Size = 50,
                    Value = CodigoInterno ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Producto_FindByCodigoInternoResult>("EXEC @returnValue = [dbo].[Producto_FindByCodigoInterno] @CodigoInterno = @CodigoInterno, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Producto_InsertAsync(short? IdEmpresa, string CodigoProveedor, string CodigoInterno, string CodigoBarra, string TipoProducto, string Producto, string Descripcion, string DescipcionBusqueda, int? Stock, int? StockMinimo, decimal? Costo, int? UnidadMedida, decimal? Descuento, bool? CobraIva, int? IdDivision, int? IdLinea, int? IdCategoria, int? IdMarca, decimal? Peso, decimal? Volumen, string RegistroSanitario, string PathArchivo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? ProductoPadre, int? IdTarifaImpuesto, int? PorcentajeTarifaImpuesto, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoProveedor",
                    Size = 50,
                    Value = CodigoProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoInterno",
                    Size = 50,
                    Value = CodigoInterno ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoBarra",
                    Size = 50,
                    Value = CodigoBarra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoProducto",
                    Size = 50,
                    Value = TipoProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Producto",
                    Size = 200,
                    Value = Producto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Descripcion",
                    Size = 1000,
                    Value = Descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DescipcionBusqueda",
                    Size = 5000,
                    Value = DescipcionBusqueda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StockMinimo",
                    Value = StockMinimo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Costo",
                    Precision = 18,
                    Scale = 2,
                    Value = Costo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedida",
                    Value = UnidadMedida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CobraIva",
                    Value = CobraIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IdDivision",
                    Value = IdDivision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLinea",
                    Value = IdLinea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCategoria",
                    Value = IdCategoria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMarca",
                    Value = IdMarca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Peso",
                    Precision = 18,
                    Scale = 2,
                    Value = Peso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Volumen",
                    Precision = 18,
                    Scale = 2,
                    Value = Volumen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "RegistroSanitario",
                    Size = 50,
                    Value = RegistroSanitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PathArchivo",
                    Size = 500,
                    Value = PathArchivo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ProductoPadre",
                    Value = ProductoPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTarifaImpuesto",
                    Value = IdTarifaImpuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PorcentajeTarifaImpuesto",
                    Value = PorcentajeTarifaImpuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Producto_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @CodigoProveedor = @CodigoProveedor, @CodigoInterno = @CodigoInterno, @CodigoBarra = @CodigoBarra, @TipoProducto = @TipoProducto, @Producto = @Producto, @Descripcion = @Descripcion, @DescipcionBusqueda = @DescipcionBusqueda, @Stock = @Stock, @StockMinimo = @StockMinimo, @Costo = @Costo, @UnidadMedida = @UnidadMedida, @Descuento = @Descuento, @CobraIva = @CobraIva, @IdDivision = @IdDivision, @IdLinea = @IdLinea, @IdCategoria = @IdCategoria, @IdMarca = @IdMarca, @Peso = @Peso, @Volumen = @Volumen, @RegistroSanitario = @RegistroSanitario, @PathArchivo = @PathArchivo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @ProductoPadre = @ProductoPadre, @IdTarifaImpuesto = @IdTarifaImpuesto, @PorcentajeTarifaImpuesto = @PorcentajeTarifaImpuesto", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Producto_LoadAllResult>> Producto_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Producto_LoadAllResult>("EXEC @returnValue = [dbo].[Producto_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Producto_LoadByPKResult>> Producto_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Producto_LoadByPKResult>("EXEC @returnValue = [dbo].[Producto_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Producto_SearchProductsResult>> Producto_SearchProductsAsync(short? IdEmpresa, string SearchTerm, bool? ParentsOnly, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 1000,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ParentsOnly",
                    Value = ParentsOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Producto_SearchProductsResult>("EXEC @returnValue = [dbo].[Producto_SearchProducts] @IdEmpresa = @IdEmpresa, @SearchTerm = @SearchTerm, @ParentsOnly = @ParentsOnly", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Producto_SearchProductsPagedResult>> Producto_SearchProductsPagedAsync(short? IdEmpresa, string SearchTerm, bool? ParentsOnly, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "SearchTerm",
                    Size = 1000,
                    Value = SearchTerm ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ParentsOnly",
                    Value = ParentsOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Producto_SearchProductsPagedResult>("EXEC @returnValue = [dbo].[Producto_SearchProductsPaged] @IdEmpresa = @IdEmpresa, @SearchTerm = @SearchTerm, @ParentsOnly = @ParentsOnly, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Producto_UpdateAsync(int? Id, short? IdEmpresa, string CodigoProveedor, string CodigoInterno, string CodigoBarra, string TipoProducto, string Producto, string Descripcion, string DescipcionBusqueda, int? Stock, int? StockMinimo, decimal? Costo, int? UnidadMedida, decimal? Descuento, bool? CobraIva, int? IdDivision, int? IdLinea, int? IdCategoria, int? IdMarca, decimal? Peso, decimal? Volumen, string RegistroSanitario, string PathArchivo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? ProductoPadre, int? IdTarifaImpuesto, int? PorcentajeTarifaImpuesto, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoProveedor",
                    Size = 50,
                    Value = CodigoProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoInterno",
                    Size = 50,
                    Value = CodigoInterno ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CodigoBarra",
                    Size = 50,
                    Value = CodigoBarra ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoProducto",
                    Size = 50,
                    Value = TipoProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Producto",
                    Size = 200,
                    Value = Producto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Descripcion",
                    Size = 1000,
                    Value = Descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DescipcionBusqueda",
                    Size = 5000,
                    Value = DescipcionBusqueda ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StockMinimo",
                    Value = StockMinimo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Costo",
                    Precision = 18,
                    Scale = 2,
                    Value = Costo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedida",
                    Value = UnidadMedida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CobraIva",
                    Value = CobraIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IdDivision",
                    Value = IdDivision ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLinea",
                    Value = IdLinea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdCategoria",
                    Value = IdCategoria ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdMarca",
                    Value = IdMarca ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Peso",
                    Precision = 18,
                    Scale = 4,
                    Value = Peso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Volumen",
                    Precision = 18,
                    Scale = 4,
                    Value = Volumen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "RegistroSanitario",
                    Size = 50,
                    Value = RegistroSanitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PathArchivo",
                    Size = 500,
                    Value = PathArchivo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ProductoPadre",
                    Value = ProductoPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdTarifaImpuesto",
                    Value = IdTarifaImpuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PorcentajeTarifaImpuesto",
                    Value = PorcentajeTarifaImpuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Producto_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @CodigoProveedor = @CodigoProveedor, @CodigoInterno = @CodigoInterno, @CodigoBarra = @CodigoBarra, @TipoProducto = @TipoProducto, @Producto = @Producto, @Descripcion = @Descripcion, @DescipcionBusqueda = @DescipcionBusqueda, @Stock = @Stock, @StockMinimo = @StockMinimo, @Costo = @Costo, @UnidadMedida = @UnidadMedida, @Descuento = @Descuento, @CobraIva = @CobraIva, @IdDivision = @IdDivision, @IdLinea = @IdLinea, @IdCategoria = @IdCategoria, @IdMarca = @IdMarca, @Peso = @Peso, @Volumen = @Volumen, @RegistroSanitario = @RegistroSanitario, @PathArchivo = @PathArchivo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @ProductoPadre = @ProductoPadre, @IdTarifaImpuesto = @IdTarifaImpuesto, @PorcentajeTarifaImpuesto = @PorcentajeTarifaImpuesto", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Provincia_DeepFindByAllResult>> Provincia_DeepFindByAllAsync(int? Id, short? IdPais, string Provincia, string Codigo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPais",
                    Value = IdPais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Provincia",
                    Size = 100,
                    Value = Provincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 4,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Provincia_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Provincia_DeepFindByAll] @Id = @Id, @IdPais = @IdPais, @Provincia = @Provincia, @Codigo = @Codigo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Provincia_DeepFindByAllPagedAsync(int? Id, short? IdPais, string Provincia, string Codigo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPais",
                    Value = IdPais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Provincia",
                    Size = 100,
                    Value = Provincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 4,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Provincia_DeepFindByAllPaged] @Id = @Id, @IdPais = @IdPais, @Provincia = @Provincia, @Codigo = @Codigo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Provincia_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Provincia_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Provincia_FindByAllResult>> Provincia_FindByAllAsync(int? Id, short? IdPais, string Provincia, string Codigo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPais",
                    Value = IdPais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Provincia",
                    Size = 100,
                    Value = Provincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 4,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Provincia_FindByAllResult>("EXEC @returnValue = [dbo].[Provincia_FindByAll] @Id = @Id, @IdPais = @IdPais, @Provincia = @Provincia, @Codigo = @Codigo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Provincia_FindByAllPagedResult>> Provincia_FindByAllPagedAsync(int? Id, short? IdPais, string Provincia, string Codigo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPais",
                    Value = IdPais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Provincia",
                    Size = 100,
                    Value = Provincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 4,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Provincia_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Provincia_FindByAllPaged] @Id = @Id, @IdPais = @IdPais, @Provincia = @Provincia, @Codigo = @Codigo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Provincia_InsertAsync(short? IdPais, string Provincia, string Codigo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdPais",
                    Value = IdPais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Provincia",
                    Size = 100,
                    Value = Provincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 4,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Provincia_Insert] @Id = @Id OUTPUT, @IdPais = @IdPais, @Provincia = @Provincia, @Codigo = @Codigo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Provincia_LoadAllResult>> Provincia_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Provincia_LoadAllResult>("EXEC @returnValue = [dbo].[Provincia_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Provincia_LoadByPKResult>> Provincia_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Provincia_LoadByPKResult>("EXEC @returnValue = [dbo].[Provincia_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Provincia_UpdateAsync(int? Id, short? IdPais, string Provincia, string Codigo, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPais",
                    Value = IdPais ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Provincia",
                    Size = 100,
                    Value = Provincia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Codigo",
                    Size = 4,
                    Value = Codigo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Provincia_Update] @Id = @Id, @IdPais = @IdPais, @Provincia = @Provincia, @Codigo = @Codigo, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ruc_DeepFindByAllResult>> Ruc_DeepFindByAllAsync(string Ruc, string RazonSocial, string ActividadEconomica, string TokenFactElectonica, int? LocalPorDefecto, int? IdEmpresa, decimal? LimiteFacturacion, decimal? TotalFacturado, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? Rise, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RazonSocial",
                    Size = 500,
                    Value = RazonSocial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ActividadEconomica",
                    Size = 500,
                    Value = ActividadEconomica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TokenFactElectonica",
                    Size = 100,
                    Value = TokenFactElectonica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LocalPorDefecto",
                    Value = LocalPorDefecto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LimiteFacturacion",
                    Precision = 18,
                    Scale = 2,
                    Value = LimiteFacturacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalFacturado",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalFacturado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Rise",
                    Value = Rise ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ruc_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Ruc_DeepFindByAll] @Ruc = @Ruc, @RazonSocial = @RazonSocial, @ActividadEconomica = @ActividadEconomica, @TokenFactElectonica = @TokenFactElectonica, @LocalPorDefecto = @LocalPorDefecto, @IdEmpresa = @IdEmpresa, @LimiteFacturacion = @LimiteFacturacion, @TotalFacturado = @TotalFacturado, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Rise = @Rise", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ruc_DeepFindByAllPagedAsync(string Ruc, string RazonSocial, string ActividadEconomica, string TokenFactElectonica, int? LocalPorDefecto, int? IdEmpresa, decimal? LimiteFacturacion, decimal? TotalFacturado, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? Rise, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RazonSocial",
                    Size = 500,
                    Value = RazonSocial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ActividadEconomica",
                    Size = 500,
                    Value = ActividadEconomica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TokenFactElectonica",
                    Size = 50,
                    Value = TokenFactElectonica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LocalPorDefecto",
                    Value = LocalPorDefecto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LimiteFacturacion",
                    Precision = 18,
                    Scale = 2,
                    Value = LimiteFacturacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalFacturado",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalFacturado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Rise",
                    Value = Rise ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ruc_DeepFindByAllPaged] @Ruc = @Ruc, @RazonSocial = @RazonSocial, @ActividadEconomica = @ActividadEconomica, @TokenFactElectonica = @TokenFactElectonica, @LocalPorDefecto = @LocalPorDefecto, @IdEmpresa = @IdEmpresa, @LimiteFacturacion = @LimiteFacturacion, @TotalFacturado = @TotalFacturado, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Rise = @Rise, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ruc_DeleteAsync(string Ruc, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ruc_Delete] @Ruc = @Ruc, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ruc_FindByAllResult>> Ruc_FindByAllAsync(string Ruc, string RazonSocial, string ActividadEconomica, string TokenFactElectonica, int? LocalPorDefecto, int? IdEmpresa, decimal? LimiteFacturacion, decimal? TotalFacturado, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? Rise, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RazonSocial",
                    Size = 500,
                    Value = RazonSocial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ActividadEconomica",
                    Size = 500,
                    Value = ActividadEconomica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TokenFactElectonica",
                    Size = 500,
                    Value = TokenFactElectonica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LocalPorDefecto",
                    Value = LocalPorDefecto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LimiteFacturacion",
                    Precision = 18,
                    Scale = 2,
                    Value = LimiteFacturacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalFacturado",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalFacturado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Rise",
                    Value = Rise ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ruc_FindByAllResult>("EXEC @returnValue = [dbo].[Ruc_FindByAll] @Ruc = @Ruc, @RazonSocial = @RazonSocial, @ActividadEconomica = @ActividadEconomica, @TokenFactElectonica = @TokenFactElectonica, @LocalPorDefecto = @LocalPorDefecto, @IdEmpresa = @IdEmpresa, @LimiteFacturacion = @LimiteFacturacion, @TotalFacturado = @TotalFacturado, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Rise = @Rise", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ruc_FindByAllPagedResult>> Ruc_FindByAllPagedAsync(string Ruc, string RazonSocial, string ActividadEconomica, string TokenFactElectonica, int? LocalPorDefecto, int? IdEmpresa, decimal? LimiteFacturacion, decimal? TotalFacturado, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, short? Rise, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RazonSocial",
                    Size = 500,
                    Value = RazonSocial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ActividadEconomica",
                    Size = 500,
                    Value = ActividadEconomica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TokenFactElectonica",
                    Size = 50,
                    Value = TokenFactElectonica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LocalPorDefecto",
                    Value = LocalPorDefecto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LimiteFacturacion",
                    Precision = 18,
                    Scale = 2,
                    Value = LimiteFacturacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalFacturado",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalFacturado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Rise",
                    Value = Rise ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ruc_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Ruc_FindByAllPaged] @Ruc = @Ruc, @RazonSocial = @RazonSocial, @ActividadEconomica = @ActividadEconomica, @TokenFactElectonica = @TokenFactElectonica, @LocalPorDefecto = @LocalPorDefecto, @IdEmpresa = @IdEmpresa, @LimiteFacturacion = @LimiteFacturacion, @TotalFacturado = @TotalFacturado, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Rise = @Rise, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ruc_InsertAsync(string RazonSocial, string ActividadEconomica, string TokenFactElectonica, int? LocalPorDefecto, int? IdEmpresa, decimal? LimiteFacturacion, decimal? TotalFacturado, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, short? Rise, OutputParameter<string> Ruc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRuc = new SqlParameter
            {
                ParameterName = "Ruc",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Ruc?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterRuc,
                new SqlParameter
                {
                    ParameterName = "RazonSocial",
                    Size = 500,
                    Value = RazonSocial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ActividadEconomica",
                    Size = 500,
                    Value = ActividadEconomica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TokenFactElectonica",
                    Size = 50,
                    Value = TokenFactElectonica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LocalPorDefecto",
                    Value = LocalPorDefecto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LimiteFacturacion",
                    Precision = 18,
                    Scale = 2,
                    Value = LimiteFacturacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalFacturado",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalFacturado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Rise",
                    Value = Rise ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ruc_Insert] @Ruc = @Ruc OUTPUT, @RazonSocial = @RazonSocial, @ActividadEconomica = @ActividadEconomica, @TokenFactElectonica = @TokenFactElectonica, @LocalPorDefecto = @LocalPorDefecto, @IdEmpresa = @IdEmpresa, @LimiteFacturacion = @LimiteFacturacion, @TotalFacturado = @TotalFacturado, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Rise = @Rise", sqlParameters, cancellationToken);

            Ruc.SetValue(parameterRuc.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ruc_LoadAllResult>> Ruc_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ruc_LoadAllResult>("EXEC @returnValue = [dbo].[Ruc_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ruc_LoadByPKResult>> Ruc_LoadByPKAsync(string Ruc, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ruc_LoadByPKResult>("EXEC @returnValue = [dbo].[Ruc_LoadByPK] @Ruc = @Ruc", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Ruc_UpdateAsync(string Ruc, string RazonSocial, string ActividadEconomica, string TokenFactElectonica, int? LocalPorDefecto, int? IdEmpresa, decimal? LimiteFacturacion, decimal? TotalFacturado, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, bool? Rise, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RazonSocial",
                    Size = 500,
                    Value = RazonSocial ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ActividadEconomica",
                    Size = 500,
                    Value = ActividadEconomica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TokenFactElectonica",
                    Size = 50,
                    Value = TokenFactElectonica ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LocalPorDefecto",
                    Value = LocalPorDefecto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LimiteFacturacion",
                    Precision = 18,
                    Scale = 2,
                    Value = LimiteFacturacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "TotalFacturado",
                    Precision = 18,
                    Scale = 2,
                    Value = TotalFacturado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Rise",
                    Value = Rise ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Ruc_Update] @Ruc = @Ruc, @RazonSocial = @RazonSocial, @ActividadEconomica = @ActividadEconomica, @TokenFactElectonica = @TokenFactElectonica, @LocalPorDefecto = @LocalPorDefecto, @IdEmpresa = @IdEmpresa, @LimiteFacturacion = @LimiteFacturacion, @TotalFacturado = @TotalFacturado, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Rise = @Rise", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ruta_FaltanteResult>> Ruta_FaltanteAsync(int? IdRuta, int? IdBodegaCliente, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdRuta",
                    Value = IdRuta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdBodegaCliente",
                    Value = IdBodegaCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ruta_FaltanteResult>("EXEC @returnValue = [dbo].[Ruta_Faltante] @IdRuta = @IdRuta, @IdBodegaCliente = @IdBodegaCliente", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ruta_FaltanteAllResult>> Ruta_FaltanteAllAsync(int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ruta_FaltanteAllResult>("EXEC @returnValue = [dbo].[Ruta_FaltanteAll] @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ruta_GetLogisticoDisponibleResult>> Ruta_GetLogisticoDisponibleAsync(int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ruta_GetLogisticoDisponibleResult>("EXEC @returnValue = [dbo].[Ruta_GetLogisticoDisponible] @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Ruta_LoadByTermPagedResult>> Ruta_LoadByTermPagedAsync(int? IdEmpresa, string Term, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Term",
                    Size = 50,
                    Value = Term ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Ruta_LoadByTermPagedResult>("EXEC @returnValue = [dbo].[Ruta_LoadByTermPaged] @IdEmpresa = @IdEmpresa, @Term = @Term, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RutaDetalle_LoadByIdRutaPagedResult>> RutaDetalle_LoadByIdRutaPagedAsync(int? IdEmpresa, int? IdRuta, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdRuta",
                    Value = IdRuta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RutaDetalle_LoadByIdRutaPagedResult>("EXEC @returnValue = [dbo].[RutaDetalle_LoadByIdRutaPaged] @IdEmpresa = @IdEmpresa, @IdRuta = @IdRuta, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Salida_DeepFindByAllResult>> Salida_DeepFindByAllAsync(string Id, int? IdEmpresa, int? IdLocal, string IdVendedor, string Periodo, DateTime? Fecha, string TipoTransaccion, int? IdCliente, bool? Facturar, string Ruc, decimal? Subtotal0, decimal? SubtotalIva, decimal? Descuento, decimal? Total, decimal? Saldo, DateTime? FechaHoraEntregaPropuesta, DateTime? FechaHoraEntregaReal, string EstadoActual, string Observaciones, int? IdFormaPago, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, string TipoTransaccionPadre, string TransaccionPadre, int? Plazo, int? Cuotas, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdVendedor",
                    Size = 50,
                    Value = IdVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Facturar",
                    Value = Facturar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal0",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SubtotalIva",
                    Precision = 18,
                    Scale = 2,
                    Value = SubtotalIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 18,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntregaPropuesta",
                    Value = FechaHoraEntregaPropuesta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntregaReal",
                    Value = FechaHoraEntregaReal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoActual",
                    Size = 50,
                    Value = EstadoActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 500,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdFormaPago",
                    Value = IdFormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccionPadre",
                    Size = 6,
                    Value = TipoTransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransaccionPadre",
                    Size = 50,
                    Value = TransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Plazo",
                    Value = Plazo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Cuotas",
                    Value = Cuotas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Salida_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Salida_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @IdVendedor = @IdVendedor, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdCliente = @IdCliente, @Facturar = @Facturar, @Ruc = @Ruc, @Subtotal0 = @Subtotal0, @SubtotalIva = @SubtotalIva, @Descuento = @Descuento, @Total = @Total, @Saldo = @Saldo, @FechaHoraEntregaPropuesta = @FechaHoraEntregaPropuesta, @FechaHoraEntregaReal = @FechaHoraEntregaReal, @EstadoActual = @EstadoActual, @Observaciones = @Observaciones, @IdFormaPago = @IdFormaPago, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @TipoTransaccionPadre = @TipoTransaccionPadre, @TransaccionPadre = @TransaccionPadre, @Plazo = @Plazo, @Cuotas = @Cuotas, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Salida_DeepFindByAllNewResult>> Salida_DeepFindByAllNewAsync(string Id, int? IdEmpresa, int? IdLocal, string IdVendedor, string Periodo, DateTime? Fecha, string TipoTransaccion, int? IdCliente, bool? Facturar, string Ruc, decimal? Subtotal0, decimal? SubtotalIva, decimal? Descuento, decimal? Total, decimal? Saldo, DateTime? FechaHoraEntregaPropuesta, DateTime? FechaHoraEntregaReal, string EstadoActual, string Observaciones, int? IdFormaPago, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, string TipoTransaccionPadre, string TransaccionPadre, int? Plazo, int? Cuotas, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdVendedor",
                    Size = 50,
                    Value = IdVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Facturar",
                    Value = Facturar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal0",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SubtotalIva",
                    Precision = 18,
                    Scale = 2,
                    Value = SubtotalIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 18,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntregaPropuesta",
                    Value = FechaHoraEntregaPropuesta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntregaReal",
                    Value = FechaHoraEntregaReal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoActual",
                    Size = 50,
                    Value = EstadoActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 500,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdFormaPago",
                    Value = IdFormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccionPadre",
                    Size = 6,
                    Value = TipoTransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransaccionPadre",
                    Size = 50,
                    Value = TransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Plazo",
                    Value = Plazo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Cuotas",
                    Value = Cuotas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Salida_DeepFindByAllNewResult>("EXEC @returnValue = [dbo].[Salida_DeepFindByAllNew] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @IdVendedor = @IdVendedor, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdCliente = @IdCliente, @Facturar = @Facturar, @Ruc = @Ruc, @Subtotal0 = @Subtotal0, @SubtotalIva = @SubtotalIva, @Descuento = @Descuento, @Total = @Total, @Saldo = @Saldo, @FechaHoraEntregaPropuesta = @FechaHoraEntregaPropuesta, @FechaHoraEntregaReal = @FechaHoraEntregaReal, @EstadoActual = @EstadoActual, @Observaciones = @Observaciones, @IdFormaPago = @IdFormaPago, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @TipoTransaccionPadre = @TipoTransaccionPadre, @TransaccionPadre = @TransaccionPadre, @Plazo = @Plazo, @Cuotas = @Cuotas, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Salida_DeepFindByAllPagedAsync(string Id, int? IdEmpresa, int? IdLocal, string IdVendedor, string Periodo, DateTime? Fecha, string TipoTransaccion, int? IdCliente, bool? Facturar, string Ruc, decimal? Subtotal0, decimal? SubtotalIva, decimal? Descuento, decimal? Total, decimal? Saldo, DateTime? FechaHoraEntregaPropuesta, DateTime? FechaHoraEntregaReal, string EstadoActual, string Observaciones, int? IdFormaPago, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string TipoTransaccionPadre, string TransaccionPadre, int? Plazo, int? Cuotas, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdVendedor",
                    Size = 50,
                    Value = IdVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Facturar",
                    Value = Facturar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal0",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SubtotalIva",
                    Precision = 18,
                    Scale = 2,
                    Value = SubtotalIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 18,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntregaPropuesta",
                    Value = FechaHoraEntregaPropuesta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntregaReal",
                    Value = FechaHoraEntregaReal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoActual",
                    Size = 50,
                    Value = EstadoActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 500,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdFormaPago",
                    Value = IdFormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccionPadre",
                    Size = 6,
                    Value = TipoTransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransaccionPadre",
                    Size = 50,
                    Value = TransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Plazo",
                    Value = Plazo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Cuotas",
                    Value = Cuotas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Salida_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @IdVendedor = @IdVendedor, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdCliente = @IdCliente, @Facturar = @Facturar, @Ruc = @Ruc, @Subtotal0 = @Subtotal0, @SubtotalIva = @SubtotalIva, @Descuento = @Descuento, @Total = @Total, @Saldo = @Saldo, @FechaHoraEntregaPropuesta = @FechaHoraEntregaPropuesta, @FechaHoraEntregaReal = @FechaHoraEntregaReal, @EstadoActual = @EstadoActual, @Observaciones = @Observaciones, @IdFormaPago = @IdFormaPago, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @TipoTransaccionPadre = @TipoTransaccionPadre, @TransaccionPadre = @TransaccionPadre, @Plazo = @Plazo, @Cuotas = @Cuotas, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Salida_DeleteAsync(string Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, string Observaciones, string EstadoActual, bool? NoBorrarCobros, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 50,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 300,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoActual",
                    Size = 50,
                    Value = EstadoActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NoBorrarCobros",
                    Value = NoBorrarCobros ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Salida_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion, @Observaciones = @Observaciones, @EstadoActual = @EstadoActual, @NoBorrarCobros = @NoBorrarCobros", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Salida_FindByAllResult>> Salida_FindByAllAsync(string Id, int? IdEmpresa, int? IdLocal, string IdVendedor, string Periodo, DateTime? Fecha, string TipoTransaccion, int? IdCliente, bool? Facturar, string Ruc, decimal? Subtotal0, decimal? SubtotalIva, decimal? Descuento, decimal? Total, decimal? Saldo, DateTime? FechaHoraEntregaPropuesta, DateTime? FechaHoraEntregaReal, string EstadoActual, string Observaciones, int? IdFormaPago, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, string TipoTransaccionPadre, string TransaccionPadre, short? IdEstado, int? Plazo, int? Cuotas, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdVendedor",
                    Size = 50,
                    Value = IdVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Facturar",
                    Value = Facturar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal0",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SubtotalIva",
                    Precision = 18,
                    Scale = 2,
                    Value = SubtotalIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 18,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntregaPropuesta",
                    Value = FechaHoraEntregaPropuesta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntregaReal",
                    Value = FechaHoraEntregaReal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoActual",
                    Size = 50,
                    Value = EstadoActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 500,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdFormaPago",
                    Value = IdFormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccionPadre",
                    Size = 6,
                    Value = TipoTransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransaccionPadre",
                    Size = 50,
                    Value = TransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Plazo",
                    Value = Plazo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Cuotas",
                    Value = Cuotas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Salida_FindByAllResult>("EXEC @returnValue = [dbo].[Salida_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @IdVendedor = @IdVendedor, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdCliente = @IdCliente, @Facturar = @Facturar, @Ruc = @Ruc, @Subtotal0 = @Subtotal0, @SubtotalIva = @SubtotalIva, @Descuento = @Descuento, @Total = @Total, @Saldo = @Saldo, @FechaHoraEntregaPropuesta = @FechaHoraEntregaPropuesta, @FechaHoraEntregaReal = @FechaHoraEntregaReal, @EstadoActual = @EstadoActual, @Observaciones = @Observaciones, @IdFormaPago = @IdFormaPago, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @TipoTransaccionPadre = @TipoTransaccionPadre, @TransaccionPadre = @TransaccionPadre, @IdEstado = @IdEstado, @Plazo = @Plazo, @Cuotas = @Cuotas", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Salida_FindByAllPagedResult>> Salida_FindByAllPagedAsync(string Id, int? IdEmpresa, int? IdLocal, string IdVendedor, string Periodo, DateTime? Fecha, string TipoTransaccion, int? IdCliente, bool? Facturar, string Ruc, decimal? Subtotal0, decimal? SubtotalIva, decimal? Descuento, decimal? Total, decimal? Saldo, DateTime? FechaHoraEntregaPropuesta, DateTime? FechaHoraEntregaReal, string EstadoActual, string Observaciones, int? IdFormaPago, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, string TipoTransaccionPadre, string TransaccionPadre, int? Plazo, int? Cuotas, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdVendedor",
                    Size = 50,
                    Value = IdVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Facturar",
                    Value = Facturar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal0",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SubtotalIva",
                    Precision = 18,
                    Scale = 2,
                    Value = SubtotalIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 18,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntregaPropuesta",
                    Value = FechaHoraEntregaPropuesta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntregaReal",
                    Value = FechaHoraEntregaReal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoActual",
                    Size = 50,
                    Value = EstadoActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 500,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdFormaPago",
                    Value = IdFormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccionPadre",
                    Size = 6,
                    Value = TipoTransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransaccionPadre",
                    Size = 50,
                    Value = TransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Plazo",
                    Value = Plazo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Cuotas",
                    Value = Cuotas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Salida_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Salida_FindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @IdVendedor = @IdVendedor, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdCliente = @IdCliente, @Facturar = @Facturar, @Ruc = @Ruc, @Subtotal0 = @Subtotal0, @SubtotalIva = @SubtotalIva, @Descuento = @Descuento, @Total = @Total, @Saldo = @Saldo, @FechaHoraEntregaPropuesta = @FechaHoraEntregaPropuesta, @FechaHoraEntregaReal = @FechaHoraEntregaReal, @EstadoActual = @EstadoActual, @Observaciones = @Observaciones, @IdFormaPago = @IdFormaPago, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @TipoTransaccionPadre = @TipoTransaccionPadre, @TransaccionPadre = @TransaccionPadre, @Plazo = @Plazo, @Cuotas = @Cuotas, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Salida_InsertAsync(int? IdEmpresa, int? IdLocal, string IdVendedor, string Periodo, DateTime? Fecha, string TipoTransaccion, int? IdCliente, bool? Facturar, string Ruc, decimal? Subtotal0, decimal? SubtotalIva, decimal? Descuento, decimal? Total, decimal? Saldo, decimal? ValorAdicional, DateTime? FechaHoraEntregaPropuesta, DateTime? FechaHoraEntregaReal, string EstadoActual, string Observaciones, int? IdFormaPago, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? Plazo, int? Cuotas, string TransaccionPadre, string TipoTransaccionPadre, string Entrega, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdVendedor",
                    Size = 50,
                    Value = IdVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Facturar",
                    Value = Facturar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal0",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SubtotalIva",
                    Precision = 18,
                    Scale = 2,
                    Value = SubtotalIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 18,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorAdicional",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorAdicional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntregaPropuesta",
                    Value = FechaHoraEntregaPropuesta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntregaReal",
                    Value = FechaHoraEntregaReal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoActual",
                    Size = 50,
                    Value = EstadoActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 500,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdFormaPago",
                    Value = IdFormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Plazo",
                    Value = Plazo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Cuotas",
                    Value = Cuotas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TransaccionPadre",
                    Size = 50,
                    Value = TransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccionPadre",
                    Size = 6,
                    Value = TipoTransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Entrega",
                    Size = 10,
                    Value = Entrega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Salida_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @IdVendedor = @IdVendedor, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdCliente = @IdCliente, @Facturar = @Facturar, @Ruc = @Ruc, @Subtotal0 = @Subtotal0, @SubtotalIva = @SubtotalIva, @Descuento = @Descuento, @Total = @Total, @Saldo = @Saldo, @ValorAdicional = @ValorAdicional, @FechaHoraEntregaPropuesta = @FechaHoraEntregaPropuesta, @FechaHoraEntregaReal = @FechaHoraEntregaReal, @EstadoActual = @EstadoActual, @Observaciones = @Observaciones, @IdFormaPago = @IdFormaPago, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Plazo = @Plazo, @Cuotas = @Cuotas, @TransaccionPadre = @TransaccionPadre, @TipoTransaccionPadre = @TipoTransaccionPadre, @Entrega = @Entrega", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Salida_LoadAllResult>> Salida_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Salida_LoadAllResult>("EXEC @returnValue = [dbo].[Salida_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Salida_LoadByPKResult>> Salida_LoadByPKAsync(string Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Salida_LoadByPKResult>("EXEC @returnValue = [dbo].[Salida_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Salida_UpdateAsync(string Id, int? IdEmpresa, int? IdLocal, string IdVendedor, string Periodo, DateTime? Fecha, string TipoTransaccion, int? IdCliente, bool? Facturar, string Ruc, decimal? Subtotal0, decimal? SubtotalIva, decimal? Descuento, decimal? Total, decimal? Saldo, decimal? ValorAdicional, DateTime? FechaHoraEntregaPropuesta, DateTime? FechaHoraEntregaReal, string EstadoActual, string Observaciones, int? IdFormaPago, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? Plazo, int? Cuotas, string TransaccionPadre, string TipoTransaccionPadre, string Entrega, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdVendedor",
                    Size = 50,
                    Value = IdVendedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Periodo",
                    Size = 7,
                    Value = Periodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 6,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdCliente",
                    Value = IdCliente ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Facturar",
                    Value = Facturar ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Ruc",
                    Size = 50,
                    Value = Ruc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Subtotal0",
                    Precision = 18,
                    Scale = 2,
                    Value = Subtotal0 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SubtotalIva",
                    Precision = 18,
                    Scale = 2,
                    Value = SubtotalIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Descuento",
                    Precision = 18,
                    Scale = 2,
                    Value = Descuento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Total",
                    Precision = 18,
                    Scale = 2,
                    Value = Total ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Saldo",
                    Precision = 18,
                    Scale = 2,
                    Value = Saldo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorAdicional",
                    Precision = 18,
                    Scale = 2,
                    Value = ValorAdicional ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntregaPropuesta",
                    Value = FechaHoraEntregaPropuesta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "FechaHoraEntregaReal",
                    Value = FechaHoraEntregaReal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EstadoActual",
                    Size = 50,
                    Value = EstadoActual ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = 500,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdFormaPago",
                    Value = IdFormaPago ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Plazo",
                    Value = Plazo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Cuotas",
                    Value = Cuotas ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TransaccionPadre",
                    Size = 50,
                    Value = TransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccionPadre",
                    Size = 6,
                    Value = TipoTransaccionPadre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Entrega",
                    Size = 10,
                    Value = Entrega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Salida_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdLocal = @IdLocal, @IdVendedor = @IdVendedor, @Periodo = @Periodo, @Fecha = @Fecha, @TipoTransaccion = @TipoTransaccion, @IdCliente = @IdCliente, @Facturar = @Facturar, @Ruc = @Ruc, @Subtotal0 = @Subtotal0, @SubtotalIva = @SubtotalIva, @Descuento = @Descuento, @Total = @Total, @Saldo = @Saldo, @ValorAdicional = @ValorAdicional, @FechaHoraEntregaPropuesta = @FechaHoraEntregaPropuesta, @FechaHoraEntregaReal = @FechaHoraEntregaReal, @EstadoActual = @EstadoActual, @Observaciones = @Observaciones, @IdFormaPago = @IdFormaPago, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Plazo = @Plazo, @Cuotas = @Cuotas, @TransaccionPadre = @TransaccionPadre, @TipoTransaccionPadre = @TipoTransaccionPadre, @Entrega = @Entrega", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SalidaAllFanIdResult>> SalidaAllFanIdAsync(int? IdEmpresa, string InicioSesion, string TipoTransaccion, string Observaciones, string Identificacion, OutputParameter<string> IdSalida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterIdSalida = new SqlParameter
            {
                ParameterName = "IdSalida",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = IdSalida?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InicioSesion",
                    Size = 50,
                    Value = InicioSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoTransaccion",
                    Size = 10,
                    Value = TipoTransaccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Observaciones",
                    Size = -1,
                    Value = Observaciones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Identificacion",
                    Size = 20,
                    Value = Identificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterIdSalida,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SalidaAllFanIdResult>("EXEC @returnValue = [dbo].[SalidaAllFanId] @IdEmpresa = @IdEmpresa, @InicioSesion = @InicioSesion, @TipoTransaccion = @TipoTransaccion, @Observaciones = @Observaciones, @Identificacion = @Identificacion, @IdSalida = @IdSalida OUTPUT", sqlParameters, cancellationToken);

            IdSalida.SetValue(parameterIdSalida.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SalidaFormaPagoSri_InsertAsync(int? IdFormaPagoSri, string IdSalida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdFormaPagoSri",
                    Value = IdFormaPagoSri ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SalidaFormaPagoSri_Insert] @IdFormaPagoSri = @IdFormaPagoSri, @IdSalida = @IdSalida", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SalidaFormaPagoSri_UpdateAsync(int? IdFormaPagoSri, string IdSalida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdFormaPagoSri",
                    Value = IdFormaPagoSri ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalida",
                    Size = 50,
                    Value = IdSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SalidaFormaPagoSri_Update] @IdFormaPagoSri = @IdFormaPagoSri, @IdSalida = @IdSalida", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Sector_DeepFindByAllResult>> Sector_DeepFindByAllAsync(int? Id, string Sector, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Sector",
                    Size = 50,
                    Value = Sector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Sector_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Sector_DeepFindByAll] @Id = @Id, @Sector = @Sector, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Sector_DeepFindByAllPagedAsync(int? Id, string Sector, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Sector",
                    Size = 50,
                    Value = Sector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Sector_DeepFindByAllPaged] @Id = @Id, @Sector = @Sector, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Sector_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Sector_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Sector_FindByAllResult>> Sector_FindByAllAsync(int? Id, string Sector, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Sector",
                    Size = 50,
                    Value = Sector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Sector_FindByAllResult>("EXEC @returnValue = [dbo].[Sector_FindByAll] @Id = @Id, @Sector = @Sector, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Sector_FindByAllPagedResult>> Sector_FindByAllPagedAsync(int? Id, string Sector, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Sector",
                    Size = 50,
                    Value = Sector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Sector_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Sector_FindByAllPaged] @Id = @Id, @Sector = @Sector, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Sector_InsertAsync(string Sector, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "Sector",
                    Size = 50,
                    Value = Sector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Sector_Insert] @Id = @Id OUTPUT, @Sector = @Sector, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Sector_LoadAllResult>> Sector_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Sector_LoadAllResult>("EXEC @returnValue = [dbo].[Sector_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Sector_LoadByPKResult>> Sector_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Sector_LoadByPKResult>("EXEC @returnValue = [dbo].[Sector_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Sector_UpdateAsync(int? Id, string Sector, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Sector",
                    Size = 50,
                    Value = Sector ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Sector_Update] @Id = @Id, @Sector = @Sector, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SerieEntrada_DeepFindByAllResult>> SerieEntrada_DeepFindByAllAsync(int? Id, string IdDetalleEntrada, int? IdProducto, string Serie, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalleEntrada",
                    Size = 50,
                    Value = IdDetalleEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Serie",
                    Size = 50,
                    Value = Serie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SerieEntrada_DeepFindByAllResult>("EXEC @returnValue = [dbo].[SerieEntrada_DeepFindByAll] @Id = @Id, @IdDetalleEntrada = @IdDetalleEntrada, @IdProducto = @IdProducto, @Serie = @Serie, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SerieEntrada_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SerieEntrada_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SerieEntrada_FindByAllResult>> SerieEntrada_FindByAllAsync(int? Id, string IdDetalleEntrada, int? IdProducto, string Serie, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalleEntrada",
                    Size = 50,
                    Value = IdDetalleEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Serie",
                    Size = 50,
                    Value = Serie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SerieEntrada_FindByAllResult>("EXEC @returnValue = [dbo].[SerieEntrada_FindByAll] @Id = @Id, @IdDetalleEntrada = @IdDetalleEntrada, @IdProducto = @IdProducto, @Serie = @Serie, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SerieEntrada_InsertAsync(string IdDetalleEntrada, int? IdProducto, string Serie, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdDetalleEntrada",
                    Size = 50,
                    Value = IdDetalleEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Serie",
                    Size = 50,
                    Value = Serie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 50,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 50,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SerieEntrada_Insert] @IdDetalleEntrada = @IdDetalleEntrada, @IdProducto = @IdProducto, @Serie = @Serie, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SerieEntrada_LoadByPKResult>> SerieEntrada_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SerieEntrada_LoadByPKResult>("EXEC @returnValue = [dbo].[SerieEntrada_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SerieEntrada_UpdateAsync(string Id, string IdDetalleEntrada, int? IdProducto, string Serie, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalleEntrada",
                    Size = 50,
                    Value = IdDetalleEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Serie",
                    Size = 50,
                    Value = Serie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 50,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 50,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SerieEntrada_Update] @Id = @Id, @IdDetalleEntrada = @IdDetalleEntrada, @IdProducto = @IdProducto, @Serie = @Serie, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SerieSalida_DeepFindByAllResult>> SerieSalida_DeepFindByAllAsync(int? Id, string IdDetalleSalida, int? IdProducto, string Serie, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalleSalida",
                    Size = 50,
                    Value = IdDetalleSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Serie",
                    Size = 50,
                    Value = Serie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SerieSalida_DeepFindByAllResult>("EXEC @returnValue = [dbo].[SerieSalida_DeepFindByAll] @Id = @Id, @IdDetalleSalida = @IdDetalleSalida, @IdProducto = @IdProducto, @Serie = @Serie, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SerieSalida_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SerieSalida_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SerieSalida_FindByAllResult>> SerieSalida_FindByAllAsync(int? Id, string IdDetalleSalida, int? IdProducto, string Serie, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalleSalida",
                    Size = 50,
                    Value = IdDetalleSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Serie",
                    Size = 50,
                    Value = Serie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SerieSalida_FindByAllResult>("EXEC @returnValue = [dbo].[SerieSalida_FindByAll] @Id = @Id, @IdDetalleSalida = @IdDetalleSalida, @IdProducto = @IdProducto, @Serie = @Serie, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SerieSalida_InsertAsync(string IdDetalleSalida, int? IdProducto, string Serie, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdDetalleSalida",
                    Size = 50,
                    Value = IdDetalleSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Serie",
                    Size = 50,
                    Value = Serie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 50,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 50,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SerieSalida_Insert] @IdDetalleSalida = @IdDetalleSalida, @IdProducto = @IdProducto, @Serie = @Serie, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SerieSalida_LoadByPKResult>> SerieSalida_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SerieSalida_LoadByPKResult>("EXEC @returnValue = [dbo].[SerieSalida_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SerieSalida_UpdateAsync(string Id, string IdDetalleSalida, int? IdProducto, string Serie, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalleSalida",
                    Size = 50,
                    Value = IdDetalleSalida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Serie",
                    Size = 50,
                    Value = Serie ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 50,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 50,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SerieSalida_Update] @Id = @Id, @IdDetalleSalida = @IdDetalleSalida, @IdProducto = @IdProducto, @Serie = @Serie, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Stock_DeepFindByAllResult>> Stock_DeepFindByAllAsync(string Id, int? IdEmpresa, string Tipo, string IdSalidaEntrada, string IdDetalle, int? IdProducto, int? IdLocal, DateTime? Fecha, decimal? Cantidad, decimal? ValorUnitario, decimal? ValorTotal, int? IdTipoUnidad, decimal? CantidadTipoUnidad, decimal? StockInventario, decimal? CostoPromedioPonderado, decimal? SaldoInventario, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tipo",
                    Size = 1,
                    Value = Tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalidaEntrada",
                    Size = 50,
                    Value = IdSalidaEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalle",
                    Size = 50,
                    Value = IdDetalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorUnitario",
                    Precision = 18,
                    Scale = 4,
                    Value = ValorUnitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorTotal",
                    Precision = 37,
                    Scale = 6,
                    Value = ValorTotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CantidadTipoUnidad",
                    Precision = 18,
                    Scale = 2,
                    Value = CantidadTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "StockInventario",
                    Precision = 18,
                    Scale = 2,
                    Value = StockInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CostoPromedioPonderado",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoPromedioPonderado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoInventario",
                    Precision = 37,
                    Scale = 6,
                    Value = SaldoInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Stock_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Stock_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @Tipo = @Tipo, @IdSalidaEntrada = @IdSalidaEntrada, @IdDetalle = @IdDetalle, @IdProducto = @IdProducto, @IdLocal = @IdLocal, @Fecha = @Fecha, @Cantidad = @Cantidad, @ValorUnitario = @ValorUnitario, @ValorTotal = @ValorTotal, @IdTipoUnidad = @IdTipoUnidad, @CantidadTipoUnidad = @CantidadTipoUnidad, @StockInventario = @StockInventario, @CostoPromedioPonderado = @CostoPromedioPonderado, @SaldoInventario = @SaldoInventario, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Stock_DeepFindByAllPagedAsync(string Id, int? IdEmpresa, string Tipo, string IdSalidaEntrada, string IdDetalle, int? IdProducto, int? IdLocal, DateTime? Fecha, decimal? Cantidad, decimal? ValorUnitario, decimal? ValorTotal, int? IdTipoUnidad, decimal? CantidadTipoUnidad, decimal? StockInventario, decimal? CostoPromedioPonderado, decimal? SaldoInventario, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tipo",
                    Size = 1,
                    Value = Tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalidaEntrada",
                    Size = 50,
                    Value = IdSalidaEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalle",
                    Size = 50,
                    Value = IdDetalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorUnitario",
                    Precision = 18,
                    Scale = 4,
                    Value = ValorUnitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorTotal",
                    Precision = 37,
                    Scale = 6,
                    Value = ValorTotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CantidadTipoUnidad",
                    Precision = 18,
                    Scale = 2,
                    Value = CantidadTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "StockInventario",
                    Precision = 18,
                    Scale = 2,
                    Value = StockInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CostoPromedioPonderado",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoPromedioPonderado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoInventario",
                    Precision = 37,
                    Scale = 6,
                    Value = SaldoInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Stock_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @Tipo = @Tipo, @IdSalidaEntrada = @IdSalidaEntrada, @IdDetalle = @IdDetalle, @IdProducto = @IdProducto, @IdLocal = @IdLocal, @Fecha = @Fecha, @Cantidad = @Cantidad, @ValorUnitario = @ValorUnitario, @ValorTotal = @ValorTotal, @IdTipoUnidad = @IdTipoUnidad, @CantidadTipoUnidad = @CantidadTipoUnidad, @StockInventario = @StockInventario, @CostoPromedioPonderado = @CostoPromedioPonderado, @SaldoInventario = @SaldoInventario, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Stock_FindByAllResult>> Stock_FindByAllAsync(string Id, int? IdEmpresa, string Tipo, string IdSalidaEntrada, string IdDetalle, int? IdProducto, int? IdLocal, DateTime? Fecha, decimal? Cantidad, decimal? ValorUnitario, decimal? ValorTotal, int? IdTipoUnidad, decimal? CantidadTipoUnidad, decimal? StockInventario, decimal? CostoPromedioPonderado, decimal? SaldoInventario, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tipo",
                    Size = 1,
                    Value = Tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalidaEntrada",
                    Size = 50,
                    Value = IdSalidaEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalle",
                    Size = 50,
                    Value = IdDetalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorUnitario",
                    Precision = 18,
                    Scale = 4,
                    Value = ValorUnitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorTotal",
                    Precision = 37,
                    Scale = 6,
                    Value = ValorTotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CantidadTipoUnidad",
                    Precision = 18,
                    Scale = 2,
                    Value = CantidadTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "StockInventario",
                    Precision = 18,
                    Scale = 2,
                    Value = StockInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CostoPromedioPonderado",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoPromedioPonderado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoInventario",
                    Precision = 37,
                    Scale = 6,
                    Value = SaldoInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Stock_FindByAllResult>("EXEC @returnValue = [dbo].[Stock_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @Tipo = @Tipo, @IdSalidaEntrada = @IdSalidaEntrada, @IdDetalle = @IdDetalle, @IdProducto = @IdProducto, @IdLocal = @IdLocal, @Fecha = @Fecha, @Cantidad = @Cantidad, @ValorUnitario = @ValorUnitario, @ValorTotal = @ValorTotal, @IdTipoUnidad = @IdTipoUnidad, @CantidadTipoUnidad = @CantidadTipoUnidad, @StockInventario = @StockInventario, @CostoPromedioPonderado = @CostoPromedioPonderado, @SaldoInventario = @SaldoInventario, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Stock_FindByAllPagedResult>> Stock_FindByAllPagedAsync(string Id, int? IdEmpresa, string Tipo, string IdSalidaEntrada, string IdDetalle, int? IdProducto, int? IdLocal, DateTime? Fecha, decimal? Cantidad, decimal? ValorUnitario, decimal? ValorTotal, int? IdTipoUnidad, decimal? CantidadTipoUnidad, decimal? StockInventario, decimal? CostoPromedioPonderado, decimal? SaldoInventario, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tipo",
                    Size = 1,
                    Value = Tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalidaEntrada",
                    Size = 50,
                    Value = IdSalidaEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalle",
                    Size = 50,
                    Value = IdDetalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorUnitario",
                    Precision = 18,
                    Scale = 4,
                    Value = ValorUnitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorTotal",
                    Precision = 37,
                    Scale = 6,
                    Value = ValorTotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CantidadTipoUnidad",
                    Precision = 18,
                    Scale = 2,
                    Value = CantidadTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "StockInventario",
                    Precision = 18,
                    Scale = 2,
                    Value = StockInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CostoPromedioPonderado",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoPromedioPonderado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoInventario",
                    Precision = 37,
                    Scale = 6,
                    Value = SaldoInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Stock_FindByAllPagedResult>("EXEC @returnValue = [dbo].[Stock_FindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @Tipo = @Tipo, @IdSalidaEntrada = @IdSalidaEntrada, @IdDetalle = @IdDetalle, @IdProducto = @IdProducto, @IdLocal = @IdLocal, @Fecha = @Fecha, @Cantidad = @Cantidad, @ValorUnitario = @ValorUnitario, @ValorTotal = @ValorTotal, @IdTipoUnidad = @IdTipoUnidad, @CantidadTipoUnidad = @CantidadTipoUnidad, @StockInventario = @StockInventario, @CostoPromedioPonderado = @CostoPromedioPonderado, @SaldoInventario = @SaldoInventario, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Stock_InsertAsync(int? IdEmpresa, string Tipo, string IdSalidaEntrada, string IdDetalle, int? IdProducto, int? IdLocal, DateTime? Fecha, decimal? Cantidad, decimal? ValorUnitario, int? IdTipoUnidad, decimal? CantidadTipoUnidad, decimal? StockInventario, decimal? CostoPromedioPonderado, short? IdEstado, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tipo",
                    Size = 1,
                    Value = Tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalidaEntrada",
                    Size = 50,
                    Value = IdSalidaEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalle",
                    Size = 50,
                    Value = IdDetalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorUnitario",
                    Precision = 18,
                    Scale = 4,
                    Value = ValorUnitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CantidadTipoUnidad",
                    Precision = 18,
                    Scale = 2,
                    Value = CantidadTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "StockInventario",
                    Precision = 18,
                    Scale = 2,
                    Value = StockInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CostoPromedioPonderado",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoPromedioPonderado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Stock_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @Tipo = @Tipo, @IdSalidaEntrada = @IdSalidaEntrada, @IdDetalle = @IdDetalle, @IdProducto = @IdProducto, @IdLocal = @IdLocal, @Fecha = @Fecha, @Cantidad = @Cantidad, @ValorUnitario = @ValorUnitario, @IdTipoUnidad = @IdTipoUnidad, @CantidadTipoUnidad = @CantidadTipoUnidad, @StockInventario = @StockInventario, @CostoPromedioPonderado = @CostoPromedioPonderado, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Stock_LoadAllResult>> Stock_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Stock_LoadAllResult>("EXEC @returnValue = [dbo].[Stock_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Stock_LoadByPKResult>> Stock_LoadByPKAsync(string Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Stock_LoadByPKResult>("EXEC @returnValue = [dbo].[Stock_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Stock_UpdateAsync(string Id, int? IdEmpresa, string Tipo, string IdSalidaEntrada, string IdDetalle, int? IdProducto, int? IdLocal, DateTime? Fecha, decimal? Cantidad, decimal? ValorUnitario, decimal? ValorTotal, int? IdTipoUnidad, decimal? CantidadTipoUnidad, decimal? StockInventario, decimal? CostoPromedioPonderado, decimal? SaldoInventario, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 50,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Tipo",
                    Size = 1,
                    Value = Tipo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdSalidaEntrada",
                    Size = 50,
                    Value = IdSalidaEntrada ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdDetalle",
                    Size = 50,
                    Value = IdDetalle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocal",
                    Value = IdLocal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Fecha",
                    Value = Fecha ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorUnitario",
                    Precision = 18,
                    Scale = 4,
                    Value = ValorUnitario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "ValorTotal",
                    Precision = 37,
                    Scale = 6,
                    Value = ValorTotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdTipoUnidad",
                    Value = IdTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CantidadTipoUnidad",
                    Precision = 18,
                    Scale = 2,
                    Value = CantidadTipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "StockInventario",
                    Precision = 18,
                    Scale = 2,
                    Value = StockInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CostoPromedioPonderado",
                    Precision = 18,
                    Scale = 4,
                    Value = CostoPromedioPonderado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "SaldoInventario",
                    Precision = 37,
                    Scale = 6,
                    Value = SaldoInventario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Stock_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @Tipo = @Tipo, @IdSalidaEntrada = @IdSalidaEntrada, @IdDetalle = @IdDetalle, @IdProducto = @IdProducto, @IdLocal = @IdLocal, @Fecha = @Fecha, @Cantidad = @Cantidad, @ValorUnitario = @ValorUnitario, @ValorTotal = @ValorTotal, @IdTipoUnidad = @IdTipoUnidad, @CantidadTipoUnidad = @CantidadTipoUnidad, @StockInventario = @StockInventario, @CostoPromedioPonderado = @CostoPromedioPonderado, @SaldoInventario = @SaldoInventario, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TipoDocumento_DeepFindByAllResult>> TipoDocumento_DeepFindByAllAsync(string Id, string TipoDocumento, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 2,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoDocumento",
                    Size = 200,
                    Value = TipoDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TipoDocumento_DeepFindByAllResult>("EXEC @returnValue = [dbo].[TipoDocumento_DeepFindByAll] @Id = @Id, @TipoDocumento = @TipoDocumento, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TipoDocumento_DeepFindByAllPagedAsync(string Id, string TipoDocumento, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 2,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoDocumento",
                    Size = 200,
                    Value = TipoDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TipoDocumento_DeepFindByAllPaged] @Id = @Id, @TipoDocumento = @TipoDocumento, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TipoDocumento_DeleteAsync(string Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 2,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TipoDocumento_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TipoDocumento_FindByAllResult>> TipoDocumento_FindByAllAsync(string Id, string TipoDocumento, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 2,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoDocumento",
                    Size = 200,
                    Value = TipoDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TipoDocumento_FindByAllResult>("EXEC @returnValue = [dbo].[TipoDocumento_FindByAll] @Id = @Id, @TipoDocumento = @TipoDocumento, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TipoDocumento_FindByAllPagedResult>> TipoDocumento_FindByAllPagedAsync(string Id, string TipoDocumento, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 2,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoDocumento",
                    Size = 200,
                    Value = TipoDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TipoDocumento_FindByAllPagedResult>("EXEC @returnValue = [dbo].[TipoDocumento_FindByAllPaged] @Id = @Id, @TipoDocumento = @TipoDocumento, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TipoDocumento_InsertAsync(string TipoDocumento, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<string> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Size = 2,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "TipoDocumento",
                    Size = 200,
                    Value = TipoDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TipoDocumento_Insert] @Id = @Id OUTPUT, @TipoDocumento = @TipoDocumento, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TipoDocumento_LoadAllResult>> TipoDocumento_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TipoDocumento_LoadAllResult>("EXEC @returnValue = [dbo].[TipoDocumento_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TipoDocumento_LoadByPKResult>> TipoDocumento_LoadByPKAsync(string Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 2,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TipoDocumento_LoadByPKResult>("EXEC @returnValue = [dbo].[TipoDocumento_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TipoDocumento_UpdateAsync(string Id, string TipoDocumento, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Size = 2,
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoDocumento",
                    Size = 200,
                    Value = TipoDocumento ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TipoDocumento_Update] @Id = @Id, @TipoDocumento = @TipoDocumento, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TipoPaquete_DeepFindByAllResult>> TipoPaquete_DeepFindByAllAsync(int? Id, string TipoPaquete, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoPaquete",
                    Size = 50,
                    Value = TipoPaquete ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TipoPaquete_DeepFindByAllResult>("EXEC @returnValue = [dbo].[TipoPaquete_DeepFindByAll] @Id = @Id, @TipoPaquete = @TipoPaquete, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TipoPaquete_DeepFindByAllPagedAsync(int? Id, string TipoPaquete, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoPaquete",
                    Size = 50,
                    Value = TipoPaquete ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TipoPaquete_DeepFindByAllPaged] @Id = @Id, @TipoPaquete = @TipoPaquete, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TipoPaquete_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TipoPaquete_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TipoPaquete_FindByAllResult>> TipoPaquete_FindByAllAsync(int? Id, string TipoPaquete, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoPaquete",
                    Size = 50,
                    Value = TipoPaquete ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TipoPaquete_FindByAllResult>("EXEC @returnValue = [dbo].[TipoPaquete_FindByAll] @Id = @Id, @TipoPaquete = @TipoPaquete, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TipoPaquete_FindByAllPagedResult>> TipoPaquete_FindByAllPagedAsync(int? Id, string TipoPaquete, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoPaquete",
                    Size = 50,
                    Value = TipoPaquete ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TipoPaquete_FindByAllPagedResult>("EXEC @returnValue = [dbo].[TipoPaquete_FindByAllPaged] @Id = @Id, @TipoPaquete = @TipoPaquete, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TipoPaquete_InsertAsync(string TipoPaquete, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "TipoPaquete",
                    Size = 50,
                    Value = TipoPaquete ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TipoPaquete_Insert] @Id = @Id OUTPUT, @TipoPaquete = @TipoPaquete, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TipoPaquete_LoadAllResult>> TipoPaquete_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TipoPaquete_LoadAllResult>("EXEC @returnValue = [dbo].[TipoPaquete_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TipoPaquete_LoadByPKResult>> TipoPaquete_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TipoPaquete_LoadByPKResult>("EXEC @returnValue = [dbo].[TipoPaquete_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TipoPaquete_UpdateAsync(int? Id, string TipoPaquete, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoPaquete",
                    Size = 50,
                    Value = TipoPaquete ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TipoPaquete_Update] @Id = @Id, @TipoPaquete = @TipoPaquete, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TipoUnidad_DeepFindByAllResult>> TipoUnidad_DeepFindByAllAsync(int? Id, short? IdEmpresa, string IdProducto, string TipoUnidad, decimal? Cantidad, decimal? CantidadMinima, int? UnidadMedidad, decimal? Precio, bool? IncluyeIva, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Size = -1,
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoUnidad",
                    Size = 50,
                    Value = TipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CantidadMinima",
                    Precision = 18,
                    Scale = 2,
                    Value = CantidadMinima ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedidad",
                    Value = UnidadMedidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 4,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIva",
                    Value = IncluyeIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TipoUnidad_DeepFindByAllResult>("EXEC @returnValue = [dbo].[TipoUnidad_DeepFindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @TipoUnidad = @TipoUnidad, @Cantidad = @Cantidad, @CantidadMinima = @CantidadMinima, @UnidadMedidad = @UnidadMedidad, @Precio = @Precio, @IncluyeIva = @IncluyeIva, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TipoUnidad_DeepFindByAllPagedAsync(int? Id, short? IdEmpresa, int? IdProducto, string TipoUnidad, decimal? Cantidad, int? UnidadMedidad, decimal? Precio, bool? IncluyeIva, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoUnidad",
                    Size = 50,
                    Value = TipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedidad",
                    Value = UnidadMedidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 4,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIva",
                    Value = IncluyeIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TipoUnidad_DeepFindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @TipoUnidad = @TipoUnidad, @Cantidad = @Cantidad, @UnidadMedidad = @UnidadMedidad, @Precio = @Precio, @IncluyeIva = @IncluyeIva, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TipoUnidad_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TipoUnidad_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TipoUnidad_FindByAllResult>> TipoUnidad_FindByAllAsync(int? Id, short? IdEmpresa, string IdProducto, string TipoUnidad, decimal? Cantidad, decimal? CantidadMinima, int? UnidadMedidad, decimal? Precio, bool? IncluyeIva, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Size = -1,
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TipoUnidad",
                    Size = 50,
                    Value = TipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CantidadMinima",
                    Precision = 18,
                    Scale = 2,
                    Value = CantidadMinima ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedidad",
                    Value = UnidadMedidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 4,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIva",
                    Value = IncluyeIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TipoUnidad_FindByAllResult>("EXEC @returnValue = [dbo].[TipoUnidad_FindByAll] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @TipoUnidad = @TipoUnidad, @Cantidad = @Cantidad, @CantidadMinima = @CantidadMinima, @UnidadMedidad = @UnidadMedidad, @Precio = @Precio, @IncluyeIva = @IncluyeIva, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TipoUnidad_FindByAllPagedResult>> TipoUnidad_FindByAllPagedAsync(int? Id, short? IdEmpresa, int? IdProducto, string TipoUnidad, decimal? Cantidad, int? UnidadMedidad, decimal? Precio, bool? IncluyeIva, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoUnidad",
                    Size = 50,
                    Value = TipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedidad",
                    Value = UnidadMedidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 2,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIva",
                    Value = IncluyeIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TipoUnidad_FindByAllPagedResult>("EXEC @returnValue = [dbo].[TipoUnidad_FindByAllPaged] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @TipoUnidad = @TipoUnidad, @Cantidad = @Cantidad, @UnidadMedidad = @UnidadMedidad, @Precio = @Precio, @IncluyeIva = @IncluyeIva, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TipoUnidad_InsertAsync(short? IdEmpresa, int? IdProducto, string TipoUnidad, decimal? Cantidad, decimal? CantidadMinima, int? UnidadMedidad, decimal? Precio, bool? IncluyeIva, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, decimal? Costo, bool? Plantilla, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoUnidad",
                    Size = 50,
                    Value = TipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CantidadMinima",
                    Precision = 18,
                    Scale = 2,
                    Value = CantidadMinima ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedidad",
                    Value = UnidadMedidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 4,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIva",
                    Value = IncluyeIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Costo",
                    Precision = 18,
                    Scale = 4,
                    Value = Costo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Plantilla",
                    Value = Plantilla ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TipoUnidad_Insert] @Id = @Id OUTPUT, @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @TipoUnidad = @TipoUnidad, @Cantidad = @Cantidad, @CantidadMinima = @CantidadMinima, @UnidadMedidad = @UnidadMedidad, @Precio = @Precio, @IncluyeIva = @IncluyeIva, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Costo = @Costo, @Plantilla = @Plantilla", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TipoUnidad_LoadAllResult>> TipoUnidad_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TipoUnidad_LoadAllResult>("EXEC @returnValue = [dbo].[TipoUnidad_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TipoUnidad_LoadByIdProductoResult>> TipoUnidad_LoadByIdProductoAsync(int? IdEmpresa, int? IdProducto, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TipoUnidad_LoadByIdProductoResult>("EXEC @returnValue = [dbo].[TipoUnidad_LoadByIdProducto] @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TipoUnidad_LoadByPKResult>> TipoUnidad_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TipoUnidad_LoadByPKResult>("EXEC @returnValue = [dbo].[TipoUnidad_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TipoUnidad_UpdateAsync(int? Id, short? IdEmpresa, int? IdProducto, string TipoUnidad, decimal? Cantidad, decimal? CantidadMinima, int? UnidadMedidad, decimal? Precio, bool? IncluyeIva, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, decimal? Costo, bool? Plantilla, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdProducto",
                    Value = IdProducto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TipoUnidad",
                    Size = 50,
                    Value = TipoUnidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cantidad",
                    Precision = 18,
                    Scale = 2,
                    Value = Cantidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "CantidadMinima",
                    Precision = 18,
                    Scale = 2,
                    Value = CantidadMinima ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedidad",
                    Value = UnidadMedidad ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Precio",
                    Precision = 18,
                    Scale = 4,
                    Value = Precio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "IncluyeIva",
                    Value = IncluyeIva ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Costo",
                    Precision = 18,
                    Scale = 4,
                    Value = Costo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "Plantilla",
                    Value = Plantilla ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TipoUnidad_Update] @Id = @Id, @IdEmpresa = @IdEmpresa, @IdProducto = @IdProducto, @TipoUnidad = @TipoUnidad, @Cantidad = @Cantidad, @CantidadMinima = @CantidadMinima, @UnidadMedidad = @UnidadMedidad, @Precio = @Precio, @IncluyeIva = @IncluyeIva, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @Costo = @Costo, @Plantilla = @Plantilla", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UnidadMedida_DeepFindByAllResult>> UnidadMedida_DeepFindByAllAsync(int? Id, string UnidadMedida, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedida",
                    Size = 50,
                    Value = UnidadMedida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UnidadMedida_DeepFindByAllResult>("EXEC @returnValue = [dbo].[UnidadMedida_DeepFindByAll] @Id = @Id, @UnidadMedida = @UnidadMedida, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UnidadMedida_DeepFindByAllPagedAsync(int? Id, string UnidadMedida, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedida",
                    Size = 50,
                    Value = UnidadMedida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UnidadMedida_DeepFindByAllPaged] @Id = @Id, @UnidadMedida = @UnidadMedida, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UnidadMedida_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UnidadMedida_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UnidadMedida_FindByAllResult>> UnidadMedida_FindByAllAsync(int? Id, string UnidadMedida, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedida",
                    Size = 50,
                    Value = UnidadMedida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UnidadMedida_FindByAllResult>("EXEC @returnValue = [dbo].[UnidadMedida_FindByAll] @Id = @Id, @UnidadMedida = @UnidadMedida, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UnidadMedida_FindByAllPagedResult>> UnidadMedida_FindByAllPagedAsync(int? Id, string UnidadMedida, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedida",
                    Size = 50,
                    Value = UnidadMedida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UnidadMedida_FindByAllPagedResult>("EXEC @returnValue = [dbo].[UnidadMedida_FindByAllPaged] @Id = @Id, @UnidadMedida = @UnidadMedida, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UnidadMedida_InsertAsync(string UnidadMedida, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? IdEmpresa, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "UnidadMedida",
                    Size = 50,
                    Value = UnidadMedida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UnidadMedida_Insert] @Id = @Id OUTPUT, @UnidadMedida = @UnidadMedida, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UnidadMedida_LoadAllResult>> UnidadMedida_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UnidadMedida_LoadAllResult>("EXEC @returnValue = [dbo].[UnidadMedida_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UnidadMedida_LoadByPKResult>> UnidadMedida_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UnidadMedida_LoadByPKResult>("EXEC @returnValue = [dbo].[UnidadMedida_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UnidadMedida_UpdateAsync(int? Id, string UnidadMedida, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? IdEmpresa, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UnidadMedida",
                    Size = 50,
                    Value = UnidadMedida ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UnidadMedida_Update] @Id = @Id, @UnidadMedida = @UnidadMedida, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @IdEmpresa = @IdEmpresa", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Usuario_DeepFindByAllResult>> Usuario_DeepFindByAllAsync(string InicioSesion, int? IdEmpresa, short? IdPerifl, string Nombres, string Identificacion, bool? Sexo, string Direccion, string Correo, string Contraseña, string Telefono, byte[] Foto, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "InicioSesion",
                    Size = 50,
                    Value = InicioSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPerifl",
                    Value = IdPerifl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Nombres",
                    Size = 250,
                    Value = Nombres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Identificacion",
                    Size = 10,
                    Value = Identificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Sexo",
                    Value = Sexo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 250,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Correo",
                    Size = 50,
                    Value = Correo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Contraseña",
                    Size = 50,
                    Value = Contraseña ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Telefono",
                    Size = 50,
                    Value = Telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Foto",
                    Size = 1,
                    Value = Foto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Usuario_DeepFindByAllResult>("EXEC @returnValue = [dbo].[Usuario_DeepFindByAll] @InicioSesion = @InicioSesion, @IdEmpresa = @IdEmpresa, @IdPerifl = @IdPerifl, @Nombres = @Nombres, @Identificacion = @Identificacion, @Sexo = @Sexo, @Direccion = @Direccion, @Correo = @Correo, @Contraseña = @Contraseña, @Telefono = @Telefono, @Foto = @Foto, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Usuario_DeepFindByAllPagedAsync(string InicioSesion, int? IdEmpresa, short? IdPerifl, string Nombres, string Identificacion, bool? Sexo, string Direccion, string Correo, string Contraseña, string Telefono, byte[] Foto, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "InicioSesion",
                    Size = 50,
                    Value = InicioSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPerifl",
                    Value = IdPerifl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Nombres",
                    Size = 250,
                    Value = Nombres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Identificacion",
                    Size = 10,
                    Value = Identificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Sexo",
                    Value = Sexo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 250,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Correo",
                    Size = 50,
                    Value = Correo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Contraseña",
                    Size = 50,
                    Value = Contraseña ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Telefono",
                    Size = 50,
                    Value = Telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Foto",
                    Size = 1,
                    Value = Foto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Usuario_DeepFindByAllPaged] @InicioSesion = @InicioSesion, @IdEmpresa = @IdEmpresa, @IdPerifl = @IdPerifl, @Nombres = @Nombres, @Identificacion = @Identificacion, @Sexo = @Sexo, @Direccion = @Direccion, @Correo = @Correo, @Contraseña = @Contraseña, @Telefono = @Telefono, @Foto = @Foto, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Usuario_DeleteAsync(string InicioSesion, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "InicioSesion",
                    Size = 50,
                    Value = InicioSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Usuario_Delete] @InicioSesion = @InicioSesion, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Usuario_InsertAsync(int? IdEmpresa, short? IdPerifl, string Nombres, string Identificacion, bool? Sexo, string Direccion, string Correo, string Contraseña, string Telefono, byte[] Foto, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<string> InicioSesion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterInicioSesion = new SqlParameter
            {
                ParameterName = "InicioSesion",
                Size = 50,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = InicioSesion?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterInicioSesion,
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPerifl",
                    Value = IdPerifl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Nombres",
                    Size = 250,
                    Value = Nombres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Identificacion",
                    Size = 10,
                    Value = Identificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Sexo",
                    Value = Sexo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 250,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Correo",
                    Size = 50,
                    Value = Correo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Contraseña",
                    Size = 50,
                    Value = Contraseña ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Telefono",
                    Size = 50,
                    Value = Telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Foto",
                    Size = 1,
                    Value = Foto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Usuario_Insert] @InicioSesion = @InicioSesion OUTPUT, @IdEmpresa = @IdEmpresa, @IdPerifl = @IdPerifl, @Nombres = @Nombres, @Identificacion = @Identificacion, @Sexo = @Sexo, @Direccion = @Direccion, @Correo = @Correo, @Contraseña = @Contraseña, @Telefono = @Telefono, @Foto = @Foto, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            InicioSesion.SetValue(parameterInicioSesion.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Usuario_LoadAllResult>> Usuario_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Usuario_LoadAllResult>("EXEC @returnValue = [dbo].[Usuario_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Usuario_LoadByPKResult>> Usuario_LoadByPKAsync(string InicioSesion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "InicioSesion",
                    Size = 50,
                    Value = InicioSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Usuario_LoadByPKResult>("EXEC @returnValue = [dbo].[Usuario_LoadByPK] @InicioSesion = @InicioSesion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> Usuario_UpdateAsync(string InicioSesion, int? IdEmpresa, short? IdPerifl, string Nombres, string Identificacion, bool? Sexo, string Direccion, string Correo, string Contraseña, string Telefono, byte[] Foto, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "InicioSesion",
                    Size = 50,
                    Value = InicioSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdEmpresa",
                    Value = IdEmpresa ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdPerifl",
                    Value = IdPerifl ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Nombres",
                    Size = 250,
                    Value = Nombres ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Identificacion",
                    Size = 10,
                    Value = Identificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Sexo",
                    Value = Sexo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Direccion",
                    Size = 250,
                    Value = Direccion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Correo",
                    Size = 50,
                    Value = Correo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Contraseña",
                    Size = 50,
                    Value = Contraseña ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Telefono",
                    Size = 50,
                    Value = Telefono ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Foto",
                    Size = 1,
                    Value = Foto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Usuario_Update] @InicioSesion = @InicioSesion, @IdEmpresa = @IdEmpresa, @IdPerifl = @IdPerifl, @Nombres = @Nombres, @Identificacion = @Identificacion, @Sexo = @Sexo, @Direccion = @Direccion, @Correo = @Correo, @Contraseña = @Contraseña, @Telefono = @Telefono, @Foto = @Foto, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UsuarioLocalBodega_DeepFindByAllResult>> UsuarioLocalBodega_DeepFindByAllAsync(int? Id, string InicioSesion, int? IdLocalBodega, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InicioSesion",
                    Size = 50,
                    Value = InicioSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocalBodega",
                    Value = IdLocalBodega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UsuarioLocalBodega_DeepFindByAllResult>("EXEC @returnValue = [dbo].[UsuarioLocalBodega_DeepFindByAll] @Id = @Id, @InicioSesion = @InicioSesion, @IdLocalBodega = @IdLocalBodega, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UsuarioLocalBodega_DeepFindByAllPagedAsync(int? Id, string InicioSesion, int? IdLocalBodega, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, string OrderBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InicioSesion",
                    Size = 50,
                    Value = InicioSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocalBodega",
                    Value = IdLocalBodega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OrderBy",
                    Size = 1000,
                    Value = OrderBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UsuarioLocalBodega_DeepFindByAllPaged] @Id = @Id, @InicioSesion = @InicioSesion, @IdLocalBodega = @IdLocalBodega, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize, @OrderBy = @OrderBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UsuarioLocalBodega_DeleteAsync(int? Id, DateTime? FechaModificacion, string UsuarioModificacion, string IpModificacion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 20,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UsuarioLocalBodega_Delete] @Id = @Id, @FechaModificacion = @FechaModificacion, @UsuarioModificacion = @UsuarioModificacion, @IpModificacion = @IpModificacion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UsuarioLocalBodega_FindByAllResult>> UsuarioLocalBodega_FindByAllAsync(int? Id, string InicioSesion, int? IdLocalBodega, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InicioSesion",
                    Size = 50,
                    Value = InicioSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocalBodega",
                    Value = IdLocalBodega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UsuarioLocalBodega_FindByAllResult>("EXEC @returnValue = [dbo].[UsuarioLocalBodega_FindByAll] @Id = @Id, @InicioSesion = @InicioSesion, @IdLocalBodega = @IdLocalBodega, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UsuarioLocalBodega_FindByAllPagedResult>> UsuarioLocalBodega_FindByAllPagedAsync(int? Id, string InicioSesion, int? IdLocalBodega, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InicioSesion",
                    Size = 50,
                    Value = InicioSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocalBodega",
                    Value = IdLocalBodega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UsuarioLocalBodega_FindByAllPagedResult>("EXEC @returnValue = [dbo].[UsuarioLocalBodega_FindByAllPaged] @Id = @Id, @InicioSesion = @InicioSesion, @IdLocalBodega = @IdLocalBodega, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado, @PageNumber = @PageNumber, @PageSize = @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UsuarioLocalBodega_InsertAsync(string InicioSesion, int? IdLocalBodega, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int?> Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterId = new SqlParameter
            {
                ParameterName = "Id",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Id?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterId,
                new SqlParameter
                {
                    ParameterName = "InicioSesion",
                    Size = 50,
                    Value = InicioSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocalBodega",
                    Value = IdLocalBodega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UsuarioLocalBodega_Insert] @Id = @Id OUTPUT, @InicioSesion = @InicioSesion, @IdLocalBodega = @IdLocalBodega, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            Id.SetValue(parameterId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UsuarioLocalBodega_LoadAllResult>> UsuarioLocalBodega_LoadAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UsuarioLocalBodega_LoadAllResult>("EXEC @returnValue = [dbo].[UsuarioLocalBodega_LoadAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UsuarioLocalBodega_LoadByPKResult>> UsuarioLocalBodega_LoadByPKAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UsuarioLocalBodega_LoadByPKResult>("EXEC @returnValue = [dbo].[UsuarioLocalBodega_LoadByPK] @Id = @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UsuarioLocalBodega_UpdateAsync(int? Id, string InicioSesion, int? IdLocalBodega, string IpIngreso, string UsuarioIngreso, DateTime? FechaIngreso, string IpModificacion, string UsuarioModificacion, DateTime? FechaModificacion, short? IdEstado, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InicioSesion",
                    Size = 50,
                    Value = InicioSesion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdLocalBodega",
                    Value = IdLocalBodega ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IpIngreso",
                    Size = 15,
                    Value = IpIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioIngreso",
                    Size = 15,
                    Value = UsuarioIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaIngreso",
                    Value = FechaIngreso ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IpModificacion",
                    Size = 15,
                    Value = IpModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UsuarioModificacion",
                    Size = 15,
                    Value = UsuarioModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FechaModificacion",
                    Value = FechaModificacion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IdEstado",
                    Value = IdEstado ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UsuarioLocalBodega_Update] @Id = @Id, @InicioSesion = @InicioSesion, @IdLocalBodega = @IdLocalBodega, @IpIngreso = @IpIngreso, @UsuarioIngreso = @UsuarioIngreso, @FechaIngreso = @FechaIngreso, @IpModificacion = @IpModificacion, @UsuarioModificacion = @UsuarioModificacion, @FechaModificacion = @FechaModificacion, @IdEstado = @IdEstado", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
