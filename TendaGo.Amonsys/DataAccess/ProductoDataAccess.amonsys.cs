    
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Amonsys Software Factory.
//     Template: Speed Developer FrameWork Version 1.0 (For Windows Applications)
//     Web Site: http://www.amonsys.com/SDF
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



using System;
using System.Linq;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using ER.BE; 



namespace ER.DA
{
    public partial class ProductoDataAccess : _DataAccessSchema
    {
		
   
        #region << Default Methods >>

        /// <summary>
        /// Create a new entity type of Producto
        /// </summary>
        public static ProductoEntity Insert(ProductoEntity producto, SqlConnection connection, SqlTransaction transaction)
        {
            SqlCommand mCommand = new SqlCommand();
            try
            {
                mCommand.Connection = connection;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                mCommand.CommandText =  "Producto_Insert";

                #region << Add the params >>
                 
				mCommand.Parameters.AddWithValue("@IdEmpresa", producto.IdEmpresa);
				mCommand.Parameters.AddWithValue("@CodigoProveedor", producto.CodigoProveedor.ToUpper());
				mCommand.Parameters.AddWithValue("@CodigoInterno", producto.CodigoInterno.ToUpper());
                if (!String.IsNullOrEmpty(producto.CodigoBarra))
                {
                    mCommand.Parameters.AddWithValue("@CodigoBarra", producto.CodigoBarra.ToUpper());
                }
                else
                {
                    mCommand.Parameters.AddWithValue("@CodigoBarra", DBNull.Value);
                }
                    
                mCommand.Parameters.AddWithValue("@TipoProducto", producto.TipoProducto.ToUpper());
				mCommand.Parameters.AddWithValue("@Producto", producto.Producto.ToUpper());
				if(!String.IsNullOrEmpty(producto.Descripcion))
				{
					mCommand.Parameters.AddWithValue("@Descripcion", producto.Descripcion.ToUpper());
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Descripcion",DBNull.Value);
				}
                if (!String.IsNullOrEmpty(producto.PathArchivo))
                {
                    mCommand.Parameters.AddWithValue("@PathArchivo", producto.PathArchivo);
                }
                else
                {
                    mCommand.Parameters.AddWithValue("@PathArchivo", DBNull.Value);
                }
                mCommand.Parameters.AddWithValue("@DescipcionBusqueda", string.Empty);
				mCommand.Parameters.AddWithValue("@Stock", producto.Stock);
				if(producto.StockMinimo != 0)
				{
					mCommand.Parameters.AddWithValue("@StockMinimo", producto.StockMinimo);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@StockMinimo",DBNull.Value);
				}

				mCommand.Parameters.AddWithValue("@Costo", producto.Costo);
				if(producto.UnidadMedida != 0)
				{
					mCommand.Parameters.AddWithValue("@UnidadMedida", producto.UnidadMedida);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UnidadMedida",DBNull.Value);
				}

				if(producto.Descuento != 0)
				{
					mCommand.Parameters.AddWithValue("@Descuento", producto.Descuento);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Descuento",DBNull.Value);
				}

				mCommand.Parameters.AddWithValue("@CobraIva", producto.CobraIva);
				if(producto.IdDivision != 0)
				{
					mCommand.Parameters.AddWithValue("@IdDivision", producto.IdDivision);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdDivision",DBNull.Value);
				}

				if(producto.IdLinea != 0)
				{
					mCommand.Parameters.AddWithValue("@IdLinea", producto.IdLinea);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdLinea",DBNull.Value);
				}

				if(producto.IdCategoria != 0)
				{
					mCommand.Parameters.AddWithValue("@IdCategoria", producto.IdCategoria);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdCategoria",DBNull.Value);
				}

				if(producto.IdMarca != 0)
				{
					mCommand.Parameters.AddWithValue("@IdMarca", producto.IdMarca);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdMarca",DBNull.Value);
				}

				if(producto.Peso != 0)
				{
					mCommand.Parameters.AddWithValue("@Peso", producto.Peso);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Peso",DBNull.Value);
				}

				if(producto.Volumen != 0)
				{
					mCommand.Parameters.AddWithValue("@Volumen", producto.Volumen);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Volumen",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(producto.RegistroSanitario))
				{
					mCommand.Parameters.AddWithValue("@RegistroSanitario", producto.RegistroSanitario.ToUpper());
				}
				else
				{
					mCommand.Parameters.AddWithValue("@RegistroSanitario",DBNull.Value);
				}

				mCommand.Parameters.AddWithValue("@IpIngreso", producto.IpIngreso.ToUpper());
				mCommand.Parameters.AddWithValue("@UsuarioIngreso", producto.UsuarioIngreso.ToUpper());
				mCommand.Parameters.AddWithValue("@FechaIngreso", producto.FechaIngreso);
				if(!String.IsNullOrEmpty(producto.IpModificacion))
				{
					mCommand.Parameters.AddWithValue("@IpModificacion", producto.IpModificacion.ToUpper());
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpModificacion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(producto.UsuarioModificacion))
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion", producto.UsuarioModificacion.ToUpper());
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion",DBNull.Value);
				}

				if(producto.FechaModificacion != null && producto.FechaModificacion != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion", producto.FechaModificacion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion",DBNull.Value);
				}
                if (producto.ProductoPadre.HasValue && producto.ProductoPadre != 0)
                {
                    mCommand.Parameters.AddWithValue("@ProductoPadre", producto.ProductoPadre);
                }
                else
                {
                    mCommand.Parameters.AddWithValue("@ProductoPadre", DBNull.Value);
                }
                mCommand.Parameters.AddWithValue("@IdEstado", producto.IdEstado);

				// Add the primary keys columns
				mCommand.Parameters.Add("@Id", SqlDbType.Int);
				mCommand.Parameters["@Id"].Direction = ParameterDirection.Output;


                #endregion
                
                // Insert Producto
                if (connection.State != ConnectionState.Open) connection.Open();
                mCommand.ExecuteNonQuery();

				producto.Id = Convert.ToInt32(mCommand.Parameters["@Id"].Value);


                return producto;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                mCommand.Dispose();
            }
        }

        /// <summary>
        /// Update a entity
        /// </summary>
        public static void Update(ProductoEntity producto, SqlConnection connection, SqlTransaction  transaction)
        {
            SqlCommand mCommand = new SqlCommand();
            try
            {
                mCommand.Connection = connection;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;;
                mCommand.CommandText = "Producto_Update";

                 #region << Add the params >>

				mCommand.Parameters.AddWithValue("@Id", producto.Id);
				mCommand.Parameters.AddWithValue("@IdEmpresa", producto.IdEmpresa);
				mCommand.Parameters.AddWithValue("@CodigoProveedor", producto.CodigoProveedor);
				mCommand.Parameters.AddWithValue("@CodigoInterno", producto.CodigoInterno);
                //mCommand.Parameters.AddWithValue("@CodigoBarra", producto.CodigoBarra);
                mCommand.Parameters.AddWithValue("@TipoProducto", producto.TipoProducto);
				mCommand.Parameters.AddWithValue("@Producto", producto.Producto);
                if (!String.IsNullOrEmpty(producto.CodigoBarra))
                {
                    mCommand.Parameters.AddWithValue("@CodigoBarra", producto.CodigoBarra.ToUpper());
                }
                else
                {
                    mCommand.Parameters.AddWithValue("@CodigoBarra", DBNull.Value);
                }
                if (!String.IsNullOrEmpty(producto.Descripcion))
				{
					mCommand.Parameters.AddWithValue("@Descripcion", producto.Descripcion.ToUpper());
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Descripcion",DBNull.Value);
				}
                if (!String.IsNullOrEmpty(producto.PathArchivo))
                {
                    mCommand.Parameters.AddWithValue("@PathArchivo", producto.PathArchivo);
                }
                else
                {
                    mCommand.Parameters.AddWithValue("@PathArchivo", DBNull.Value);
                }
                mCommand.Parameters.AddWithValue("@DescipcionBusqueda", string.Empty);
				mCommand.Parameters.AddWithValue("@Stock", producto.Stock);
				if(producto.StockMinimo != 0)
				{
					mCommand.Parameters.AddWithValue("@StockMinimo", producto.StockMinimo);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@StockMinimo",DBNull.Value);
				}

				mCommand.Parameters.AddWithValue("@Costo", producto.Costo);
				if(producto.UnidadMedida != 0)
				{
					mCommand.Parameters.AddWithValue("@UnidadMedida", producto.UnidadMedida);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UnidadMedida",DBNull.Value);
				}

				if(producto.Descuento != 0)
				{
					mCommand.Parameters.AddWithValue("@Descuento", producto.Descuento);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Descuento",DBNull.Value);
				}

				mCommand.Parameters.AddWithValue("@CobraIva", producto.CobraIva);
				if(producto.IdDivision != 0)
				{
					mCommand.Parameters.AddWithValue("@IdDivision", producto.IdDivision);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdDivision",DBNull.Value);
				}

				if(producto.IdLinea != 0)
				{
					mCommand.Parameters.AddWithValue("@IdLinea", producto.IdLinea);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdLinea",DBNull.Value);
				}

				if(producto.IdCategoria != 0)
				{
					mCommand.Parameters.AddWithValue("@IdCategoria", producto.IdCategoria);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdCategoria",DBNull.Value);
				}

				if(producto.IdMarca != 0)
				{
					mCommand.Parameters.AddWithValue("@IdMarca", producto.IdMarca);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IdMarca",DBNull.Value);
				}

				if(producto.Peso != 0)
				{
					mCommand.Parameters.AddWithValue("@Peso", producto.Peso);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Peso",DBNull.Value);
				}

				if(producto.Volumen != 0)
				{
					mCommand.Parameters.AddWithValue("@Volumen", producto.Volumen);
				}
				else
				{
					mCommand.Parameters.AddWithValue("@Volumen",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(producto.RegistroSanitario))
				{
					mCommand.Parameters.AddWithValue("@RegistroSanitario", producto.RegistroSanitario.ToUpper());
				}
				else
				{
					mCommand.Parameters.AddWithValue("@RegistroSanitario",DBNull.Value);
				}

				mCommand.Parameters.AddWithValue("@IpIngreso", producto.IpIngreso);
				mCommand.Parameters.AddWithValue("@UsuarioIngreso", producto.UsuarioIngreso);
				mCommand.Parameters.AddWithValue("@FechaIngreso", producto.FechaIngreso);
				if(!String.IsNullOrEmpty(producto.IpModificacion))
				{
					mCommand.Parameters.AddWithValue("@IpModificacion", producto.IpModificacion.ToUpper());
				}
				else
				{
					mCommand.Parameters.AddWithValue("@IpModificacion",DBNull.Value);
				}

				if(!String.IsNullOrEmpty(producto.UsuarioModificacion))
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion", producto.UsuarioModificacion.ToUpper());
				}
				else
				{
					mCommand.Parameters.AddWithValue("@UsuarioModificacion",DBNull.Value);
				}

				if(producto.FechaModificacion != null && producto.FechaModificacion != DateTime.MinValue)
				{
					mCommand.Parameters.AddWithValue("@FechaModificacion", producto.FechaModificacion);
				}
				else
				{
					mCommand.Parameters.AddWithValue("FechaModificacion",DBNull.Value);
				}
                if (producto.ProductoPadre != null && producto.ProductoPadre != 0)
                {
                    mCommand.Parameters.AddWithValue("@ProductoPadre", producto.ProductoPadre);
                }
                else
                {
                    mCommand.Parameters.AddWithValue("@ProductoPadre", DBNull.Value);
                }
                mCommand.Parameters.AddWithValue("@IdEstado", producto.IdEstado);
                
   
                #endregion
                
                // Update producto
                if (connection.State != ConnectionState.Open) connection.Open();
                mCommand.ExecuteNonQuery();


            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                mCommand.Dispose();
            }
        }

         /// <summary>
        /// Delete a entity
        /// </summary>
        public static void Delete(ProductoEntity producto, SqlConnection connection, SqlTransaction  transaction)
        {
            SqlCommand mCommand = new SqlCommand();
            try
            {
                mCommand.Connection = connection;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;;
                mCommand.CommandText = "Producto_Delete";
				mCommand.Parameters.AddWithValue("@Id", producto.Id);
				mCommand.Parameters.AddWithValue("@FechaModificacion", producto.FechaModificacion);
				mCommand.Parameters.AddWithValue("@UsuarioModificacion", producto.UsuarioModificacion.ToUpper());
				mCommand.Parameters.AddWithValue("@IpModificacion", producto.IpModificacion.ToUpper());

                
                // Update producto
                if (connection.State != ConnectionState.Open) connection.Open();
                mCommand.ExecuteNonQuery();


            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                mCommand.Dispose();
            }
        }
        
        
         
         
         /// <summary>
        /// Load a entity by your Primary Key
        /// </summary>
        public static ProductoEntity LoadByPK(int Id, SqlConnection connection, SqlTransaction  transaction)
        {
        	return LoadByPK(Id,connection,transaction,1);
        }
        
        /// <summary>
        /// Load a entity by your Primary Key
        /// </summary>
        public static ProductoEntity LoadByPK(int Id, SqlConnection connection, SqlTransaction  transaction, int deepLoadLevel)
        {
            ProductoEntity producto = new ProductoEntity();
            
			producto.Id = Id;
            
            
            SqlCommand mCommand = new SqlCommand();
            SqlDataReader reader = null;
            try
            {
                mCommand.Connection = connection;
                mCommand.CommandType = CommandType.StoredProcedure;
                mCommand.Transaction = transaction;
                mCommand.CommandText = "Producto_LoadByPK";

                #region << Add the params >>

				mCommand.Parameters.AddWithValue("@Id", producto.Id);
                
 
                #endregion 
                
                if (connection.State != ConnectionState.Open) connection.Open();

                reader = mCommand.ExecuteReader();

                if(!reader.HasRows) return null;
                
	            while (reader.Read())
	            {
					#region << Deep Load >>
                    if (deepLoadLevel == 1)
		     		{
						producto.UnidadMedidaAsUnidadMedida = UnidadMedidaDataAccess.ConvertToUnidadMedidaEntity(reader, "UnidadMedida");
						producto.IdDivisionAsDivision = DivisionDataAccess.ConvertToDivisionEntity(reader, "IdDivision");
						producto.IdLineaAsLinea = LineaDataAccess.ConvertToLineaEntity(reader, "IdLinea");
						producto.IdCategoriaAsCategoria = CategoriaDataAccess.ConvertToCategoriaEntity(reader, "IdCategoria");
						producto.IdMarcaAsMarca = MarcaDataAccess.ConvertToMarcaEntity(reader, "IdMarca");
                        producto.ProductoPadreAsProducto = ProductoDataAccess.ConvertToProductoEntity(reader, "ProductoPadre");
                    }
	                #endregion
	                
	                #region << Load the BusinessEntity Object >>
					
					producto.Id = Convert.ToInt32(reader["Id"]);
					producto.IdEmpresa = Convert.ToInt16(reader["IdEmpresa"]);
					producto.IdTarifaImpuesto = Convert.ToInt16(reader["IdTarifaImpuesto"]);
					producto.PorcentajeTarifaImpuesto = Convert.ToInt16(reader["PorcentajeTarifaImpuesto"]);
					producto.CodigoProveedor = Convert.ToString(reader["CodigoProveedor"]);
					producto.CodigoInterno = Convert.ToString(reader["CodigoInterno"]);
                    producto.CodigoBarra = Convert.ToString(reader["CodigoBarra"]);
                    producto.TipoProducto = Convert.ToString(reader["TipoProducto"]);
					producto.Producto = Convert.ToString(reader["Producto"]);
					if (reader["Descripcion"] != DBNull.Value)
					{
						producto.Descripcion = Convert.ToString(reader["Descripcion"]).ToUpper();
					}
                    if (reader["PathArchivo"] != DBNull.Value)
                    {
                        producto.PathArchivo = Convert.ToString(reader["PathArchivo"]);
                    }
                    producto.DescipcionBusqueda = Convert.ToString(reader["DescipcionBusqueda"]);
					producto.Stock = Convert.ToDecimal(reader["Stock"]);
					if (reader["StockMinimo"] != DBNull.Value)
					{
						producto.StockMinimo = Convert.ToDecimal(reader["StockMinimo"]);
					}
					producto.Costo = (decimal) reader["Costo"];
					if (reader["UnidadMedida"] != DBNull.Value)
					{
						producto.UnidadMedida = Convert.ToInt32(reader["UnidadMedida"]);
					}
					if (reader["Descuento"] != DBNull.Value)
					{
						producto.Descuento = (decimal) reader["Descuento"];
					}
					if (reader["CobraIva"] != DBNull.Value)
					{
						producto.CobraIva = Convert.ToBoolean(reader["CobraIva"]);
					}
					if (reader["IdDivision"] != DBNull.Value)
					{
						producto.IdDivision = Convert.ToInt32(reader["IdDivision"]);
					}
					if (reader["IdLinea"] != DBNull.Value)
					{
						producto.IdLinea = Convert.ToInt32(reader["IdLinea"]);
					}
					if (reader["IdCategoria"] != DBNull.Value)
					{
						producto.IdCategoria = Convert.ToInt32(reader["IdCategoria"]);
					}
					if (reader["IdMarca"] != DBNull.Value)
					{
						producto.IdMarca = Convert.ToInt32(reader["IdMarca"]);
					}
					if (reader["Peso"] != DBNull.Value)
					{
						producto.Peso = (decimal) reader["Peso"];
					}
					if (reader["Volumen"] != DBNull.Value)
					{
						producto.Volumen = (decimal) reader["Volumen"];
					}
					if (reader["RegistroSanitario"] != DBNull.Value)
					{
						producto.RegistroSanitario = Convert.ToString(reader["RegistroSanitario"]).ToUpper();
					}
					producto.IpIngreso = Convert.ToString(reader["IpIngreso"]);
					producto.UsuarioIngreso = Convert.ToString(reader["UsuarioIngreso"]);
					producto.FechaIngreso = Convert.ToDateTime(reader["FechaIngreso"]);
					if (reader["IpModificacion"] != DBNull.Value)
					{
						producto.IpModificacion = Convert.ToString(reader["IpModificacion"]).ToUpper();
					}
					if (reader["UsuarioModificacion"] != DBNull.Value)
					{
						producto.UsuarioModificacion = Convert.ToString(reader["UsuarioModificacion"]).ToUpper();
					}
					if (reader["FechaModificacion"] != DBNull.Value)
					{
						producto.FechaModificacion = Convert.ToDateTime(reader["FechaModificacion"]);
					}
                    if (reader["ProductoPadre"] != DBNull.Value)
                    {
                        producto.ProductoPadre = Convert.ToInt32(reader["ProductoPadre"]);
                    }
                    producto.IdEstado = Convert.ToInt16(reader["IdEstado"]);

	                #endregion
	            }

                producto.SetLoadedState();
                return producto;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (reader != null) reader.Close();
                mCommand.Dispose();
            }
        }

        #endregion

        #region << Mappers >>

        public static ProductoEntity ConvertToProductoEntity (SqlDataReader reader,string fkColumnName)
        {
            ProductoEntity producto = new ProductoEntity();

            ConfigureSchema(reader, fkColumnName);
            
            try
            {
                bool hasData=false;
                string columName;
                
                #region << Load the BusinessEntity Object >>
                
				try
				{
                    columName = String.Format("Id_ProductoFrom{0}", fkColumnName);
					if(ColumnExists(fkColumnName, columName))
					if (reader[columName] != DBNull.Value)
					{
						producto.Id = Convert.ToInt32(reader[columName]);
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("IdEmpresa_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.IdEmpresa = Convert.ToInt16(reader[columName]);
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("CodigoProveedor_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) 
						if (reader[columName] != DBNull.Value)
					{
						producto.CodigoProveedor = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("CodigoInterno_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) 
						if (reader[columName] != DBNull.Value)
					{
						producto.CodigoInterno = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
                try
                {
                    columName = String.Format("CodigoBarra_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
                    {
                        producto.CodigoBarra = Convert.ToString(reader[columName]).ToUpper();
                        hasData = true;
                    }
                }
                catch { }
                try
				{
					columName = String.Format("TipoProducto_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.TipoProducto = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("Producto_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.Producto = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("Descripcion_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.Descripcion = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
                try
                {
                    columName = String.Format("PathArchivo_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
                    {
                        producto.PathArchivo = Convert.ToString(reader[columName]);
                        hasData = true;
                    }
                }
                catch { }
                try
				{
					columName = String.Format("DescipcionBusqueda_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.DescipcionBusqueda = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("Stock_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.Stock = Convert.ToDecimal(reader[columName]);
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("StockMinimo_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.StockMinimo = Convert.ToDecimal(reader[columName]);
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("Costo_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.Costo = (decimal) reader[columName];
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("UnidadMedida_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.UnidadMedida = Convert.ToInt32(reader[columName]);
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("Descuento_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.Descuento = (decimal) reader[columName];
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("CobraIva_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.CobraIva = Convert.ToBoolean(reader[columName]);
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("IdDivision_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.IdDivision = Convert.ToInt32(reader[columName]);
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("IdLinea_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.IdLinea = Convert.ToInt32(reader[columName]);
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("IdCategoria_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.IdCategoria = Convert.ToInt32(reader[columName]);
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("IdMarca_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.IdMarca = Convert.ToInt32(reader[columName]);
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("Peso_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.Peso = (decimal) reader[columName];
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("Volumen_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.Volumen = (decimal) reader[columName];
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("RegistroSanitario_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.RegistroSanitario = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("IpIngreso_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.IpIngreso = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("UsuarioIngreso_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.UsuarioIngreso = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("FechaIngreso_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.FechaIngreso = Convert.ToDateTime(reader[columName]);
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("IpModificacion_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.IpModificacion = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("UsuarioModificacion_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.UsuarioModificacion = Convert.ToString(reader[columName]).ToUpper();
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("FechaModificacion_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.FechaModificacion = Convert.ToDateTime(reader[columName]);
						hasData = true;
					}
				}
				catch{}
				try
				{
					columName = String.Format("IdEstado_ProductoFrom{0}", fkColumnName);
                    if (ColumnExists(fkColumnName, columName)) if (reader[columName] != DBNull.Value)
					{
						producto.IdEstado = Convert.ToInt16(reader[columName]);
						hasData = true;
					}
				}
				catch{}

                
                #endregion
                
                producto.SetLoadedState();
                if(hasData)
                {
                	return producto;
                }
                else return null;
            }
            catch (Exception exc)
            {
                return null;
            }
            finally
            {
                
            }
        }
        
        #endregion
        
   
    }
}


