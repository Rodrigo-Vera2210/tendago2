    
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Amonsys Software Factory.
//     Template: Speed Developer FrameWork Version 1.0 (For Windows Applications)
//     Web Site: http://www.amonsys.com/SDF
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



using System;
using System.Collections.Generic;
using System.Text;

namespace ER.BE
{
    
    [System.Serializable] 
    public partial class StockEntityBase : EntityStatesManager
    
    {

        #region << Columns >>

		public const string Id_EntityColumn = "Id";
		public const string IdEmpresa_EntityColumn = "IdEmpresa";
		public const string Tipo_EntityColumn = "Tipo";
		public const string IdSalidaEntrada_EntityColumn = "IdSalidaEntrada";
		public const string IdDetalle_EntityColumn = "IdDetalle";
		public const string IdProducto_EntityColumn = "IdProducto";
		public const string IdLocal_EntityColumn = "IdLocal";
		public const string Fecha_EntityColumn = "Fecha";
		public const string Cantidad_EntityColumn = "Cantidad";
		public const string ValorUnitario_EntityColumn = "ValorUnitario";
		public const string ValorTotal_EntityColumn = "ValorTotal";
		public const string IdTipoUnidad_EntityColumn = "IdTipoUnidad";
		public const string CantidadTipoUnidad_EntityColumn = "CantidadTipoUnidad";
		public const string StockInventario_EntityColumn = "StockInventario";
		public const string CostoPromedioPonderado_EntityColumn = "CostoPromedioPonderado";
		public const string SaldoInventario_EntityColumn = "SaldoInventario";
		public const string IdEstado_EntityColumn = "IdEstado";
        public const string ProductoPadre_EntityColumn = "ProductoPadre";
        public const string UnidadMedidaAsUnidadMedida_EntityColumn = "UnidadMedidaAsUnidadMedida";
        public const string UnidadMedida_DisplayMember_EntityColumn = "UnidadMedida_DisplayMember";


        #endregion


        #region << Atributtes >>

        private string _id;
		private int _idEmpresa;
		private string _tipo;
		private string _idSalidaEntrada;
		private string _idDetalle;
		private int _idProducto;
        private ProductoEntity _idProductoAsProducto;
		private int _idLocal;
        private LocalBodegaEntity _idLocalAsLocal;
		private DateTime _fecha;
		private decimal _cantidad;
		private decimal _valorUnitario;
		private decimal _valorTotal;
		private int _idTipoUnidad;
		private decimal _cantidadTipoUnidad;
		private decimal _stockInventario;
		private decimal _costoPromedioPonderado;
		private decimal _saldoInventario;
		private short _idEstado;
        private int? _productoPadre;
        private UnidadMedidaEntity _UnidadMedidaAsUnidadMedida;

        #endregion

        #region << Properties >>

        /// <summary> 
        /// Get or sets a obligatory value of Id. 
        /// </summary>
        public virtual string Id
		{
			get
			{
				return _id;
			}
			set
			{
				if (_id != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_id = value;
			}
		}

        /// <summary> 
        /// Get or sets a obligatory value of Id. 
        /// </summary>
        public virtual int? ProductoPadre
        {
            get
            {
                return _productoPadre;
            }
            set
            {
                if (_productoPadre != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
                {
                    CurrentState = EntityStatesEnum.Updated;
                }
                _productoPadre = value;
            }
        }

        /// <summary> 
        /// Get or sets a obligatory value of IdEmpresa. 
        /// </summary>
        public virtual int IdEmpresa
		{
			get
			{
				return _idEmpresa;
			}
			set
			{
				if (_idEmpresa != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_idEmpresa = value;
			}
		}

		/// <summary> 
		/// Get or sets a optional value of Tipo. 
		/// </summary>
		public virtual string Tipo
		{
			get
			{
				return _tipo;
			}
			set
			{
				if (_tipo != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_tipo = value;
			}
		}

		/// <summary> 
		/// Get or sets a optional value of IdSalidaEntrada. 
		/// </summary>
		public virtual string IdSalidaEntrada
		{
			get
			{
				return _idSalidaEntrada;
			}
			set
			{
				if (_idSalidaEntrada != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_idSalidaEntrada = value;
			}
		}

		/// <summary> 
		/// Get or sets a optional value of IdDetalle. 
		/// </summary>
		public virtual string IdDetalle
		{
			get
			{
				return _idDetalle;
			}
			set
			{
				if (_idDetalle != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_idDetalle = value;
			}
		}

		/// <summary> 
		/// Get or sets a obligatory value of IdProducto. 
		/// </summary>
		public virtual int IdProducto
		{
			get
			{
				return _idProducto;
			}
			set
			{
				if (_idProducto != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_idProducto = value;
			}
		}

        public virtual ProductoEntity IdProductoAsProducto
        {
            get
            {
                return _idProductoAsProducto;
            }
            set
            {
                if (_idProductoAsProducto != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
                {
                    CurrentState = EntityStatesEnum.Updated;
                }
                _idProductoAsProducto = value;
            }
        }

        /// <summary> 
        /// Get or sets a obligatory value of IdLocal. 
        /// </summary>
        public virtual int IdLocal
		{
			get
			{
				return _idLocal;
			}
			set
			{
				if (_idLocal != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_idLocal = value;
			}
		}

        public virtual LocalBodegaEntity IdLocalAsLocal
        {
            get
            {
                return _idLocalAsLocal;
            }
            set
            {
                if (_idLocalAsLocal != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
                {
                    CurrentState = EntityStatesEnum.Updated;
                }
                _idLocalAsLocal = value;
            }
        }

        /// <summary> 
        /// Get or sets a obligatory value of Fecha. 
        /// </summary>
        public virtual DateTime Fecha
		{
			get
			{
				return _fecha;
			}
			set
			{
				if (_fecha != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_fecha = value;
			}
		}

		/// <summary> 
		/// Get or sets a obligatory value of Cantidad. 
		/// </summary>
		public virtual decimal Cantidad
		{
			get
			{
				return _cantidad;
			}
			set
			{
				if (_cantidad != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_cantidad = value;
			}
		}

		/// <summary> 
		/// Get or sets a obligatory value of ValorUnitario. 
		/// </summary>
		public virtual decimal ValorUnitario
		{
			get
			{
				return _valorUnitario;
			}
			set
			{
				if (_valorUnitario != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_valorUnitario = value;
			}
		}

		/// <summary> 
		/// Get or sets a optional value of ValorTotal. 
		/// </summary>
		public virtual decimal ValorTotal
		{
			get
			{
				return _valorTotal;
			}
			set
			{
				if (_valorTotal != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_valorTotal = value;
			}
		}

		/// <summary> 
		/// Get or sets a obligatory value of IdTipoUnidad. 
		/// </summary>
		public virtual int IdTipoUnidad
		{
			get
			{
				return _idTipoUnidad;
			}
			set
			{
				if (_idTipoUnidad != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_idTipoUnidad = value;
			}
		}

		/// <summary> 
		/// Get or sets a optional value of CantidadTipoUnidad. 
		/// </summary>
		public virtual decimal CantidadTipoUnidad
		{
			get
			{
				return _cantidadTipoUnidad;
			}
			set
			{
				if (_cantidadTipoUnidad != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_cantidadTipoUnidad = value;
			}
		}

		/// <summary> 
		/// Get or sets a optional value of StockInventario. 
		/// </summary>
		public virtual decimal StockInventario
		{
			get
			{
				return _stockInventario;
			}
			set
			{
				if (_stockInventario != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_stockInventario = value;
			}
		}

		/// <summary> 
		/// Get or sets a optional value of CostoPromedioPonderado. 
		/// </summary>
		public virtual decimal CostoPromedioPonderado
		{
			get
			{
				return _costoPromedioPonderado;
			}
			set
			{
				if (_costoPromedioPonderado != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_costoPromedioPonderado = value;
			}
		}

		/// <summary> 
		/// Get or sets a optional value of SaldoInventario. 
		/// </summary>
		public virtual decimal SaldoInventario
		{
			get
			{
				return _saldoInventario;
			}
			set
			{
				if (_saldoInventario != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_saldoInventario = value;
			}
		}

		/// <summary> 
		/// Get or sets a optional value of IdEstado. 
		/// </summary>
		public virtual short IdEstado
		{
			get
			{
				return _idEstado;
			}
			set
			{
				if (_idEstado != value && CurrentState != EntityStatesEnum.New && CurrentState != EntityStatesEnum.Deleted)
				{
					CurrentState = EntityStatesEnum.Updated;
				}
				_idEstado = value;
			}
		}

        public virtual UnidadMedidaEntity UnidadMedidaAsUnidadMedida
        {
            get
            {
                return _UnidadMedidaAsUnidadMedida;
            }
            set
            {
                _UnidadMedidaAsUnidadMedida = value;
            }
        }

        public virtual string UnidadMedida_DisplayMember
        {
            get
            {
                if (UnidadMedidaAsUnidadMedida != null)
                {
                    return UnidadMedidaAsUnidadMedida.ToString();
                }
                return "";
            }
        }

        #endregion


        public StockEntityBase ()
        {
            SetNewState();
        }
        
        
        internal StockEntity CopyBase()
        {
          StockEntity copy = new StockEntity();
          copy.Id = this.Id;
          copy.IdEmpresa = this.IdEmpresa;
          copy.Tipo = this.Tipo;
          copy.IdSalidaEntrada = this.IdSalidaEntrada;
          copy.IdDetalle = this.IdDetalle;
          copy.IdProducto = this.IdProducto;
          copy.IdLocal = this.IdLocal;
          copy.Fecha = this.Fecha;
          copy.Cantidad = this.Cantidad;
          copy.ValorUnitario = this.ValorUnitario;
          copy.ValorTotal = this.ValorTotal;
          copy.IdTipoUnidad = this.IdTipoUnidad;
          copy.CantidadTipoUnidad = this.CantidadTipoUnidad;
          copy.StockInventario = this.StockInventario;
          copy.CostoPromedioPonderado = this.CostoPromedioPonderado;
          copy.SaldoInventario = this.SaldoInventario;
          copy.IdEstado = this.IdEstado;
          copy.ProductoPadre = this.ProductoPadre;
            
			if (this.UnidadMedidaAsUnidadMedida != null)
            {
                copy.UnidadMedidaAsUnidadMedida = this.UnidadMedidaAsUnidadMedida.Copy();
            }

            return copy;
          
        }
        
        #region << Entity State Methods >>
        public void RollBackChildrensState()
        {
            if (_UnidadMedidaAsUnidadMedida != null)
            {
                if (_UnidadMedidaAsUnidadMedida.PreviousState != EntityStatesEnum.None) _UnidadMedidaAsUnidadMedida.RollBackState();
            }
        }
        
        internal void SetStateBase(EntityStatesEnum state)
        {
			this.CurrentState=state;
            if (_UnidadMedidaAsUnidadMedida != null)
            {
                if (_UnidadMedidaAsUnidadMedida.CurrentState != state) _UnidadMedidaAsUnidadMedida.SetState(state);
            }
        }
        #endregion
        
        private bool __selected;

        public bool __Selected
        {
            get { return __selected; }
            set { __selected = value; }
        }
        
        
#region << Children >>

        
#endregion
        
        
        
    }
}

