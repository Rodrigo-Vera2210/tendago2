    
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Amonsys Software Factory.
//     Template: Speed Developer FrameWork Version 1.0 (For Windows Applications)
//     Web Site: http://www.amonsys.com/SDF
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



#region using

using System;
using System.Collections.Generic;
using System.Data;

using System.Data.SqlClient;
using System.Net;
using ER.BE; 
using ER.DA; 
using System.Transactions;
using System.Configuration;
using System.Linq;

#endregion using

namespace ER.BA
{
    public partial class EntradaBussinesAction
    {

        #region Implementation

        public static EntradaEntity Save(EntradaEntity entrada)
        {
            return Save(entrada, null, null);
        }

        public static EntradaEntity Save(EntradaEntity entrada, SqlConnection connection, SqlTransaction transaction)
        {
            bool isBAParent = false;
            if (connection == null)
            {
                isBAParent = true;
                connection = new SqlConnection(ConfigurationManager.AppSettings["TendaGo"]);
                connection.Open();
                transaction = connection.BeginTransaction(System.Data.IsolationLevel.ReadCommitted);

            }

            try
            {

                //                using (TransactionScope transactionScope = new TransactionScope(TransactionScopeOption.Required))
                //                {
                /*
                                    if( entrada.IdLocalAsLocalBodega != null && entrada.IdLocalAsLocalBodega.CanSave )
                                    {
                                        entrada.IdLocal = LocalBodegaBussinesAction.Save(entrada.IdLocalAsLocalBodega , connection,transaction).Id;
                                    }

                                    if( entrada.IdProveedorAsEntidad != null && entrada.IdProveedorAsEntidad.CanSave )
                                    {
                                        entrada.IdProveedor = EntidadBussinesAction.Save(entrada.IdProveedorAsEntidad , connection,transaction).Id;
                                    }


                */
                switch (entrada.CurrentState)
                {
                    case EntityStatesEnum.Deleted:
                        EntradaDataAccess.Delete(entrada, connection, transaction);
                        break;
                    case EntityStatesEnum.Updated:
                        EntradaDataAccess.Update(entrada, connection, transaction);
                        break;
                    case EntityStatesEnum.New:
                        entrada = EntradaDataAccess.Insert(entrada, connection, transaction);
                        break;
                    default:
                        break;
                }

                if (entrada.DetalleEntradaFromIdEntrada != null)
                {
                    foreach (var detalle in entrada.DetalleEntradaFromIdEntrada)
                    {
                        if (entrada.CurrentState == EntityStatesEnum.Deleted)
                        {
                            detalle.IdEstado = 0;
                            detalle.SetDeletedState();
                        }

                        if (detalle.CurrentState == EntityStatesEnum.New)
                        {
                            detalle.Periodo = entrada.Periodo;
                            detalle.IdEmpresa = entrada.IdEmpresa;
                            detalle.Fecha = entrada.Fecha;
                            detalle.TipoTransaccion = entrada.TipoTransaccion;
                            detalle.IdEntrada = entrada.Id;
                            detalle.IdProveedor = entrada.IdProveedor;
                            detalle.IdEstado = entrada.IdEstado;

                            detalle.FechaIngreso = entrada.FechaModificacion ?? entrada.FechaIngreso;
                            detalle.UsuarioIngreso = string.IsNullOrEmpty(entrada.UsuarioModificacion) ? entrada.UsuarioIngreso : entrada.UsuarioModificacion;
                            detalle.IpIngreso = string.IsNullOrEmpty(entrada.IpModificacion) ? entrada.IpIngreso : entrada.IpModificacion;
                        }
                        else
                        { 
                            detalle.FechaModificacion = entrada.FechaModificacion ?? entrada.FechaIngreso;
                            detalle.UsuarioModificacion = string.IsNullOrEmpty(entrada.UsuarioModificacion) ? entrada.UsuarioIngreso : entrada.UsuarioModificacion;
                            detalle.IpModificacion = string.IsNullOrEmpty(entrada.IpModificacion) ? entrada.IpIngreso : entrada.IpModificacion;
                        }
                        
                    }

                    DetalleEntradaCollectionBussinesAction.Save(entrada.DetalleEntradaFromIdEntrada, connection, transaction);

                }

                //                } 

                //End of Transaction
                if (isBAParent && transaction != null)
                {
                    transaction.Commit();
                    entrada.SetState(EntityStatesEnum.SavedSuccessfully);
                }

                return entrada;
            }
            catch (Exception exc)
            {
                if (isBAParent && transaction != null)
                {
                    transaction.Rollback();
                    if (entrada != null) entrada.RollBackState();

                }
                throw exc;
            }
            finally
            {
                if (isBAParent) connection.Close();
            }
        }





        public static EntradaEntity LoadByPK(string Id)
        {
            return LoadByPK(Id, null, null, 1);
        }
        public static EntradaEntity LoadByPK(string Id, int deepLoadLevel)
        {
            return LoadByPK(Id, null, null, deepLoadLevel);
        }

        public static EntradaEntity LoadByPK(string Id, SqlConnection connection, SqlTransaction transaction)
        {
            return LoadByPK(Id, connection, transaction, 1);
        }

        public static EntradaEntity LoadByPK(string Id, SqlConnection connection, SqlTransaction transaction, int deepLoadLevel)
        {
            bool isBAParent = false;
            if (connection == null)
            {
                isBAParent = true;
                connection = new SqlConnection(ConfigurationManager.AppSettings["TendaGo"]);

            }

            try
            {


                EntradaEntity entrada = EntradaDataAccess.LoadByPK(Id, connection, transaction, deepLoadLevel);
                if (entrada != null)
                {
                    if (deepLoadLevel > 1)
                    {
                        entrada.IdLocalAsLocalBodega = LocalBodegaBussinesAction.LoadByPK(entrada.IdLocal, connection, transaction, deepLoadLevel - 1);
                        entrada.IdProveedorAsEntidad = EntidadBussinesAction.LoadByPK(entrada.IdProveedor, connection, transaction, deepLoadLevel - 1);

                    }

                    entrada.SetLoadedState();
                }

                return entrada;
            }
            catch (Exception exc)
            {
                throw exc;
            }
            finally
            {
                if (isBAParent) connection.Close();
            }
        }


        #endregion Implementation

    }
}


